
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\123\000\002\004\003\000\002\002\004\000\002\004" +
    "\004\000\002\040\003\000\002\040\004\000\002\040\004" +
    "\000\002\041\003\000\002\041\004\000\002\051\003\000" +
    "\002\051\004\000\002\051\003\000\002\051\004\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\045\010\000" +
    "\002\045\005\000\002\045\013\000\002\045\010\000\002" +
    "\037\003\000\002\037\003\000\002\047\005\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\042\003" +
    "\000\002\042\004\000\002\020\011\000\002\020\007\000" +
    "\002\021\003\000\002\021\005\000\002\043\003\000\002" +
    "\043\004\000\002\035\007\000\002\035\006\000\002\052" +
    "\002\000\002\052\003\000\002\052\005\000\002\024\010" +
    "\000\002\024\010\000\002\024\010\000\002\024\010\000" +
    "\002\024\010\000\002\031\003\000\002\031\004\000\002" +
    "\030\007\000\002\027\003\000\002\027\004\000\002\026" +
    "\004\000\002\026\005\000\002\026\006\000\002\026\006" +
    "\000\002\026\005\000\002\017\003\000\002\017\005\000" +
    "\002\025\002\000\002\025\004\000\002\025\004\000\002" +
    "\025\004\000\002\025\004\000\002\025\006\000\002\025" +
    "\006\000\002\025\006\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\034\003\000\002\007\003\000" +
    "\002\014\003\000\002\015\003\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\007\000\002\006\007\000\002\006\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\040\010\016\014\005\015\021\016\017\017" +
    "\014\022\031\023\042\024\035\025\030\032\020\056\032" +
    "\067\012\101\041\171\025\176\010\001\002\000\004\176" +
    "\251\001\002\000\004\176\uffe8\001\002\000\004\176\232" +
    "\001\002\000\044\002\ufff3\010\ufff3\014\ufff3\015\ufff3\016" +
    "\ufff3\017\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\027\ufff3" +
    "\032\ufff3\056\ufff3\067\ufff3\101\ufff3\171\ufff3\176\ufff3\001" +
    "\002\000\004\176\214\001\002\000\042\002\001\010\001" +
    "\014\001\015\001\016\001\017\001\022\001\023\001\024" +
    "\001\025\001\032\001\056\001\067\001\101\001\171\001" +
    "\176\001\001\002\000\004\176\uffe7\001\002\000\004\176" +
    "\175\001\002\000\004\176\uffbc\001\002\000\044\002\ufff1" +
    "\010\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\022\ufff1\023" +
    "\ufff1\024\ufff1\025\ufff1\027\ufff1\032\ufff1\056\ufff1\067\ufff1" +
    "\101\ufff1\171\ufff1\176\ufff1\001\002\000\004\176\uffb7\001" +
    "\002\000\004\020\uffe4\001\002\000\004\176\uffe2\001\002" +
    "\000\004\020\uffe5\001\002\000\044\002\ufff4\010\ufff4\014" +
    "\ufff4\015\ufff4\016\ufff4\017\ufff4\022\ufff4\023\ufff4\024\ufff4" +
    "\025\ufff4\027\ufff4\032\ufff4\056\ufff4\067\ufff4\101\ufff4\171" +
    "\ufff4\176\ufff4\001\002\000\044\002\ufff2\010\ufff2\014\ufff2" +
    "\015\ufff2\016\ufff2\017\ufff2\022\ufff2\023\ufff2\024\ufff2\025" +
    "\ufff2\027\ufff2\032\ufff2\056\ufff2\067\ufff2\101\ufff2\171\ufff2" +
    "\176\ufff2\001\002\000\044\002\ufff5\010\ufff5\014\ufff5\015" +
    "\ufff5\016\ufff5\017\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5" +
    "\027\ufff5\032\ufff5\056\ufff5\067\ufff5\101\ufff5\171\ufff5\176" +
    "\ufff5\001\002\000\004\176\uffb6\001\002\000\044\002\ufff0" +
    "\010\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\022\ufff0\023" +
    "\ufff0\024\ufff0\025\ufff0\027\ufff0\032\ufff0\056\ufff0\067\ufff0" +
    "\101\ufff0\171\ufff0\176\ufff0\001\002\000\004\020\166\001" +
    "\002\000\004\020\uffe3\001\002\000\004\176\uffbb\001\002" +
    "\000\004\032\165\001\002\000\042\002\164\010\016\014" +
    "\005\015\021\016\017\017\014\022\031\023\042\024\035" +
    "\025\030\032\020\056\032\067\012\101\041\171\025\176" +
    "\010\001\002\000\004\176\156\001\002\000\004\176\uffb8" +
    "\001\002\000\004\176\151\001\002\000\004\176\144\001" +
    "\002\000\004\176\043\001\002\000\004\176\uffb9\001\002" +
    "\000\004\176\uffba\001\002\000\006\004\044\012\045\001" +
    "\002\000\044\002\uffb2\010\uffb2\014\uffb2\015\uffb2\016\uffb2" +
    "\017\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\027\uffb2\032" +
    "\uffb2\056\uffb2\067\uffb2\101\uffb2\171\uffb2\176\uffb2\001\002" +
    "\000\022\010\016\013\uffc4\017\014\022\031\023\042\024" +
    "\035\031\uffc4\171\025\001\002\000\004\176\141\001\002" +
    "\000\006\013\uffc6\031\uffc6\001\002\000\006\013\064\031" +
    "\063\001\002\000\004\176\060\001\002\000\004\176\055" +
    "\001\002\000\004\176\054\001\002\000\006\013\uffc0\031" +
    "\uffc0\001\002\000\010\013\uffc3\021\056\031\uffc3\001\002" +
    "\000\004\174\057\001\002\000\006\013\uffbf\031\uffbf\001" +
    "\002\000\010\013\uffc2\021\061\031\uffc2\001\002\000\004" +
    "\143\062\001\002\000\006\013\uffbe\031\uffbe\001\002\000" +
    "\022\010\016\013\uffc4\017\014\022\031\023\042\024\035" +
    "\031\uffc4\171\025\001\002\000\004\026\066\001\002\000" +
    "\044\002\uffd2\010\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2" +
    "\022\uffd2\023\uffd2\024\uffd2\025\uffd2\027\uffd2\032\uffd2\056" +
    "\uffd2\067\uffd2\101\uffd2\171\uffd2\176\uffd2\001\002\000\022" +
    "\010\016\017\014\022\031\023\042\024\035\027\077\171" +
    "\025\176\070\001\002\000\004\176\133\001\002\000\004" +
    "\012\124\001\002\000\022\010\uffd0\017\uffd0\022\uffd0\023" +
    "\uffd0\024\uffd0\027\uffd0\171\uffd0\176\uffd0\001\002\000\022" +
    "\010\016\017\014\022\031\023\042\024\035\027\122\171" +
    "\025\176\070\001\002\000\004\176\114\001\002\000\022" +
    "\010\uffcd\017\uffcd\022\uffcd\023\uffcd\024\uffcd\027\uffcd\171" +
    "\uffcd\176\uffcd\001\002\000\022\010\016\017\014\022\031" +
    "\023\042\024\035\027\111\171\025\176\070\001\002\000" +
    "\004\176\102\001\002\000\044\002\uffcb\010\uffcb\014\uffcb" +
    "\015\uffcb\016\uffcb\017\uffcb\022\uffcb\023\uffcb\024\uffcb\025" +
    "\uffcb\027\uffcb\032\uffcb\056\uffcb\067\uffcb\101\uffcb\171\uffcb" +
    "\176\uffcb\001\002\000\004\176\101\001\002\000\004\004" +
    "\044\001\002\000\006\004\104\021\103\001\002\000\004" +
    "\174\105\001\002\000\044\002\uffb5\010\uffb5\014\uffb5\015" +
    "\uffb5\016\uffb5\017\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5" +
    "\027\uffb5\032\uffb5\056\uffb5\067\uffb5\101\uffb5\171\uffb5\176" +
    "\uffb5\001\002\000\004\004\106\001\002\000\044\002\uffb1" +
    "\010\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\022\uffb1\023" +
    "\uffb1\024\uffb1\025\uffb1\027\uffb1\032\uffb1\056\uffb1\067\uffb1" +
    "\101\uffb1\171\uffb1\176\uffb1\001\002\000\020\010\016\017" +
    "\014\022\031\023\042\024\035\027\113\171\025\001\002" +
    "\000\022\010\uffcf\017\uffcf\022\uffcf\023\uffcf\024\uffcf\027" +
    "\uffcf\171\uffcf\176\uffcf\001\002\000\044\002\uffc7\010\uffc7" +
    "\014\uffc7\015\uffc7\016\uffc7\017\uffc7\022\uffc7\023\uffc7\024" +
    "\uffc7\025\uffc7\027\uffc7\032\uffc7\056\uffc7\067\uffc7\101\uffc7" +
    "\171\uffc7\176\uffc7\001\002\000\022\010\uffcc\017\uffcc\022" +
    "\uffcc\023\uffcc\024\uffcc\027\uffcc\171\uffcc\176\uffcc\001\002" +
    "\000\044\002\uffc8\010\uffc8\014\uffc8\015\uffc8\016\uffc8\017" +
    "\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\027\uffc8\032\uffc8" +
    "\056\uffc8\067\uffc8\101\uffc8\171\uffc8\176\uffc8\001\002\000" +
    "\006\004\116\021\115\001\002\000\004\143\117\001\002" +
    "\000\044\002\uffb4\010\uffb4\014\uffb4\015\uffb4\016\uffb4\017" +
    "\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\027\uffb4\032\uffb4" +
    "\056\uffb4\067\uffb4\101\uffb4\171\uffb4\176\uffb4\001\002\000" +
    "\004\004\120\001\002\000\044\002\uffb0\010\uffb0\014\uffb0" +
    "\015\uffb0\016\uffb0\017\uffb0\022\uffb0\023\uffb0\024\uffb0\025" +
    "\uffb0\027\uffb0\032\uffb0\056\uffb0\067\uffb0\101\uffb0\171\uffb0" +
    "\176\uffb0\001\002\000\006\027\123\176\070\001\002\000" +
    "\044\002\uffca\010\uffca\014\uffca\015\uffca\016\uffca\017\uffca" +
    "\022\uffca\023\uffca\024\uffca\025\uffca\027\uffca\032\uffca\056" +
    "\uffca\067\uffca\101\uffca\171\uffca\176\uffca\001\002\000\044" +
    "\002\uffc9\010\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\022" +
    "\uffc9\023\uffc9\024\uffc9\025\uffc9\027\uffc9\032\uffc9\056\uffc9" +
    "\067\uffc9\101\uffc9\171\uffc9\176\uffc9\001\002\000\010\013" +
    "\uffd8\031\uffd8\176\126\001\002\000\006\013\130\031\127" +
    "\001\002\000\006\013\uffd7\031\uffd7\001\002\000\004\176" +
    "\132\001\002\000\004\004\131\001\002\000\022\010\uffce" +
    "\017\uffce\022\uffce\023\uffce\024\uffce\027\uffce\171\uffce\176" +
    "\uffce\001\002\000\006\013\uffd6\031\uffd6\001\002\000\006" +
    "\004\135\021\134\001\002\000\004\142\136\001\002\000" +
    "\044\002\uffb3\010\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3" +
    "\022\uffb3\023\uffb3\024\uffb3\025\uffb3\027\uffb3\032\uffb3\056" +
    "\uffb3\067\uffb3\101\uffb3\171\uffb3\176\uffb3\001\002\000\004" +
    "\004\137\001\002\000\044\002\uffaf\010\uffaf\014\uffaf\015" +
    "\uffaf\016\uffaf\017\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf" +
    "\027\uffaf\032\uffaf\056\uffaf\067\uffaf\101\uffaf\171\uffaf\176" +
    "\uffaf\001\002\000\006\013\uffc5\031\uffc5\001\002\000\010" +
    "\013\uffc1\021\142\031\uffc1\001\002\000\004\142\143\001" +
    "\002\000\006\013\uffbd\031\uffbd\001\002\000\010\004\135" +
    "\012\145\021\134\001\002\000\022\010\016\013\uffc4\017" +
    "\014\022\031\023\042\024\035\031\uffc4\171\025\001\002" +
    "\000\006\013\147\031\063\001\002\000\004\026\066\001" +
    "\002\000\044\002\uffd4\010\uffd4\014\uffd4\015\uffd4\016\uffd4" +
    "\017\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\027\uffd4\032" +
    "\uffd4\056\uffd4\067\uffd4\101\uffd4\171\uffd4\176\uffd4\001\002" +
    "\000\004\012\152\001\002\000\022\010\016\013\uffc4\017" +
    "\014\022\031\023\042\024\035\031\uffc4\171\025\001\002" +
    "\000\006\013\154\031\063\001\002\000\004\026\066\001" +
    "\002\000\044\002\uffd1\010\uffd1\014\uffd1\015\uffd1\016\uffd1" +
    "\017\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\027\uffd1\032" +
    "\uffd1\056\uffd1\067\uffd1\101\uffd1\171\uffd1\176\uffd1\001\002" +
    "\000\010\004\104\012\157\021\103\001\002\000\022\010" +
    "\016\013\uffc4\017\014\022\031\023\042\024\035\031\uffc4" +
    "\171\025\001\002\000\006\013\161\031\063\001\002\000" +
    "\004\026\066\001\002\000\044\002\uffd5\010\uffd5\014\uffd5" +
    "\015\uffd5\016\uffd5\017\uffd5\022\uffd5\023\uffd5\024\uffd5\025" +
    "\uffd5\027\uffd5\032\uffd5\056\uffd5\067\uffd5\101\uffd5\171\uffd5" +
    "\176\uffd5\001\002\000\042\002\uffff\010\uffff\014\uffff\015" +
    "\uffff\016\uffff\017\uffff\022\uffff\023\uffff\024\uffff\025\uffff" +
    "\032\uffff\056\uffff\067\uffff\101\uffff\171\uffff\176\uffff\001" +
    "\002\000\004\002\000\001\002\000\004\176\uffe1\001\002" +
    "\000\024\010\016\014\005\017\014\022\031\023\042\024" +
    "\035\067\012\101\041\171\025\001\002\000\044\002\uffee" +
    "\010\uffee\014\uffee\015\uffee\016\uffee\017\uffee\022\uffee\023" +
    "\uffee\024\uffee\025\uffee\027\uffee\032\uffee\056\uffee\067\uffee" +
    "\101\uffee\171\uffee\176\uffee\001\002\000\044\002\ufffb\010" +
    "\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb\022\ufffb\023\ufffb" +
    "\024\ufffb\025\ufffb\027\ufffb\032\ufffb\056\ufffb\067\ufffb\101" +
    "\ufffb\171\ufffb\176\ufffb\001\002\000\044\002\uffed\010\uffed" +
    "\014\uffed\015\uffed\016\uffed\017\uffed\022\uffed\023\uffed\024" +
    "\uffed\025\uffed\027\uffed\032\uffed\056\uffed\067\uffed\101\uffed" +
    "\171\uffed\176\uffed\001\002\000\044\002\uffef\010\uffef\014" +
    "\uffef\015\uffef\016\uffef\017\uffef\022\uffef\023\uffef\024\uffef" +
    "\025\uffef\027\uffef\032\uffef\056\uffef\067\uffef\101\uffef\171" +
    "\uffef\176\uffef\001\002\000\044\002\uffe6\010\016\014\005" +
    "\015\uffe6\016\uffe6\017\014\022\031\023\042\024\035\025" +
    "\uffe6\027\uffe6\032\uffe6\056\uffe6\067\012\101\041\171\025" +
    "\176\uffe6\001\002\000\044\002\ufffa\010\ufffa\014\ufffa\015" +
    "\ufffa\016\ufffa\017\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa" +
    "\027\ufffa\032\ufffa\056\ufffa\067\ufffa\101\ufffa\171\ufffa\176" +
    "\ufffa\001\002\000\004\026\176\001\002\000\042\010\016" +
    "\014\005\015\021\016\017\017\014\022\031\023\042\024" +
    "\035\025\030\027\201\032\020\056\032\067\012\101\041" +
    "\171\025\176\010\001\002\000\042\010\ufff3\014\ufff3\015" +
    "\ufff3\016\ufff3\017\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3" +
    "\027\ufff3\032\ufff3\056\ufff3\067\ufff3\101\ufff3\171\ufff3\176" +
    "\ufff3\001\002\000\042\010\ufffe\014\ufffe\015\ufffe\016\ufffe" +
    "\017\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\027\ufffe\032" +
    "\ufffe\056\ufffe\067\ufffe\101\ufffe\171\ufffe\176\ufffe\001\002" +
    "\000\044\002\uffd9\010\uffd9\014\uffd9\015\uffd9\016\uffd9\017" +
    "\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\027\uffd9\032\uffd9" +
    "\056\uffd9\067\uffd9\101\uffd9\171\uffd9\176\uffd9\001\002\000" +
    "\042\010\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\022\ufff4" +
    "\023\ufff4\024\ufff4\025\ufff4\027\ufff4\032\ufff4\056\ufff4\067" +
    "\ufff4\101\ufff4\171\ufff4\176\ufff4\001\002\000\042\010\016" +
    "\014\005\015\021\016\017\017\014\022\031\023\042\024" +
    "\035\025\030\027\ufff9\032\020\056\032\067\012\101\041" +
    "\171\025\176\010\001\002\000\042\010\ufff5\014\ufff5\015" +
    "\ufff5\016\ufff5\017\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5" +
    "\027\ufff5\032\ufff5\056\ufff5\067\ufff5\101\ufff5\171\ufff5\176" +
    "\ufff5\001\002\000\042\010\016\014\005\015\ufff7\016\ufff7" +
    "\017\014\022\031\023\042\024\035\025\ufff7\027\ufff7\032" +
    "\ufff7\056\ufff7\067\012\101\041\171\025\176\ufff7\001\002" +
    "\000\042\010\016\014\005\015\021\016\017\017\014\022" +
    "\031\023\042\024\035\025\030\027\207\032\020\056\032" +
    "\067\012\101\041\171\025\176\010\001\002\000\044\002" +
    "\uffda\010\uffda\014\uffda\015\uffda\016\uffda\017\uffda\022\uffda" +
    "\023\uffda\024\uffda\025\uffda\027\uffda\032\uffda\056\uffda\067" +
    "\uffda\101\uffda\171\uffda\176\uffda\001\002\000\042\010\016" +
    "\014\005\015\021\016\017\017\014\022\031\023\042\024" +
    "\035\025\030\027\ufff8\032\020\056\032\067\012\101\041" +
    "\171\025\176\010\001\002\000\042\010\016\014\005\015" +
    "\ufff6\016\ufff6\017\014\022\031\023\042\024\035\025\ufff6" +
    "\027\ufff6\032\ufff6\056\ufff6\067\012\101\041\171\025\176" +
    "\ufff6\001\002\000\042\010\ufffd\014\ufffd\015\ufffd\016\ufffd" +
    "\017\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd\027\ufffd\032" +
    "\ufffd\056\ufffd\067\ufffd\101\ufffd\171\ufffd\176\ufffd\001\002" +
    "\000\042\010\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\022" +
    "\ufffc\023\ufffc\024\ufffc\025\ufffc\027\ufffc\032\ufffc\056\ufffc" +
    "\067\ufffc\101\ufffc\171\ufffc\176\ufffc\001\002\000\010\004" +
    "\216\012\217\021\215\001\002\000\004\060\223\001\002" +
    "\000\044\002\uffeb\010\uffeb\014\uffeb\015\uffeb\016\uffeb\017" +
    "\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\027\uffeb\032\uffeb" +
    "\056\uffeb\067\uffeb\101\uffeb\171\uffeb\176\uffeb\001\002\000" +
    "\010\013\uffd8\031\uffd8\176\126\001\002\000\006\013\221" +
    "\031\127\001\002\000\004\004\222\001\002\000\044\002" +
    "\uffe9\010\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\022\uffe9" +
    "\023\uffe9\024\uffe9\025\uffe9\027\uffe9\032\uffe9\056\uffe9\067" +
    "\uffe9\101\uffe9\171\uffe9\176\uffe9\001\002\000\004\176\224" +
    "\001\002\000\006\004\225\012\226\001\002\000\044\002" +
    "\uffec\010\uffec\014\uffec\015\uffec\016\uffec\017\uffec\022\uffec" +
    "\023\uffec\024\uffec\025\uffec\027\uffec\032\uffec\056\uffec\067" +
    "\uffec\101\uffec\171\uffec\176\uffec\001\002\000\010\013\uffd8" +
    "\031\uffd8\176\126\001\002\000\006\013\230\031\127\001" +
    "\002\000\004\004\231\001\002\000\044\002\uffea\010\uffea" +
    "\014\uffea\015\uffea\016\uffea\017\uffea\022\uffea\023\uffea\024" +
    "\uffea\025\uffea\027\uffea\032\uffea\056\uffea\067\uffea\101\uffea" +
    "\171\uffea\176\uffea\001\002\000\006\026\234\113\233\001" +
    "\002\000\006\056\242\176\241\001\002\000\040\010\016" +
    "\014\005\015\021\016\017\017\014\022\031\023\042\024" +
    "\035\025\030\032\020\056\032\067\012\101\041\171\025" +
    "\176\010\001\002\000\042\010\016\014\005\015\021\016" +
    "\017\017\014\022\031\023\042\024\035\025\030\027\236" +
    "\032\020\056\032\067\012\101\041\171\025\176\010\001" +
    "\002\000\044\002\uffdf\010\uffdf\014\uffdf\015\uffdf\016\uffdf" +
    "\017\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\027\uffdf\032" +
    "\uffdf\056\uffdf\067\uffdf\101\uffdf\171\uffdf\176\uffdf\001\002" +
    "\000\006\026\245\113\244\001\002\000\006\026\uffde\113" +
    "\uffde\001\002\000\006\026\uffdc\113\uffdc\001\002\000\004" +
    "\176\243\001\002\000\006\026\uffdb\113\uffdb\001\002\000" +
    "\006\056\242\176\241\001\002\000\040\010\016\014\005" +
    "\015\021\016\017\017\014\022\031\023\042\024\035\025" +
    "\030\032\020\056\032\067\012\101\041\171\025\176\010" +
    "\001\002\000\042\010\016\014\005\015\021\016\017\017" +
    "\014\022\031\023\042\024\035\025\030\027\247\032\020" +
    "\056\032\067\012\101\041\171\025\176\010\001\002\000" +
    "\044\002\uffe0\010\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0" +
    "\022\uffe0\023\uffe0\024\uffe0\025\uffe0\027\uffe0\032\uffe0\056" +
    "\uffe0\067\uffe0\101\uffe0\171\uffe0\176\uffe0\001\002\000\006" +
    "\026\uffdd\113\uffdd\001\002\000\010\004\116\012\252\021" +
    "\115\001\002\000\022\010\016\013\uffc4\017\014\022\031" +
    "\023\042\024\035\031\uffc4\171\025\001\002\000\006\013" +
    "\254\031\063\001\002\000\004\026\066\001\002\000\044" +
    "\002\uffd3\010\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\022" +
    "\uffd3\023\uffd3\024\uffd3\025\uffd3\027\uffd3\032\uffd3\056\uffd3" +
    "\067\uffd3\101\uffd3\171\uffd3\176\uffd3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\042\002\010\004\032\006\023\007\003\010" +
    "\033\014\036\015\037\020\022\023\026\024\021\034\035" +
    "\035\006\037\012\042\005\045\014\047\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\002\162\006\023\007\003\010\033\014\036\015" +
    "\037\020\022\023\026\024\021\034\035\035\006\037\012" +
    "\042\005\045\014\047\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\007\050\010\051\014\045" +
    "\015\052\017\047\025\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\007\050\010" +
    "\051\014\045\015\052\025\137\001\001\000\004\026\064" +
    "\001\001\000\002\001\001\000\022\006\073\007\072\010" +
    "\075\014\066\015\077\027\071\030\070\031\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\006\111\007\072\010\075\014\066\015\077\030\070" +
    "\031\120\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\006\073\007\072\010\075\014\066\015\077\027\106" +
    "\030\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\006\111\007\072\010\075\014\066\015\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\052\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\007\050\010\051\014\045" +
    "\015\052\017\145\025\046\001\001\000\002\001\001\000" +
    "\004\026\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\007\050\010\051\014\045\015\052\017\152\025" +
    "\046\001\001\000\002\001\001\000\004\026\154\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\007\050\010" +
    "\051\014\045\015\052\017\157\025\046\001\001\000\002" +
    "\001\001\000\004\026\161\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\167\006\171\007\003\010\033\014\036\015\037\024" +
    "\170\034\035\035\166\037\012\041\172\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\003\173\006\171\007\003\010\033\014\036" +
    "\015\037\024\170\034\035\035\166\037\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\002\177\003\167" +
    "\006\203\007\003\010\033\014\036\015\037\020\022\023" +
    "\026\024\201\034\035\035\176\037\012\040\202\041\204" +
    "\042\005\045\014\047\025\051\205\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\002\211\006\023\007\003\010\033\014\036\015" +
    "\037\020\022\023\026\024\021\034\035\035\006\037\012" +
    "\042\005\045\014\047\212\001\001\000\002\001\001\000" +
    "\026\003\173\006\171\007\003\010\033\014\036\015\037" +
    "\024\170\034\035\035\166\037\012\001\001\000\046\002" +
    "\177\003\167\006\203\007\003\010\033\014\036\015\037" +
    "\020\022\023\026\024\201\034\035\035\176\037\012\040" +
    "\207\041\210\042\005\045\014\047\025\001\001\000\002" +
    "\001\001\000\040\002\211\006\023\007\003\010\033\014" +
    "\036\015\037\020\022\023\026\024\021\034\035\035\006" +
    "\037\012\042\005\045\014\047\212\001\001\000\026\003" +
    "\173\006\171\007\003\010\033\014\036\015\037\024\170" +
    "\034\035\035\166\037\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\052\217\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\052\226\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\021\236\043\237\001\001\000\042\002" +
    "\177\006\023\007\003\010\033\014\036\015\037\020\022" +
    "\023\026\024\021\034\035\035\006\037\012\040\234\042" +
    "\005\045\014\047\025\001\001\000\040\002\211\006\023" +
    "\007\003\010\033\014\036\015\037\020\022\023\026\024" +
    "\021\034\035\035\006\037\012\042\005\045\014\047\212" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\247\001\001\000\042\002\177\006\023\007" +
    "\003\010\033\014\036\015\037\020\022\023\026\024\021" +
    "\034\035\035\006\037\012\040\245\042\005\045\014\047" +
    "\025\001\001\000\040\002\211\006\023\007\003\010\033" +
    "\014\036\015\037\020\022\023\026\024\021\034\035\035" +
    "\006\037\012\042\005\045\014\047\212\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\007" +
    "\050\010\051\014\045\015\052\017\252\025\046\001\001" +
    "\000\002\001\001\000\004\026\254\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
//@@CUPDBG1

  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
//@@CUPDBG2
 return lexer.next_token(); 
    }

//@@CUPDBG0

   
 	protected Lexer lexer;
  	protected MultiTree syntaxTree = new MultiTree(); 
	
 	 public MultiTree getSyntaxTree()
  	{
		return syntaxTree;
  	}
  	protected MultiTreeNode createDeclarationNode(MultiTreeNode declaration) { throw new UnsupportedOperationException();}
 	protected MultiTreeNode createFunctionDeclarationNode(MultiTreeNode typeSpecifier, String identifierName, MultiTreeNode paramsList, MultiTreeNode compoundStatement) { throw new UnsupportedOperationException(); }
	protected MultiTreeNode createObjDeclarationNode(MultiTreeNode typeSpecifier, String identifierName, MultiTreeNode compoundStatement) { throw new UnsupportedOperationException(); }
  	protected MultiTreeNode createNamespaceDeclarationNode(MultiTreeNode typeSpecifier, String identifierList, MultiTreeNode scopeList, MultiTreeNode compoundStatement) { throw new UnsupportedOperationException(); }
	protected MultiTreeNode createInstanceDeclarationNode(String typeSpecifier, String identifierName, String paramsList, String value) { throw new UnsupportedOperationException(); }
	protected MultiTreeNode createAccessSpecifiersDeclarationNode(MultiTreeNode typeSpecifier, MultiTreeNode compoundStatement) { throw new UnsupportedOperationException(); }
	protected MultiTreeNode createTypeSpecifier(String typeName){ throw new UnsupportedOperationException();  } 
	protected MultiTreeNode createListNode(String listName, MultiTreeNode firstChild){throw new UnsupportedOperationException();  }
	protected MultiTreeNode createListNode(String listName, String firstChild){throw new UnsupportedOperationException();  }
	protected MultiTreeNode createVarDeclaration(MultiTreeNode typeSpecifier, String identifierName, Integer value ){throw new UnsupportedOperationException();  }
	protected MultiTreeNode createVarDeclaration(MultiTreeNode typeSpecifier, String identifierName, char value ){throw new UnsupportedOperationException();  }
	protected MultiTreeNode createVarDeclaration(MultiTreeNode typeSpecifier, String identifierName, String value ){throw new UnsupportedOperationException();  }
	protected MultiTreeNode createCompoundStatement(MultiTreeNode declarations, MultiTreeNode instructions){throw new UnsupportedOperationException();  }
	protected MultiTreeNode createIfStatement(String IDENT, MultiTreeNode ifInstructions, MultiTreeNode elseInstructions){throw new UnsupportedOperationException();  }
	protected MultiTreeNode createCallFunction(String IDENT, String parameters){throw new UnsupportedOperationException();  }
	protected MultiTreeNode createValueLiteral(String typeName) {throw new UnsupportedOperationException();  }
  	protected MultiTreeNode createValueLiteral(Integer typeName) {throw new UnsupportedOperationException();  }
  	protected MultiTreeNode createValueLiteral(double typeName) {throw new UnsupportedOperationException();  }
  	protected MultiTreeNode createValueLiteral(float typeName) {throw new UnsupportedOperationException();  }
  	protected MultiTreeNode createValueLiteral(char typeName) {throw new UnsupportedOperationException();  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // expr_list ::= expr 
            {
              MultiTreeNode RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode d = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG3
 RESULT = syntaxTree.create("ProgramUnit", d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= expr_list EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode start_val = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr_list ::= expr_list expr 
            {
              MultiTreeNode RESULT =null;
		Location puxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location puxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode pu = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode d = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG4
 RESULT = pu; syntaxTree.addChildNode(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // list_expr ::= expr 
            {
              MultiTreeNode RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode d = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG5
 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_expr",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // list_expr ::= list_expr expr 
            {
              MultiTreeNode RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode l = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode d = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG6
 RESULT = l; RESULT.addChild(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_expr",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // list_expr ::= list_expr access_declarations 
            {
              MultiTreeNode RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode l = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location addefxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location addefxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode addef = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG7
 RESULT = l; RESULT.addChild(addef); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_expr",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // list_access ::= access_expr 
            {
              MultiTreeNode RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode d = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG8
 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_access",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // list_access ::= list_access access_expr 
            {
              MultiTreeNode RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode l = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode d = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG9
 RESULT = l; RESULT.addChild(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_access",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // list ::= list_expr 
            {
              MultiTreeNode RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode l = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG10
RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // list ::= list list_expr 
            {
              MultiTreeNode RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode l = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location lexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode le = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG11
 RESULT = l; RESULT.addChild(le); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // list ::= list_access 
            {
              MultiTreeNode RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode l = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG12
 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // list ::= list list_access 
            {
              MultiTreeNode RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode l = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location lexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode le = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG13
 RESULT = l; RESULT.addChild(le); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= types 
            {
              MultiTreeNode RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode type = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG14
 RESULT = createDeclarationNode(type); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= function_declaration 
            {
              MultiTreeNode RESULT =null;
		Location fdefxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fdefxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode fdef = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG15
 RESULT = createDeclarationNode(fdef); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= object_declaration 
            {
              MultiTreeNode RESULT =null;
		Location cdefxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cdefxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode cdef = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG16
 RESULT = createDeclarationNode(cdef); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= namespaces 
            {
              MultiTreeNode RESULT =null;
		Location ndefxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ndefxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode ndef = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG17
 RESULT = createDeclarationNode(ndef); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= instances 
            {
              MultiTreeNode RESULT =null;
		Location idefxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idefxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode idef = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG18
 RESULT = createDeclarationNode(idef); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= access_declarations 
            {
              MultiTreeNode RESULT =null;
		Location addefxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location addefxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode addef = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG19
 RESULT = createDeclarationNode(addef); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // access_expr ::= types 
            {
              MultiTreeNode RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode type = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG20
 RESULT = createDeclarationNode(type); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("access_expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // access_expr ::= object_declaration 
            {
              MultiTreeNode RESULT =null;
		Location cdefxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cdefxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode cdef = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG21
 RESULT = createDeclarationNode(cdef); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("access_expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // access_expr ::= function_declaration 
            {
              MultiTreeNode RESULT =null;
		Location fdefxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fdefxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode fdef = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG22
 RESULT = createDeclarationNode(fdef); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("access_expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instances ::= IDENT IDENT EQUAL NEW IDENT SEMI 
            {
              MultiTreeNode RESULT =null;
		Location id1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location id1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location id2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location id2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location id3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location id3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String id3 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG23
 RESULT = createInstanceDeclarationNode(id1, id2, id3, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instances",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instances ::= IDENT IDENT SEMI 
            {
              MultiTreeNode RESULT =null;
		Location id1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location id1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location id2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location id2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG24
 RESULT = createInstanceDeclarationNode(id1, id2, null, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instances",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instances ::= IDENT IDENT EQUAL NEW IDENT LPAREN identifier_list RPAREN SEMI 
            {
              MultiTreeNode RESULT =null;
		Location id1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).xleft;
		Location id1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).xright;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		Location id2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xleft;
		Location id2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xright;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		Location id3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location id3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String id3 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String il = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG25
 RESULT = createInstanceDeclarationNode(id1, id2, id3, il); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instances",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instances ::= IDENT IDENT LPAREN identifier_list RPAREN SEMI 
            {
              MultiTreeNode RESULT =null;
		Location id1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location id1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location id2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location id2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String il = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG26
 RESULT = createInstanceDeclarationNode(id1, id2, null, il); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instances",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // specifiers ::= CLASS 
            {
              MultiTreeNode RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object ts = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG27
 RESULT = createTypeSpecifier("CLASS"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("specifiers",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // specifiers ::= STRUCT 
            {
              MultiTreeNode RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object ts = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG28
 RESULT = createTypeSpecifier("STRUCT"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("specifiers",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // access_declarations ::= access_specifiers COLON list_access 
            {
              MultiTreeNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		MultiTreeNode id = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location csxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location csxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode cs = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG29
 RESULT = createAccessSpecifiersDeclarationNode(id, cs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("access_declarations",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // access_specifiers ::= PUBLIC 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG30
 RESULT = createTypeSpecifier("PUBLIC"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("access_specifiers",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // access_specifiers ::= PRIVATE 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG31
 RESULT = createTypeSpecifier("PRIVATE"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("access_specifiers",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // access_specifiers ::= PROTECTED 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG32
 RESULT = createTypeSpecifier("PROTECTED"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("access_specifiers",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // namespace_declarations ::= NAMESPACE 
            {
              MultiTreeNode RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object ts = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG33
 RESULT = createTypeSpecifier("NAMESPACE"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("namespace_declarations",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // namespace_declarations ::= INLINE NAMESPACE 
            {
              MultiTreeNode RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object ts = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG34
 RESULT = createTypeSpecifier("INLINE NAMESPACE"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("namespace_declarations",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // namespaces ::= namespace_declarations IDENT SCOPE inline_namespaces CLPAREN list_expr CRPAREN 
            {
              MultiTreeNode RESULT =null;
		Location ndxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location ndxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		MultiTreeNode nd = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location inxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location inxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		MultiTreeNode in = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location csxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location csxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode cs = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG35
 RESULT = createNamespaceDeclarationNode(nd, id, in, cs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("namespaces",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // namespaces ::= namespace_declarations IDENT CLPAREN list_expr CRPAREN 
            {
              MultiTreeNode RESULT =null;
		Location ndxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location ndxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode nd = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location csxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location csxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode cs = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG36
 RESULT = createNamespaceDeclarationNode(nd, id, null, cs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("namespaces",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // inline_namespaces ::= inline_types 
            {
              MultiTreeNode RESULT =null;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode il = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG37
 RESULT = createListNode("ScopeDeclaration", il); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inline_namespaces",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // inline_namespaces ::= inline_namespaces SCOPE inline_types 
            {
              MultiTreeNode RESULT =null;
		Location inxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location inxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		MultiTreeNode in = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode il = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG38
 RESULT = in; RESULT.addChild(il); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inline_namespaces",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // inline_types ::= IDENT 
            {
              MultiTreeNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG39
 RESULT = createTypeSpecifier("" + id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inline_types",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // inline_types ::= INLINE IDENT 
            {
              MultiTreeNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG40
 RESULT = createTypeSpecifier("inline " + id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inline_types",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // object_declaration ::= specifiers IDENT CLPAREN list CRPAREN 
            {
              MultiTreeNode RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode ts = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location csxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location csxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode cs = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG41
 RESULT = createObjDeclarationNode(ts, id, cs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("object_declaration",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // object_declaration ::= specifiers IDENT CLPAREN CRPAREN 
            {
              MultiTreeNode RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		MultiTreeNode ts = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG42
 RESULT = createObjDeclarationNode(ts, id, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("object_declaration",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // identifier_list ::= 
            {
              String RESULT =null;
		//@@CUPDBG43

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // identifier_list ::= IDENT 
            {
              String RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG44
 RESULT = "" + id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // identifier_list ::= identifier_list COMMA IDENT 
            {
              String RESULT =null;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String il = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG45
 RESULT = il + ", " + id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // function_declaration ::= literal IDENT LPAREN params RPAREN compound_statement 
            {
              MultiTreeNode RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		MultiTreeNode ts = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		MultiTreeNode pl = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location csxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location csxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode cs = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG46
 RESULT = createFunctionDeclarationNode(ts, id, pl, cs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // function_declaration ::= char IDENT LPAREN params RPAREN compound_statement 
            {
              MultiTreeNode RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		MultiTreeNode ts = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		MultiTreeNode pl = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location csxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location csxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode cs = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG47
 RESULT = createFunctionDeclarationNode(ts, id, pl, cs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // function_declaration ::= string IDENT LPAREN params RPAREN compound_statement 
            {
              MultiTreeNode RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		MultiTreeNode ts = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		MultiTreeNode pl = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location csxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location csxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode cs = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG48
 RESULT = createFunctionDeclarationNode(ts, id, pl, cs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // function_declaration ::= boolean IDENT LPAREN params RPAREN compound_statement 
            {
              MultiTreeNode RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		MultiTreeNode ts = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		MultiTreeNode pl = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location csxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location csxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode cs = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG49
 RESULT = createFunctionDeclarationNode(ts, id, pl, cs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // function_declaration ::= void_literal IDENT LPAREN params RPAREN compound_statement 
            {
              MultiTreeNode RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		MultiTreeNode ts = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		MultiTreeNode pl = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location csxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location csxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode cs = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG50
 RESULT = createFunctionDeclarationNode(ts, id, pl, cs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // instructions_list ::= call_function 
            {
              MultiTreeNode RESULT =null;
		Location cfxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cfxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode cf = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG51
 RESULT = createListNode("InstructionsList", cf); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions_list",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // instructions_list ::= instructions_list call_function 
            {
              MultiTreeNode RESULT =null;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode il = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location cfxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cfxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode cf = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG52
 RESULT = il;	RESULT.addChild(cf); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions_list",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // call_function ::= IDENT LPAREN identifier_list RPAREN SEMI 
            {
              MultiTreeNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String il = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG53
 RESULT = createCallFunction(id, il); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // local_declaration_list ::= types 
            {
              MultiTreeNode RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG54
 RESULT = createListNode("LocalDeclarations", t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("local_declaration_list",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // local_declaration_list ::= local_declaration_list types 
            {
              MultiTreeNode RESULT =null;
		Location ldlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ldlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode ldl = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG55
 RESULT = ldl; RESULT.addChild(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("local_declaration_list",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // compound_statement ::= CLPAREN CRPAREN 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG56
 RESULT = createCompoundStatement(null, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // compound_statement ::= CLPAREN local_declaration_list CRPAREN 
            {
              MultiTreeNode RESULT =null;
		Location ldlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ldlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode ldl = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG57
 RESULT = createCompoundStatement(ldl, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // compound_statement ::= CLPAREN local_declaration_list instructions_list CRPAREN 
            {
              MultiTreeNode RESULT =null;
		Location ldlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ldlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		MultiTreeNode ldl = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode il = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG58
 RESULT = createCompoundStatement(ldl, il); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // compound_statement ::= CLPAREN instructions_list local_declaration_list CRPAREN 
            {
              MultiTreeNode RESULT =null;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		MultiTreeNode il = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location ldlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ldlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode ldl = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG59
 RESULT = createCompoundStatement(il, ldl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // compound_statement ::= CLPAREN instructions_list CRPAREN 
            {
              MultiTreeNode RESULT =null;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode il = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG60
 RESULT = createCompoundStatement(null, il); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // params ::= params_list 
            {
              MultiTreeNode RESULT =null;
		Location fpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode fp = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG61
 RESULT = createListNode("ParametersList", fp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // params ::= params COMMA params_list 
            {
              MultiTreeNode RESULT =null;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		MultiTreeNode pl = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location fpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode fp = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG62
 RESULT = pl; RESULT.addChild(fp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // params_list ::= 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG63
 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // params_list ::= literal IDENT 
            {
              MultiTreeNode RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode ts = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG64
 RESULT = createVarDeclaration(ts, id, 0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // params_list ::= string IDENT 
            {
              MultiTreeNode RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode ts = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG65
 RESULT = createVarDeclaration(ts, id, 0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // params_list ::= char IDENT 
            {
              MultiTreeNode RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode ts = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG66
 RESULT = createVarDeclaration(ts, id, 0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // params_list ::= boolean IDENT 
            {
              MultiTreeNode RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode ts = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG67
 RESULT = createVarDeclaration(ts, id, 0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // params_list ::= literal IDENT EQUAL NUMBER 
            {
              MultiTreeNode RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		MultiTreeNode ts = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location cvalxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cvalxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer cval = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG68
 RESULT = createVarDeclaration(ts, id, cval); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // params_list ::= string IDENT EQUAL STRNG 
            {
              MultiTreeNode RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		MultiTreeNode ts = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location cvalxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cvalxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object cval = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG69
 RESULT = createVarDeclaration(ts, id, "" + cval); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // params_list ::= char IDENT EQUAL CHARACTER 
            {
              MultiTreeNode RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		MultiTreeNode ts = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location cvalxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cvalxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object cval = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG70
 RESULT = createVarDeclaration(ts, id, "" + cval); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // literal ::= INT 
            {
              MultiTreeNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG71
 RESULT = createTypeSpecifier("INT"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // literal ::= FLOAT 
            {
              MultiTreeNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG72
 RESULT = createTypeSpecifier("FLOAT"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // literal ::= DOUBLE 
            {
              MultiTreeNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG73
 RESULT = createTypeSpecifier("DOUBLE");; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // void_literal ::= VOID 
            {
              MultiTreeNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG74
 RESULT = createTypeSpecifier("VOID"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("void_literal",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // string ::= STR 
            {
              MultiTreeNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG75
 RESULT = createTypeSpecifier("STRING"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // char ::= CHAR 
            {
              MultiTreeNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG76
 RESULT = createTypeSpecifier("CHAR"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("char",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // boolean ::= BOOLEAN 
            {
              MultiTreeNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG77
 RESULT = createTypeSpecifier("BOOLEAN"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // types ::= literal IDENT SEMI 
            {
              MultiTreeNode RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		MultiTreeNode ts = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG78
 RESULT = createVarDeclaration(ts, id, 0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("types",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // types ::= string IDENT SEMI 
            {
              MultiTreeNode RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		MultiTreeNode ts = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG79
 RESULT = createVarDeclaration(ts, id, 0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("types",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // types ::= char IDENT SEMI 
            {
              MultiTreeNode RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		MultiTreeNode ts = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG80
 RESULT = createVarDeclaration(ts, id, 0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("types",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // types ::= boolean IDENT SEMI 
            {
              MultiTreeNode RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		MultiTreeNode ts = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG81
 RESULT = createVarDeclaration(ts, id, 0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("types",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // types ::= literal IDENT EQUAL NUMBER SEMI 
            {
              MultiTreeNode RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode ts = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location cvalxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cvalxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Integer cval = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG82
 RESULT = createVarDeclaration(ts, id, cval); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("types",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // types ::= string IDENT EQUAL STRNG SEMI 
            {
              MultiTreeNode RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode ts = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location cvalxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cvalxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object cval = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG83
 RESULT = createVarDeclaration(ts, id, "" + cval); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("types",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // types ::= char IDENT EQUAL CHARACTER SEMI 
            {
              MultiTreeNode RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode ts = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location cvalxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cvalxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object cval = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG84
 RESULT = createVarDeclaration(ts, id, "" + cval); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("types",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
