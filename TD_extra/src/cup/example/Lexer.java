/* The following code was generated by JFlex 1.3.5 on 11/1/22, 9:56 PM */

package cup.example;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java.lang.*;
import java.io.InputStreamReader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 11/1/22, 9:56 PM from the specification file
 * <tt>file:/C:/Users/alini/eclipse-workspace/TranslatorDesign/TD_extra/lexer.jflex</tt>
 */
public class Lexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int CODESEG = 1;
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\10\1\3\1\2\1\0\1\3\1\1\16\10\4\0\1\3\1\0"+
    "\1\5\1\0\1\6\1\0\1\55\1\0\1\45\1\46\1\7\1\43"+
    "\1\51\1\44\1\0\1\0\1\4\7\4\2\4\1\42\1\41\1\52"+
    "\1\57\1\53\2\0\6\6\21\6\1\6\2\6\3\0\1\54\1\6"+
    "\1\0\1\13\1\17\1\11\1\25\1\26\1\23\1\30\1\31\1\20"+
    "\1\6\1\34\1\12\1\33\1\21\1\24\1\15\1\6\1\27\1\14"+
    "\1\22\1\16\1\32\1\36\1\35\1\40\1\37\1\47\1\56\1\50"+
    "\1\0\41\10\2\0\4\6\4\0\1\6\2\0\1\10\7\0\1\6"+
    "\4\0\1\6\5\0\27\6\1\0\37\6\1\0\u01ca\6\4\0\14\6"+
    "\16\0\5\6\7\0\1\6\1\0\1\6\21\0\160\10\5\6\1\0"+
    "\2\6\2\0\4\6\1\0\1\6\6\0\1\6\1\0\3\6\1\0"+
    "\1\6\1\0\24\6\1\0\123\6\1\0\213\6\1\0\5\10\2\0"+
    "\246\6\1\0\46\6\2\0\1\6\7\0\47\6\7\0\1\6\1\0"+
    "\55\10\1\0\1\10\1\0\2\10\1\0\2\10\1\0\1\10\10\0"+
    "\33\6\5\0\3\6\15\0\6\10\5\0\1\6\4\0\13\10\1\0"+
    "\1\10\3\0\53\6\37\10\4\0\2\6\1\10\143\6\1\0\1\6"+
    "\10\10\1\0\6\10\2\6\2\10\1\0\4\10\2\6\12\10\3\6"+
    "\2\0\1\6\17\0\1\10\1\6\1\10\36\6\33\10\2\0\131\6"+
    "\13\10\1\6\16\0\12\10\41\6\11\10\2\6\4\0\1\6\5\0"+
    "\26\6\4\10\1\6\11\10\1\6\3\10\1\6\5\10\22\0\31\6"+
    "\3\10\4\0\13\6\65\0\25\6\1\0\10\6\26\0\60\10\66\6"+
    "\3\10\1\6\22\10\1\6\7\10\12\6\2\10\2\0\12\10\1\0"+
    "\20\6\3\10\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6"+
    "\1\0\1\6\3\0\4\6\2\0\1\10\1\6\7\10\2\0\2\10"+
    "\2\0\3\10\1\6\10\0\1\10\4\0\2\6\1\0\3\6\2\10"+
    "\2\0\12\10\4\6\7\0\2\6\4\0\3\10\1\0\6\6\4\0"+
    "\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0"+
    "\2\6\2\0\1\10\1\0\5\10\4\0\2\10\2\0\3\10\3\0"+
    "\1\10\7\0\4\6\1\0\1\6\7\0\14\10\3\6\1\10\13\0"+
    "\3\10\1\0\11\6\1\0\3\6\1\0\26\6\1\0\7\6\1\0"+
    "\2\6\1\0\5\6\2\0\1\10\1\6\10\10\1\0\3\10\1\0"+
    "\3\10\2\0\1\6\17\0\2\6\2\10\2\0\12\10\1\0\1\6"+
    "\7\0\1\6\6\10\1\0\3\10\1\0\10\6\2\0\2\6\2\0"+
    "\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\10\1\6"+
    "\7\10\2\0\2\10\2\0\3\10\10\0\2\10\4\0\2\6\1\0"+
    "\3\6\2\10\2\0\12\10\1\0\1\6\20\0\1\10\1\6\1\0"+
    "\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0\1\6\1\0"+
    "\2\6\3\0\2\6\3\0\3\6\3\0\14\6\4\0\5\10\3\0"+
    "\3\10\1\0\4\10\2\0\1\6\6\0\1\10\16\0\12\10\11\0"+
    "\1\6\6\0\4\10\1\0\10\6\1\0\3\6\1\0\27\6\1\0"+
    "\20\6\3\0\1\6\7\10\1\0\3\10\1\0\4\10\7\0\2\10"+
    "\1\0\3\6\5\0\2\6\2\10\2\0\12\10\20\0\1\6\3\10"+
    "\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6"+
    "\2\0\1\10\1\6\7\10\1\0\3\10\1\0\4\10\7\0\2\10"+
    "\7\0\1\6\1\0\2\6\2\10\2\0\12\10\1\0\2\6\15\0"+
    "\4\10\1\0\10\6\1\0\3\6\1\0\51\6\2\10\1\6\7\10"+
    "\1\0\3\10\1\0\4\10\1\6\5\0\3\6\1\10\7\0\3\6"+
    "\2\10\2\0\12\10\12\0\6\6\2\0\2\10\1\0\22\6\3\0"+
    "\30\6\1\0\11\6\1\0\1\6\2\0\7\6\3\0\1\10\4\0"+
    "\6\10\1\0\1\10\1\0\10\10\6\0\12\10\2\0\2\10\15\0"+
    "\60\6\1\10\2\6\7\10\4\0\10\6\10\10\1\0\12\10\47\0"+
    "\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0"+
    "\4\6\1\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0"+
    "\2\6\1\0\4\6\1\10\2\6\6\10\1\0\2\10\1\6\2\0"+
    "\5\6\1\0\1\6\1\0\6\10\2\0\12\10\2\0\4\6\40\0"+
    "\1\6\27\0\2\10\6\0\12\10\13\0\1\10\1\0\1\10\1\0"+
    "\1\10\4\0\2\10\10\6\1\0\44\6\4\0\24\10\1\0\2\10"+
    "\5\6\13\10\1\0\44\10\11\0\1\10\71\0\53\6\24\10\1\6"+
    "\12\10\6\0\6\6\4\10\4\6\3\10\1\6\3\10\2\6\7\10"+
    "\3\6\4\10\15\6\14\10\1\6\17\10\2\0\46\6\1\0\1\6"+
    "\5\0\1\6\2\0\53\6\1\0\u014d\6\1\0\4\6\2\0\7\6"+
    "\1\0\1\6\1\0\4\6\2\0\51\6\1\0\4\6\2\0\41\6"+
    "\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\17\6"+
    "\1\0\71\6\1\0\4\6\2\0\103\6\2\0\3\10\40\0\20\6"+
    "\20\0\126\6\2\0\6\6\3\0\u026c\6\2\0\21\6\1\0\32\6"+
    "\5\0\113\6\3\0\13\6\7\0\15\6\1\0\4\6\3\10\13\0"+
    "\22\6\3\10\13\0\22\6\2\10\14\0\15\6\1\0\3\6\1\0"+
    "\2\10\14\0\64\6\40\10\3\0\1\6\3\0\2\6\1\10\2\0"+
    "\12\10\41\0\4\10\1\0\12\10\6\0\130\6\10\0\5\6\2\10"+
    "\42\6\1\10\1\6\5\0\106\6\12\0\37\6\1\0\14\10\4\0"+
    "\14\10\12\0\12\10\36\6\2\0\5\6\13\0\54\6\4\0\32\6"+
    "\6\0\12\10\46\0\27\6\5\10\4\0\65\6\12\10\1\0\35\10"+
    "\2\0\13\10\6\0\12\10\15\0\1\6\10\0\16\10\102\0\5\10"+
    "\57\6\21\10\7\6\4\0\12\10\21\0\11\10\14\0\3\10\36\6"+
    "\15\10\2\6\12\10\54\6\16\10\14\0\44\6\24\10\10\0\12\10"+
    "\3\0\3\6\12\10\44\6\2\0\11\6\107\0\3\10\1\0\25\10"+
    "\4\6\1\10\4\6\3\10\2\6\3\10\6\0\300\6\72\10\1\0"+
    "\5\10\u0116\6\2\0\6\6\2\0\46\6\2\0\6\6\2\0\10\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\37\6\2\0\65\6"+
    "\1\0\7\6\1\0\1\6\3\0\3\6\1\0\7\6\3\0\4\6"+
    "\2\0\6\6\4\0\15\6\5\0\3\6\1\0\7\6\16\0\5\10"+
    "\32\0\5\10\20\0\2\6\23\0\1\6\13\0\5\10\1\0\12\10"+
    "\1\0\1\6\15\0\1\6\20\0\15\6\3\0\40\6\20\0\15\10"+
    "\4\0\1\10\3\0\14\10\21\0\1\6\4\0\1\6\2\0\12\6"+
    "\1\0\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\13\6\2\0\4\6\5\0\5\6\4\0\1\6"+
    "\21\0\51\6\u0a77\0\57\6\1\0\57\6\1\0\205\6\6\0\4\6"+
    "\3\10\2\6\14\0\46\6\1\0\1\6\5\0\1\6\2\0\70\6"+
    "\7\0\1\6\17\0\1\10\27\6\11\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\40\10\57\0\1\6\u01d5\0\3\6\31\0\11\6\6\10"+
    "\1\0\5\6\2\0\5\6\4\0\126\6\2\0\2\10\2\0\3\6"+
    "\1\0\132\6\1\0\4\6\5\0\52\6\2\0\136\6\21\0\33\6"+
    "\65\0\20\6\u0200\0\u19b6\6\112\0\u51eb\6\25\0\u048d\6\103\0\56\6"+
    "\2\0\u010d\6\3\0\20\6\12\10\2\6\24\0\57\6\1\10\4\0"+
    "\12\10\1\0\37\6\2\10\120\6\2\10\45\0\11\6\2\0\147\6"+
    "\2\0\44\6\1\0\10\6\77\0\13\6\1\10\3\6\1\10\4\6"+
    "\1\10\27\6\5\10\20\0\1\6\7\0\64\6\14\0\2\10\62\6"+
    "\22\10\12\0\12\10\6\0\22\10\6\6\3\0\1\6\1\0\1\6"+
    "\2\0\12\10\34\6\10\10\2\0\27\6\15\10\14\0\35\6\3\0"+
    "\4\10\57\6\16\10\16\0\1\6\12\10\6\0\5\6\1\10\12\6"+
    "\12\10\5\6\1\0\51\6\16\10\11\0\3\6\1\10\10\6\2\10"+
    "\2\0\12\10\6\0\27\6\3\0\1\6\3\10\62\6\1\10\1\6"+
    "\3\10\2\6\2\10\5\6\2\10\1\6\1\10\1\6\30\0\3\6"+
    "\2\0\13\6\5\10\2\0\3\6\2\10\12\0\6\6\2\0\6\6"+
    "\2\0\6\6\11\0\7\6\1\0\7\6\1\0\53\6\1\0\12\6"+
    "\12\0\163\6\10\10\1\0\2\10\2\0\12\10\6\0\u2ba4\6\14\0"+
    "\27\6\4\0\61\6\u2104\0\u016e\6\2\0\152\6\46\0\7\6\14\0"+
    "\5\6\5\0\1\6\1\10\12\6\1\0\15\6\1\0\5\6\1\0"+
    "\1\6\1\0\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6\22\0"+
    "\100\6\2\0\66\6\50\0\15\6\3\0\20\10\20\0\20\10\3\0"+
    "\2\6\30\0\3\6\31\0\1\6\6\0\5\6\1\0\207\6\2\0"+
    "\1\10\4\0\1\6\13\0\12\10\7\0\32\6\4\0\1\6\1\0"+
    "\32\6\13\0\131\6\3\0\6\6\2\0\6\6\2\0\6\6\2\0"+
    "\3\6\3\0\2\6\3\0\2\6\22\0\3\10\4\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    48,    96,   144,    96,   192,   240,   288,    96,   336, 
      384,   432,   480,   528,   576,   624,   672,   720,   768,   816, 
      864,   912,   960,  1008,  1056,  1104,  1152,    96,    96,    96, 
       96,    96,    96,    96,    96,    96,  1200,  1248,    96,    96, 
       96,    96,   240,   240,  1296,  1344,  1392,  1440,  1488,  1536, 
     1584,  1632,  1680,  1728,  1776,  1824,  1872,  1920,  1968,  2016, 
      288,  2064,  2112,  2160,  2208,  2256,  2304,  2352,  2400,  2448, 
     2496,  2544,  2592,  2640,  2688,  2736,  2784,  2832,  2880,  2928, 
     2976,    96,    96,  3024,  3072,  3120,  3168,  3216,  3264,   288, 
     3312,  3360,  3408,  3456,  3504,  3552,  3600,  3648,  3696,  3744, 
     3792,  3840,  3888,  3936,  3984,   288,  4032,   288,  4080,   288, 
     4128,  4176,  4224,  4272,   288,  4320,  4368,  4416,  4464,  4512, 
     4560,  4608,  4656,  4704,  4752,  4800,  4848,  4896,  4944,  4992, 
     5040,   288,  5088,  5136,  5184,   288,   288,   288,  5232,  5280, 
     5328,  5376,  5424,  5472,  5520,  5568,  5616,  5664,  5712,  5760, 
     5808,  5856,  5904,  5952,  6000,   288,  6048,  6096,  6144,  6192, 
     6240,  6288,  6336,  6384,  6432,   288,   288,  6480,  6528,  6576, 
      288,  6624,  6672,   288,  6720,   288,   288,   288,  6768,  6816, 
     6864,  6912,  6960,  7008,   288,  7056,  7104,  7152,  7200,  7248, 
      288,   288,  7296,  7344,  7392,  7440,   288,  7488,   288,  7536, 
     7584,  7632,  7680,  7728,  7776,  7824,  7872,  7920,  7968,  8016, 
      288,  8064,   288,   288,   288,   288,   288,   288,   288,  8112, 
     8160,  8208,  8256,   288,  8304,  8352,  8400,   288,  8448,   288, 
      288,  8496,   288,   288,   288,  8544,  8592,  8640,  8688,   288, 
     8736,  8784,   288,  8832,  8880,   288,  8928,   288,  8976,   288, 
     9024,   288,  9072,   288,  9120,   288,   288,   288,   288,   288, 
      288
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\11\1\3"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\10\1\32\3\10\1\33\2\10\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\60\3\62\0\1\5\61\0"+
    "\1\6\53\0\2\53\1\0\2\53\1\54\52\53\4\0"+
    "\1\10\1\0\1\10\1\0\31\10\23\0\1\10\1\0"+
    "\1\10\1\0\2\10\1\55\1\56\10\10\1\57\4\10"+
    "\1\60\7\10\23\0\1\10\1\0\1\10\1\0\14\10"+
    "\1\61\14\10\23\0\1\10\1\0\1\10\1\0\4\10"+
    "\1\62\1\10\1\63\22\10\23\0\1\10\1\0\1\10"+
    "\1\0\10\10\1\64\1\10\1\65\6\10\1\66\4\10"+
    "\1\67\2\10\23\0\1\10\1\0\1\10\1\0\6\10"+
    "\1\70\10\10\1\71\11\10\23\0\1\10\1\0\1\10"+
    "\1\0\11\10\1\72\17\10\23\0\1\10\1\0\1\10"+
    "\1\0\17\10\1\73\11\10\23\0\1\10\1\0\1\10"+
    "\1\0\11\10\1\74\1\10\1\75\15\10\23\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\76\12\10\1\77\12\10"+
    "\23\0\1\10\1\0\1\10\1\0\16\10\1\100\1\101"+
    "\1\10\1\102\6\10\1\103\23\0\1\10\1\0\1\10"+
    "\1\0\2\10\1\104\11\10\1\105\2\10\1\106\11\10"+
    "\23\0\1\10\1\0\1\10\1\0\5\10\1\107\23\10"+
    "\23\0\1\10\1\0\1\10\1\0\14\10\1\110\1\10"+
    "\1\111\12\10\23\0\1\10\1\0\1\10\1\0\2\10"+
    "\1\112\6\10\1\113\13\10\1\114\3\10\23\0\1\10"+
    "\1\0\1\10\1\0\16\10\1\115\12\10\23\0\1\10"+
    "\1\0\1\10\1\0\14\10\1\116\14\10\23\0\1\10"+
    "\1\0\1\10\1\0\10\10\1\117\3\10\1\120\14\10"+
    "\23\0\1\10\1\0\1\10\1\0\21\10\1\121\7\10"+
    "\71\0\1\122\60\0\1\123\10\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\124\25\10\23\0\1\10\1\0\1\10"+
    "\1\0\4\10\1\125\5\10\1\126\16\10\23\0\1\10"+
    "\1\0\1\10\1\0\11\10\1\127\17\10\23\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\130\25\10\23\0\1\10"+
    "\1\0\1\10\1\0\11\10\1\131\17\10\23\0\1\10"+
    "\1\0\1\10\1\0\23\10\1\132\5\10\23\0\1\10"+
    "\1\0\1\10\1\0\12\10\1\133\16\10\23\0\1\10"+
    "\1\0\1\10\1\0\20\10\1\134\6\10\1\135\1\10"+
    "\23\0\1\10\1\0\1\10\1\0\3\10\1\136\13\10"+
    "\1\137\11\10\23\0\1\10\1\0\1\10\1\0\14\10"+
    "\1\140\14\10\23\0\1\10\1\0\1\10\1\0\10\10"+
    "\1\141\20\10\23\0\1\10\1\0\1\10\1\0\7\10"+
    "\1\142\21\10\23\0\1\10\1\0\1\10\1\0\10\10"+
    "\1\143\3\10\1\144\14\10\23\0\1\10\1\0\1\10"+
    "\1\0\4\10\1\145\3\10\1\146\20\10\23\0\1\10"+
    "\1\0\1\10\1\0\16\10\1\147\12\10\23\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\150\1\151\7\10\1\152"+
    "\16\10\23\0\1\10\1\0\1\10\1\0\23\10\1\153"+
    "\5\10\23\0\1\10\1\0\1\10\1\0\26\10\1\154"+
    "\2\10\23\0\1\10\1\0\1\10\1\0\23\10\1\155"+
    "\5\10\23\0\1\10\1\0\1\10\1\0\30\10\1\156"+
    "\23\0\1\10\1\0\1\10\1\0\10\10\1\157\6\10"+
    "\1\160\11\10\23\0\1\10\1\0\1\10\1\0\5\10"+
    "\1\161\23\10\23\0\1\10\1\0\1\10\1\0\14\10"+
    "\1\162\14\10\23\0\1\10\1\0\1\10\1\0\17\10"+
    "\1\163\11\10\23\0\1\10\1\0\1\10\1\0\10\10"+
    "\1\164\20\10\23\0\1\10\1\0\1\10\1\0\16\10"+
    "\1\165\12\10\23\0\1\10\1\0\1\10\1\0\6\10"+
    "\1\166\22\10\23\0\1\10\1\0\1\10\1\0\2\10"+
    "\1\167\10\10\1\170\15\10\23\0\1\10\1\0\1\10"+
    "\1\0\4\10\1\171\24\10\23\0\1\10\1\0\1\10"+
    "\1\0\6\10\1\172\22\10\23\0\1\10\1\0\1\10"+
    "\1\0\12\10\1\173\16\10\23\0\1\10\1\0\1\10"+
    "\1\0\12\10\1\174\5\10\1\175\10\10\23\0\1\10"+
    "\1\0\1\10\1\0\12\10\1\176\16\10\23\0\1\10"+
    "\1\0\1\10\1\0\17\10\1\177\11\10\23\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\200\5\10\1\201\20\10"+
    "\23\0\1\10\1\0\1\10\1\0\10\10\1\202\20\10"+
    "\23\0\1\10\1\0\1\10\1\0\4\10\1\203\24\10"+
    "\23\0\1\10\1\0\1\10\1\0\16\10\1\204\12\10"+
    "\23\0\1\10\1\0\1\10\1\0\1\10\1\205\27\10"+
    "\23\0\1\10\1\0\1\10\1\0\4\10\1\206\5\10"+
    "\1\207\16\10\23\0\1\10\1\0\1\10\1\0\17\10"+
    "\1\210\11\10\23\0\1\10\1\0\1\10\1\0\20\10"+
    "\1\211\10\10\23\0\1\10\1\0\1\10\1\0\14\10"+
    "\1\212\14\10\23\0\1\10\1\0\1\10\1\0\11\10"+
    "\1\213\17\10\23\0\1\10\1\0\1\10\1\0\16\10"+
    "\1\214\12\10\23\0\1\10\1\0\1\10\1\0\12\10"+
    "\1\215\16\10\23\0\1\10\1\0\1\10\1\0\6\10"+
    "\1\216\1\10\1\217\20\10\23\0\1\10\1\0\1\10"+
    "\1\0\17\10\1\220\11\10\23\0\1\10\1\0\1\10"+
    "\1\0\12\10\1\221\16\10\23\0\1\10\1\0\1\10"+
    "\1\0\2\10\1\222\26\10\23\0\1\10\1\0\1\10"+
    "\1\0\22\10\1\223\6\10\23\0\1\10\1\0\1\10"+
    "\1\0\12\10\1\224\16\10\23\0\1\10\1\0\1\10"+
    "\1\0\10\10\1\225\20\10\23\0\1\10\1\0\1\10"+
    "\1\0\14\10\1\226\14\10\23\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\227\25\10\23\0\1\10\1\0\1\10"+
    "\1\0\2\10\1\230\26\10\23\0\1\10\1\0\1\10"+
    "\1\0\10\10\1\231\20\10\23\0\1\10\1\0\1\10"+
    "\1\0\16\10\1\232\12\10\23\0\1\10\1\0\1\10"+
    "\1\0\5\10\1\233\23\10\23\0\1\10\1\0\1\10"+
    "\1\0\4\10\1\234\24\10\23\0\1\10\1\0\1\10"+
    "\1\0\14\10\1\235\14\10\23\0\1\10\1\0\1\10"+
    "\1\0\16\10\1\236\12\10\23\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\237\25\10\23\0\1\10\1\0\1\10"+
    "\1\0\16\10\1\240\12\10\23\0\1\10\1\0\1\10"+
    "\1\0\17\10\1\241\11\10\23\0\1\10\1\0\1\10"+
    "\1\0\7\10\1\242\21\10\23\0\1\10\1\0\1\10"+
    "\1\0\16\10\1\243\12\10\23\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\244\4\10\1\245\20\10\23\0\1\10"+
    "\1\0\1\10\1\0\16\10\1\246\12\10\23\0\1\10"+
    "\1\0\1\10\1\0\23\10\1\247\5\10\23\0\1\10"+
    "\1\0\1\10\1\0\16\10\1\250\12\10\23\0\1\10"+
    "\1\0\1\10\1\0\6\10\1\251\22\10\23\0\1\10"+
    "\1\0\1\10\1\0\10\10\1\252\20\10\23\0\1\10"+
    "\1\0\1\10\1\0\14\10\1\253\14\10\23\0\1\10"+
    "\1\0\1\10\1\0\12\10\1\254\16\10\23\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\255\25\10\23\0\1\10"+
    "\1\0\1\10\1\0\15\10\1\256\13\10\23\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\257\26\10\23\0\1\10"+
    "\1\0\1\10\1\0\4\10\1\260\24\10\23\0\1\10"+
    "\1\0\1\10\1\0\21\10\1\261\7\10\23\0\1\10"+
    "\1\0\1\10\1\0\12\10\1\262\16\10\23\0\1\10"+
    "\1\0\1\10\1\0\10\10\1\263\20\10\23\0\1\10"+
    "\1\0\1\10\1\0\16\10\1\264\12\10\23\0\1\10"+
    "\1\0\1\10\1\0\14\10\1\265\14\10\23\0\1\10"+
    "\1\0\1\10\1\0\10\10\1\266\20\10\23\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\267\27\10\23\0\1\10"+
    "\1\0\1\10\1\0\11\10\1\270\17\10\23\0\1\10"+
    "\1\0\1\10\1\0\12\10\1\271\16\10\23\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\272\27\10\23\0\1\10"+
    "\1\0\1\10\1\0\10\10\1\273\20\10\23\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\274\25\10\23\0\1\10"+
    "\1\0\1\10\1\0\16\10\1\275\12\10\23\0\1\10"+
    "\1\0\1\10\1\0\20\10\1\276\10\10\23\0\1\10"+
    "\1\0\1\10\1\0\11\10\1\277\17\10\23\0\1\10"+
    "\1\0\1\10\1\0\24\10\1\300\4\10\23\0\1\10"+
    "\1\0\1\10\1\0\6\10\1\301\22\10\23\0\1\10"+
    "\1\0\1\10\1\0\11\10\1\302\17\10\23\0\1\10"+
    "\1\0\1\10\1\0\4\10\1\303\24\10\23\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\304\26\10\23\0\1\10"+
    "\1\0\1\10\1\0\26\10\1\305\2\10\23\0\1\10"+
    "\1\0\1\10\1\0\15\10\1\306\13\10\23\0\1\10"+
    "\1\0\1\10\1\0\12\10\1\307\16\10\23\0\1\10"+
    "\1\0\1\10\1\0\11\10\1\310\17\10\23\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\311\25\10\23\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\312\26\10\23\0\1\10"+
    "\1\0\1\10\1\0\12\10\1\313\16\10\23\0\1\10"+
    "\1\0\1\10\1\0\6\10\1\314\22\10\23\0\1\10"+
    "\1\0\1\10\1\0\11\10\1\315\17\10\23\0\1\10"+
    "\1\0\1\10\1\0\17\10\1\316\11\10\23\0\1\10"+
    "\1\0\1\10\1\0\17\10\1\317\11\10\23\0\1\10"+
    "\1\0\1\10\1\0\4\10\1\320\24\10\23\0\1\10"+
    "\1\0\1\10\1\0\6\10\1\321\22\10\23\0\1\10"+
    "\1\0\1\10\1\0\12\10\1\322\16\10\23\0\1\10"+
    "\1\0\1\10\1\0\16\10\1\323\12\10\23\0\1\10"+
    "\1\0\1\10\1\0\11\10\1\324\17\10\23\0\1\10"+
    "\1\0\1\10\1\0\15\10\1\325\13\10\23\0\1\10"+
    "\1\0\1\10\1\0\13\10\1\326\15\10\23\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\327\27\10\23\0\1\10"+
    "\1\0\1\10\1\0\12\10\1\330\16\10\23\0\1\10"+
    "\1\0\1\10\1\0\20\10\1\331\10\10\23\0\1\10"+
    "\1\0\1\10\1\0\21\10\1\332\7\10\23\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\333\27\10\23\0\1\10"+
    "\1\0\1\10\1\0\12\10\1\334\16\10\23\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\335\27\10\23\0\1\10"+
    "\1\0\1\10\1\0\11\10\1\336\17\10\23\0\1\10"+
    "\1\0\1\10\1\0\15\10\1\337\13\10\23\0\1\10"+
    "\1\0\1\10\1\0\16\10\1\340\12\10\23\0\1\10"+
    "\1\0\1\10\1\0\5\10\1\341\23\10\23\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\342\25\10\23\0\1\10"+
    "\1\0\1\10\1\0\16\10\1\343\12\10\23\0\1\10"+
    "\1\0\1\10\1\0\15\10\1\344\13\10\23\0\1\10"+
    "\1\0\1\10\1\0\12\10\1\345\16\10\23\0\1\10"+
    "\1\0\1\10\1\0\16\10\1\346\12\10\23\0\1\10"+
    "\1\0\1\10\1\0\16\10\1\347\12\10\23\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\350\26\10\23\0\1\10"+
    "\1\0\1\10\1\0\16\10\1\351\12\10\23\0\1\10"+
    "\1\0\1\10\1\0\11\10\1\352\17\10\23\0\1\10"+
    "\1\0\1\10\1\0\11\10\1\353\17\10\23\0\1\10"+
    "\1\0\1\10\1\0\12\10\1\354\16\10\23\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\355\25\10\23\0\1\10"+
    "\1\0\1\10\1\0\10\10\1\356\20\10\23\0\1\10"+
    "\1\0\1\10\1\0\6\10\1\357\22\10\23\0\1\10"+
    "\1\0\1\10\1\0\16\10\1\360\12\10\23\0\1\10"+
    "\1\0\1\10\1\0\12\10\1\361\16\10\23\0\1\10"+
    "\1\0\1\10\1\0\16\10\1\362\12\10\23\0\1\10"+
    "\1\0\1\10\1\0\16\10\1\363\12\10\23\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\364\25\10\23\0\1\10"+
    "\1\0\1\10\1\0\12\10\1\365\16\10\23\0\1\10"+
    "\1\0\1\10\1\0\13\10\1\366\15\10\23\0\1\10"+
    "\1\0\1\10\1\0\14\10\1\367\14\10\23\0\1\10"+
    "\1\0\1\10\1\0\12\10\1\370\16\10\23\0\1\10"+
    "\1\0\1\10\1\0\16\10\1\371\12\10\23\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\372\26\10\23\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\373\26\10\23\0\1\10"+
    "\1\0\1\10\1\0\16\10\1\374\12\10\23\0\1\10"+
    "\1\0\1\10\1\0\16\10\1\375\12\10\23\0\1\10"+
    "\1\0\1\10\1\0\15\10\1\376\13\10\23\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\377\27\10\23\0\1\10"+
    "\1\0\1\10\1\0\16\10\1\u0100\12\10\23\0\1\10"+
    "\1\0\1\10\1\0\17\10\1\u0101\11\10\23\0\1\10"+
    "\1\0\1\10\1\0\17\10\1\u0102\11\10\23\0\1\10"+
    "\1\0\1\10\1\0\16\10\1\u0103\12\10\23\0\1\10"+
    "\1\0\1\10\1\0\15\10\1\u0104\13\10\23\0\1\10"+
    "\1\0\1\10\1\0\16\10\1\u0105\12\10\17\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  9,  1,  9,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9,  9,  9,  9, 
     9,  9,  9,  9,  1,  1,  9,  9,  9,  9,  0,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	

    public Lexer(ComplexSymbolFactory sf, java.io.InputStream is){
		this(is);
        symbolFactory = sf;
    }
	public Lexer(ComplexSymbolFactory sf, java.io.Reader reader){
		this(reader);
        symbolFactory = sf;
    }
    
    private StringBuffer sb;
    private ComplexSymbolFactory symbolFactory;
    private int csline,cscolumn;

    public Symbol symbol(String name, int code){
		return symbolFactory.newSymbol(name, code,
						new Location(yyline+1,yycolumn+1, yychar), // -yylength()
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength())
				);
    }
    public Symbol symbol(String name, int code, String lexem){
	return symbolFactory.newSymbol(name, code, 
						new Location(yyline+1, yycolumn +1, yychar), 
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength()), lexem);
    }
    
    protected void emit_warning(String message){
    	System.out.println("scanner warning: " + message + " at : 2 "+ 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }
    
    protected void emit_error(String message){
    	System.out.println("scanner error: " + message + " at : 2" + 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[9168];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2296) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 33: 
          {  return symbolFactory.newSymbol("CLPAREN", CLPAREN);  }
        case 262: break;
        case 34: 
          {  return symbolFactory.newSymbol("CRPAREN", CRPAREN);  }
        case 263: break;
        case 239: 
          {  return symbolFactory.newSymbol("PRIVATE", PRIVATE);  }
        case 264: break;
        case 242: 
          {  return symbolFactory.newSymbol("INCLUDE", INCLUDE);  }
        case 265: break;
        case 245: 
          {  return symbolFactory.newSymbol("TYPEDEF", TYPEDEF);  }
        case 266: break;
        case 247: 
          {  return symbolFactory.newSymbol("DEFAULT", DEFAULT);  }
        case 267: break;
        case 249: 
          {  return symbolFactory.newSymbol("VIRTUAL", VIRTUAL);  }
        case 268: break;
        case 41: 
          {  return symbolFactory.newSymbol("EQUAL", EQUAL);  }
        case 269: break;
        case 28: 
          {  return symbolFactory.newSymbol("COLON", COLON);  }
        case 270: break;
        case 8: 
          {  return symbolFactory.newSymbol("TIMES", TIMES);  }
        case 271: break;
        case 7: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 106: 
        case 108: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 132: 
        case 133: 
        case 134: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 167: 
        case 168: 
        case 169: 
        case 171: 
        case 172: 
        case 174: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 197: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 211: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 224: 
        case 225: 
        case 226: 
        case 228: 
        case 231: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 240: 
        case 241: 
        case 243: 
        case 244: 
        case 246: 
        case 248: 
        case 250: 
        case 252: 
        case 254: 
          {  return symbolFactory.newSymbol("IDENT", IDENT);  }
        case 272: break;
        case 30: 
          {  return symbolFactory.newSymbol("MINUS", MINUS);  }
        case 273: break;
        case 35: 
          {  return symbolFactory.newSymbol("COMMA", COMMA);  }
        case 274: break;
        case 175: 
          {  return symbolFactory.newSymbol("CLASS", CLASS);  }
        case 275: break;
        case 176: 
          {  return symbolFactory.newSymbol("CATCH", CATCH);  }
        case 276: break;
        case 177: 
          {  return symbolFactory.newSymbol("CONST", CONST);  }
        case 277: break;
        case 184: 
          {  return symbolFactory.newSymbol("SHORT", SHORT);  }
        case 278: break;
        case 190: 
          {  return symbolFactory.newSymbol("UNION", UNION);  }
        case 279: break;
        case 191: 
          {  return symbolFactory.newSymbol("BREAK", BREAK);  }
        case 280: break;
        case 196: 
          {  return symbolFactory.newSymbol("THROW", THROW);  }
        case 281: break;
        case 198: 
          {  return symbolFactory.newSymbol("FLOAT", FLOAT);  }
        case 282: break;
        case 210: 
          {  return symbolFactory.newSymbol("WHILE", WHILE);  }
        case 283: break;
        case 2: 
        case 6: 
          {  emit_warning("Unrecognized character '" +yytext()+"' -- ignored");  }
        case 284: break;
        case 82: 
          {  return symbolFactory.newSymbol("RIGHTSHIFT", RIGHTSHIFT);  }
        case 285: break;
        case 114: 
          {  return symbolFactory.newSymbol("FOR", FOR);  }
        case 286: break;
        case 109: 
          {  return symbolFactory.newSymbol("TRY", TRY);  }
        case 287: break;
        case 107: 
          {  return symbolFactory.newSymbol("NEW", NEW);  }
        case 288: break;
        case 105: 
          {  return symbolFactory.newSymbol("INT", INT);  }
        case 289: break;
        case 89: 
          {  return symbolFactory.newSymbol("ASM", ASM);  }
        case 290: break;
        case 39: 
          {  return symbolFactory.newSymbol("AND", AND);  }
        case 291: break;
        case 38: 
          {  return symbolFactory.newSymbol("XOR", XOR);  }
        case 292: break;
        case 216: 
          {  return symbolFactory.newSymbol("STR", STR);  }
        case 293: break;
        case 258: 
          {  return symbolFactory.newSymbol("VOLATILE", VOLATILE);  }
        case 294: break;
        case 257: 
          {  return symbolFactory.newSymbol("REGISTER", REGISTER);  }
        case 295: break;
        case 251: 
          {  return symbolFactory.newSymbol("CONTINUE", CONTINUE);  }
        case 296: break;
        case 253: 
          {  return symbolFactory.newSymbol("UNSIGNED", UNSIGNED);  }
        case 297: break;
        case 255: 
          {  return symbolFactory.newSymbol("TEMPLATE", TEMPLATE);  }
        case 298: break;
        case 256: 
          {  return symbolFactory.newSymbol("OPERATOR", OPERATOR);  }
        case 299: break;
        case 36: 
          {  return symbolFactory.newSymbol("SMALLERTHAN", SMALLERTHAN);  }
        case 300: break;
        case 37: 
          {  return symbolFactory.newSymbol("GREATERTHAN", GREATERTHAN);  }
        case 301: break;
        case 155: 
          {  return symbolFactory.newSymbol("THIS", THIS);  }
        case 302: break;
        case 137: 
          {  return symbolFactory.newSymbol("AUTO", AUTO);  }
        case 303: break;
        case 136: 
          {  return symbolFactory.newSymbol("LONG", LONG);  }
        case 304: break;
        case 135: 
          {  return symbolFactory.newSymbol("CHAR", CHAR);  }
        case 305: break;
        case 131: 
          {  return symbolFactory.newSymbol("CASE", CASE);  }
        case 306: break;
        case 29: 
          {  return symbolFactory.newSymbol("PLUS", PLUS);  }
        case 307: break;
        case 27: 
          {  return symbolFactory.newSymbol("SEMI", SEMI);  }
        case 308: break;
        case 165: 
          {  return symbolFactory.newSymbol("ELSE", ELSE);  }
        case 309: break;
        case 166: 
          {  return symbolFactory.newSymbol("ENUM", ENUM);  }
        case 310: break;
        case 170: 
          {  return symbolFactory.newSymbol("GOTO", GOTO);  }
        case 311: break;
        case 173: 
          {  return symbolFactory.newSymbol("VOID", VOID);  }
        case 312: break;
        case 260: 
          {  return symbolFactory.newSymbol("NAMESPACE", NAMESPACE);  }
        case 313: break;
        case 259: 
          {  return symbolFactory.newSymbol("PROTECTED", PROTECTED);  }
        case 314: break;
        case 81: 
          {  return symbolFactory.newSymbol("LEFTSHIFT", LEFTSHIFT);  }
        case 315: break;
        case 43: 
          {  return symbolFactory.newSymbol("STRING", STRING);  }
        case 316: break;
        case 31: 
          {  return symbolFactory.newSymbol("LPAREN", LPAREN);  }
        case 317: break;
        case 32: 
          {  return symbolFactory.newSymbol("RPAREN", RPAREN);  }
        case 318: break;
        case 212: 
          {  return symbolFactory.newSymbol("SIGNED", SIGNED);  }
        case 319: break;
        case 213: 
          {  return symbolFactory.newSymbol("SIZEOF", SIZEOF);  }
        case 320: break;
        case 214: 
          {  return symbolFactory.newSymbol("STATIC", STATIC);  }
        case 321: break;
        case 215: 
          {  return symbolFactory.newSymbol("STRUCT", STRUCT);  }
        case 322: break;
        case 217: 
          {  return symbolFactory.newSymbol("SWITCH", SWITCH);  }
        case 323: break;
        case 218: 
          {  return symbolFactory.newSymbol("PUBLIC", PUBLIC);  }
        case 324: break;
        case 223: 
          {  return symbolFactory.newSymbol("INLINE", INLINE);  }
        case 325: break;
        case 227: 
          {  return symbolFactory.newSymbol("FRIEND", FRIEND);  }
        case 326: break;
        case 229: 
          {  return symbolFactory.newSymbol("DOUBLE", DOUBLE);  }
        case 327: break;
        case 230: 
          {  return symbolFactory.newSymbol("DELETE", DELETE);  }
        case 328: break;
        case 232: 
          {  return symbolFactory.newSymbol("DEFINE", DEFINE);  }
        case 329: break;
        case 233: 
          {  return symbolFactory.newSymbol("EXTERN", EXTERN);  }
        case 330: break;
        case 234: 
          {  return symbolFactory.newSymbol("RETURN", RETURN);  }
        case 331: break;
        case 71: 
          {  return symbolFactory.newSymbol("DO", DO);  }
        case 332: break;
        case 60: 
          {  return symbolFactory.newSymbol("IF", IF);  }
        case 333: break;
        case 40: 
          {  return symbolFactory.newSymbol("OR", OR);  }
        case 334: break;
        case 5: 
          {  return symbolFactory.newSymbol("NUMBER", NUMBER, Integer.parseInt(yytext()));  }
        case 335: break;
        case 3: 
        case 4: 
          {                                }
        case 336: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return symbolFactory.newSymbol("EOF",sym.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
