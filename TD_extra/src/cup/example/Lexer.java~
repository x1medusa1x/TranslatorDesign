/* The following code was generated by JFlex 1.3.5 on 10/27/22, 6:18 PM */

package cup.example;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java.lang.*;
import java.io.InputStreamReader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 10/27/22, 6:18 PM from the specification file
 * <tt>file:/C:/Users/alini/eclipse-workspace/TranslatorDesign/TD_extra/lexer.jflex</tt>
 */
public class Lexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int CODESEG = 1;
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\20\1\3\1\2\1\0\1\3\1\1\16\20\4\0\1\6\3\0"+
    "\1\17\1\0\1\61\1\5\1\51\1\52\1\16\1\50\1\55\1\11"+
    "\1\0\1\0\1\4\7\4\2\4\1\0\1\47\1\56\1\0\1\57"+
    "\2\0\1\10\5\17\21\17\1\17\1\17\1\12\1\7\1\0\1\15"+
    "\1\60\1\17\1\0\1\13\1\26\1\21\1\34\1\35\1\32\1\37"+
    "\1\40\1\27\1\17\1\43\1\22\1\42\1\30\1\33\1\24\1\17"+
    "\1\36\1\23\1\31\1\25\1\41\1\45\1\44\1\46\1\14\1\53"+
    "\1\62\1\54\1\0\41\20\2\0\4\17\4\0\1\17\2\0\1\20"+
    "\7\0\1\17\4\0\1\17\5\0\27\17\1\0\37\17\1\0\u01ca\17"+
    "\4\0\14\17\16\0\5\17\7\0\1\17\1\0\1\17\21\0\160\20"+
    "\5\17\1\0\2\17\2\0\4\17\1\0\1\17\6\0\1\17\1\0"+
    "\3\17\1\0\1\17\1\0\24\17\1\0\123\17\1\0\213\17\1\0"+
    "\5\20\2\0\246\17\1\0\46\17\2\0\1\17\7\0\47\17\7\0"+
    "\1\17\1\0\55\20\1\0\1\20\1\0\2\20\1\0\2\20\1\0"+
    "\1\20\10\0\33\17\5\0\3\17\15\0\6\20\5\0\1\17\4\0"+
    "\13\20\1\0\1\20\3\0\53\17\37\20\4\0\2\17\1\20\143\17"+
    "\1\0\1\17\10\20\1\0\6\20\2\17\2\20\1\0\4\20\2\17"+
    "\12\20\3\17\2\0\1\17\17\0\1\20\1\17\1\20\36\17\33\20"+
    "\2\0\131\17\13\20\1\17\16\0\12\20\41\17\11\20\2\17\4\0"+
    "\1\17\5\0\26\17\4\20\1\17\11\20\1\17\3\20\1\17\5\20"+
    "\22\0\31\17\3\20\4\0\13\17\65\0\25\17\1\0\10\17\26\0"+
    "\60\20\66\17\3\20\1\17\22\20\1\17\7\20\12\17\2\20\2\0"+
    "\12\20\1\0\20\17\3\20\1\0\10\17\2\0\2\17\2\0\26\17"+
    "\1\0\7\17\1\0\1\17\3\0\4\17\2\0\1\20\1\17\7\20"+
    "\2\0\2\20\2\0\3\20\1\17\10\0\1\20\4\0\2\17\1\0"+
    "\3\17\2\20\2\0\12\20\4\17\7\0\2\17\4\0\3\20\1\0"+
    "\6\17\4\0\2\17\2\0\26\17\1\0\7\17\1\0\2\17\1\0"+
    "\2\17\1\0\2\17\2\0\1\20\1\0\5\20\4\0\2\20\2\0"+
    "\3\20\3\0\1\20\7\0\4\17\1\0\1\17\7\0\14\20\3\17"+
    "\1\20\13\0\3\20\1\0\11\17\1\0\3\17\1\0\26\17\1\0"+
    "\7\17\1\0\2\17\1\0\5\17\2\0\1\20\1\17\10\20\1\0"+
    "\3\20\1\0\3\20\2\0\1\17\17\0\2\17\2\20\2\0\12\20"+
    "\1\0\1\17\7\0\1\17\6\20\1\0\3\20\1\0\10\17\2\0"+
    "\2\17\2\0\26\17\1\0\7\17\1\0\2\17\1\0\5\17\2\0"+
    "\1\20\1\17\7\20\2\0\2\20\2\0\3\20\10\0\2\20\4\0"+
    "\2\17\1\0\3\17\2\20\2\0\12\20\1\0\1\17\20\0\1\20"+
    "\1\17\1\0\6\17\3\0\3\17\1\0\4\17\3\0\2\17\1\0"+
    "\1\17\1\0\2\17\3\0\2\17\3\0\3\17\3\0\14\17\4\0"+
    "\5\20\3\0\3\20\1\0\4\20\2\0\1\17\6\0\1\20\16\0"+
    "\12\20\11\0\1\17\6\0\4\20\1\0\10\17\1\0\3\17\1\0"+
    "\27\17\1\0\20\17\3\0\1\17\7\20\1\0\3\20\1\0\4\20"+
    "\7\0\2\20\1\0\3\17\5\0\2\17\2\20\2\0\12\20\20\0"+
    "\1\17\3\20\1\0\10\17\1\0\3\17\1\0\27\17\1\0\12\17"+
    "\1\0\5\17\2\0\1\20\1\17\7\20\1\0\3\20\1\0\4\20"+
    "\7\0\2\20\7\0\1\17\1\0\2\17\2\20\2\0\12\20\1\0"+
    "\2\17\15\0\4\20\1\0\10\17\1\0\3\17\1\0\51\17\2\20"+
    "\1\17\7\20\1\0\3\20\1\0\4\20\1\17\5\0\3\17\1\20"+
    "\7\0\3\17\2\20\2\0\12\20\12\0\6\17\2\0\2\20\1\0"+
    "\22\17\3\0\30\17\1\0\11\17\1\0\1\17\2\0\7\17\3\0"+
    "\1\20\4\0\6\20\1\0\1\20\1\0\10\20\6\0\12\20\2\0"+
    "\2\20\15\0\60\17\1\20\2\17\7\20\4\0\10\17\10\20\1\0"+
    "\12\20\47\0\2\17\1\0\1\17\2\0\2\17\1\0\1\17\2\0"+
    "\1\17\6\0\4\17\1\0\7\17\1\0\3\17\1\0\1\17\1\0"+
    "\1\17\2\0\2\17\1\0\4\17\1\20\2\17\6\20\1\0\2\20"+
    "\1\17\2\0\5\17\1\0\1\17\1\0\6\20\2\0\12\20\2\0"+
    "\4\17\40\0\1\17\27\0\2\20\6\0\12\20\13\0\1\20\1\0"+
    "\1\20\1\0\1\20\4\0\2\20\10\17\1\0\44\17\4\0\24\20"+
    "\1\0\2\20\5\17\13\20\1\0\44\20\11\0\1\20\71\0\53\17"+
    "\24\20\1\17\12\20\6\0\6\17\4\20\4\17\3\20\1\17\3\20"+
    "\2\17\7\20\3\17\4\20\15\17\14\20\1\17\17\20\2\0\46\17"+
    "\1\0\1\17\5\0\1\17\2\0\53\17\1\0\u014d\17\1\0\4\17"+
    "\2\0\7\17\1\0\1\17\1\0\4\17\2\0\51\17\1\0\4\17"+
    "\2\0\41\17\1\0\4\17\2\0\7\17\1\0\1\17\1\0\4\17"+
    "\2\0\17\17\1\0\71\17\1\0\4\17\2\0\103\17\2\0\3\20"+
    "\40\0\20\17\20\0\126\17\2\0\6\17\3\0\u026c\17\2\0\21\17"+
    "\1\0\32\17\5\0\113\17\3\0\13\17\7\0\15\17\1\0\4\17"+
    "\3\20\13\0\22\17\3\20\13\0\22\17\2\20\14\0\15\17\1\0"+
    "\3\17\1\0\2\20\14\0\64\17\40\20\3\0\1\17\3\0\2\17"+
    "\1\20\2\0\12\20\41\0\4\20\1\0\12\20\6\0\130\17\10\0"+
    "\5\17\2\20\42\17\1\20\1\17\5\0\106\17\12\0\37\17\1\0"+
    "\14\20\4\0\14\20\12\0\12\20\36\17\2\0\5\17\13\0\54\17"+
    "\4\0\32\17\6\0\12\20\46\0\27\17\5\20\4\0\65\17\12\20"+
    "\1\0\35\20\2\0\13\20\6\0\12\20\15\0\1\17\10\0\16\20"+
    "\102\0\5\20\57\17\21\20\7\17\4\0\12\20\21\0\11\20\14\0"+
    "\3\20\36\17\15\20\2\17\12\20\54\17\16\20\14\0\44\17\24\20"+
    "\10\0\12\20\3\0\3\17\12\20\44\17\2\0\11\17\107\0\3\20"+
    "\1\0\25\20\4\17\1\20\4\17\3\20\2\17\3\20\6\0\300\17"+
    "\72\20\1\0\5\20\u0116\17\2\0\6\17\2\0\46\17\2\0\6\17"+
    "\2\0\10\17\1\0\1\17\1\0\1\17\1\0\1\17\1\0\37\17"+
    "\2\0\65\17\1\0\7\17\1\0\1\17\3\0\3\17\1\0\7\17"+
    "\3\0\4\17\2\0\6\17\4\0\15\17\5\0\3\17\1\0\7\17"+
    "\16\0\5\20\32\0\5\20\20\0\2\17\23\0\1\17\13\0\5\20"+
    "\1\0\12\20\1\0\1\17\15\0\1\17\20\0\15\17\3\0\40\17"+
    "\20\0\15\20\4\0\1\20\3\0\14\20\21\0\1\17\4\0\1\17"+
    "\2\0\12\17\1\0\1\17\3\0\5\17\6\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\4\17\1\0\13\17\2\0\4\17\5\0\5\17"+
    "\4\0\1\17\21\0\51\17\u0a77\0\57\17\1\0\57\17\1\0\205\17"+
    "\6\0\4\17\3\20\2\17\14\0\46\17\1\0\1\17\5\0\1\17"+
    "\2\0\70\17\7\0\1\17\17\0\1\20\27\17\11\0\7\17\1\0"+
    "\7\17\1\0\7\17\1\0\7\17\1\0\7\17\1\0\7\17\1\0"+
    "\7\17\1\0\7\17\1\0\40\20\57\0\1\17\u01d5\0\3\17\31\0"+
    "\11\17\6\20\1\0\5\17\2\0\5\17\4\0\126\17\2\0\2\20"+
    "\2\0\3\17\1\0\132\17\1\0\4\17\5\0\52\17\2\0\136\17"+
    "\21\0\33\17\65\0\20\17\u0200\0\u19b6\17\112\0\u51eb\17\25\0\u048d\17"+
    "\103\0\56\17\2\0\u010d\17\3\0\20\17\12\20\2\17\24\0\57\17"+
    "\1\20\4\0\12\20\1\0\37\17\2\20\120\17\2\20\45\0\11\17"+
    "\2\0\147\17\2\0\44\17\1\0\10\17\77\0\13\17\1\20\3\17"+
    "\1\20\4\17\1\20\27\17\5\20\20\0\1\17\7\0\64\17\14\0"+
    "\2\20\62\17\22\20\12\0\12\20\6\0\22\20\6\17\3\0\1\17"+
    "\1\0\1\17\2\0\12\20\34\17\10\20\2\0\27\17\15\20\14\0"+
    "\35\17\3\0\4\20\57\17\16\20\16\0\1\17\12\20\6\0\5\17"+
    "\1\20\12\17\12\20\5\17\1\0\51\17\16\20\11\0\3\17\1\20"+
    "\10\17\2\20\2\0\12\20\6\0\27\17\3\0\1\17\3\20\62\17"+
    "\1\20\1\17\3\20\2\17\2\20\5\17\2\20\1\17\1\20\1\17"+
    "\30\0\3\17\2\0\13\17\5\20\2\0\3\17\2\20\12\0\6\17"+
    "\2\0\6\17\2\0\6\17\11\0\7\17\1\0\7\17\1\0\53\17"+
    "\1\0\12\17\12\0\163\17\10\20\1\0\2\20\2\0\12\20\6\0"+
    "\u2ba4\17\14\0\27\17\4\0\61\17\u2104\0\u016e\17\2\0\152\17\46\0"+
    "\7\17\14\0\5\17\5\0\1\17\1\20\12\17\1\0\15\17\1\0"+
    "\5\17\1\0\1\17\1\0\2\17\1\0\2\17\1\0\154\17\41\0"+
    "\u016b\17\22\0\100\17\2\0\66\17\50\0\15\17\3\0\20\20\20\0"+
    "\20\20\3\0\2\17\30\0\3\17\31\0\1\17\6\0\5\17\1\0"+
    "\207\17\2\0\1\20\4\0\1\17\13\0\12\20\7\0\32\17\4\0"+
    "\1\17\1\0\32\17\13\0\131\17\3\0\6\17\2\0\6\17\2\0"+
    "\6\17\2\0\3\17\3\0\2\17\3\0\2\17\22\0\3\20\4\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    51,   102,   153,   102,   204,   255,   306,   102,   357, 
      102,   408,   459,   510,   561,   612,   663,   714,   765,   816, 
      867,   918,   969,  1020,  1071,  1122,  1173,  1224,   102,   102, 
      102,   102,   102,   102,   102,  1275,  1326,   102,   102,   102, 
     1377,  1428,  1479,  1530,  1581,  1632,  1683,  1734,  1785,  1836, 
     1887,  1938,  1989,  2040,  2091,  2142,  2193,   306,  2244,  2295, 
     2346,  2397,  2448,  2499,  2550,  2601,  2652,  2703,  2754,  2805, 
     2856,  2907,  2958,  3009,  3060,  3111,  3162,  3213,   102,   102, 
     3264,   306,  3315,  3366,  3417,  3468,  3519,  3570,  3621,  3672, 
     3723,  3774,  3825,  3876,  3927,  3978,  4029,  4080,  4131,  4182, 
     4233,  4284,  4335,   306,  4386,   306,  4437,   306,  4488,  4539, 
     4590,  4641,   306,  4692,  4743,  4794,  4845,  4896,  4947,  4998, 
     5049,  5100,  5151,  5202,  5253,  5304,  5355,  5406,  5457,   306, 
      306,  5508,  5559,  5610,  5661,   306,   306,  5712,  5763,  5814, 
     5865,  5916,  5967,  6018,  6069,  6120,  6171,  6222,  6273,  6324, 
     6375,  6426,  6477,  6528,   306,  6579,  6630,  6681,  6732,  6783, 
     6834,  6885,  6936,  6987,   306,   306,  7038,  7089,  7140,   306, 
     7191,  7242,   306,  7293,  7344,   306,   306,   306,  7395,  7446, 
     7497,  7548,  7599,  7650,   306,  7701,  7752,  7803,  7854,  7905, 
      306,   306,  7956,  8007,  8058,  8109,   306,  8160,   306,  8211, 
     8262,  8313,  8364,  8415,  8466,  8517,  8568,  8619,  8670,  8721, 
      306,  8772,  8823,   306,   306,   306,   306,   306,   306,   306, 
     8874,  8925,  8976,  9027,   306,  9078,  9129,  9180,   306,  9231, 
      306,   306,  9282,   306,   306,   306,  9333,  9384,  9435,  9486, 
     9537,   306,  9588,  9639,   306,  9690,  9741,   306,  9792,   306, 
     9843,   306,  9894,  9945,   306,  9996,   306, 10047,   306,   306, 
      306,   306, 10098,   306,   306, 10149, 10200, 10251, 10302, 10353, 
      102
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\3\1\4\2\5\1\6\1\7\1\5\1\3\1\10"+
    "\1\11\1\10\1\12\1\10\1\3\1\13\1\10\1\3"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\10"+
    "\1\33\3\10\1\34\1\10\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\63\3\65\0\1\5\64\0\1\6\63\0\1\51\61\0"+
    "\1\10\3\0\1\10\1\0\3\10\2\0\30\10\20\0"+
    "\1\10\3\0\1\10\1\0\3\10\2\0\4\10\1\52"+
    "\1\10\1\53\21\10\20\0\1\10\3\0\1\10\1\0"+
    "\1\10\1\54\1\10\2\0\3\10\1\55\10\10\1\56"+
    "\4\10\1\57\6\10\20\0\1\10\3\0\1\10\1\0"+
    "\3\10\2\0\14\10\1\60\13\10\20\0\1\10\3\0"+
    "\1\10\1\0\3\10\2\0\10\10\1\61\1\10\1\62"+
    "\6\10\1\63\4\10\1\64\1\10\20\0\1\10\3\0"+
    "\1\10\1\0\3\10\2\0\6\10\1\65\10\10\1\66"+
    "\10\10\20\0\1\10\3\0\1\10\1\0\3\10\2\0"+
    "\11\10\1\67\16\10\20\0\1\10\3\0\1\10\1\0"+
    "\3\10\2\0\17\10\1\70\10\10\20\0\1\10\3\0"+
    "\1\10\1\0\3\10\2\0\11\10\1\71\1\10\1\72"+
    "\14\10\20\0\1\10\3\0\1\10\1\0\1\10\1\73"+
    "\1\10\2\0\16\10\1\74\11\10\20\0\1\10\3\0"+
    "\1\10\1\0\3\10\2\0\16\10\1\75\1\76\1\10"+
    "\1\77\5\10\1\100\20\0\1\10\3\0\1\10\1\0"+
    "\3\10\2\0\3\10\1\101\10\10\1\102\2\10\1\103"+
    "\10\10\20\0\1\10\3\0\1\10\1\0\3\10\2\0"+
    "\5\10\1\104\22\10\20\0\1\10\3\0\1\10\1\0"+
    "\3\10\2\0\14\10\1\105\1\10\1\106\11\10\20\0"+
    "\1\10\3\0\1\10\1\0\3\10\2\0\3\10\1\107"+
    "\5\10\1\110\13\10\1\111\2\10\20\0\1\10\3\0"+
    "\1\10\1\0\3\10\2\0\16\10\1\112\11\10\20\0"+
    "\1\10\3\0\1\10\1\0\3\10\2\0\14\10\1\113"+
    "\13\10\20\0\1\10\3\0\1\10\1\0\3\10\2\0"+
    "\10\10\1\114\3\10\1\115\13\10\20\0\1\10\3\0"+
    "\1\10\1\0\3\10\2\0\21\10\1\116\6\10\72\0"+
    "\1\117\63\0\1\120\11\0\1\121\60\0\1\10\3\0"+
    "\1\10\1\0\3\10\2\0\23\10\1\122\4\10\20\0"+
    "\1\10\3\0\1\10\1\0\3\10\2\0\12\10\1\123"+
    "\15\10\20\0\1\10\3\0\1\10\1\0\3\10\2\0"+
    "\4\10\1\124\5\10\1\125\15\10\20\0\1\10\3\0"+
    "\1\10\1\0\1\10\1\126\1\10\2\0\30\10\20\0"+
    "\1\10\3\0\1\10\1\0\3\10\2\0\11\10\1\127"+
    "\16\10\20\0\1\10\3\0\1\10\1\0\1\10\1\130"+
    "\1\10\2\0\30\10\20\0\1\10\3\0\1\10\1\0"+
    "\3\10\2\0\11\10\1\131\16\10\20\0\1\10\3\0"+
    "\1\10\1\0\2\10\1\132\2\0\20\10\1\133\7\10"+
    "\20\0\1\10\3\0\1\10\1\0\1\10\1\134\1\10"+
    "\2\0\17\10\1\135\10\10\20\0\1\10\3\0\1\10"+
    "\1\0\3\10\2\0\14\10\1\136\13\10\20\0\1\10"+
    "\3\0\1\10\1\0\3\10\2\0\10\10\1\137\17\10"+
    "\20\0\1\10\3\0\1\10\1\0\3\10\2\0\7\10"+
    "\1\140\20\10\20\0\1\10\3\0\1\10\1\0\3\10"+
    "\2\0\10\10\1\141\3\10\1\142\13\10\20\0\1\10"+
    "\3\0\1\10\1\0\3\10\2\0\4\10\1\143\3\10"+
    "\1\144\17\10\20\0\1\10\3\0\1\10\1\0\3\10"+
    "\2\0\16\10\1\145\11\10\20\0\1\10\3\0\1\10"+
    "\1\0\3\10\2\0\2\10\1\146\1\147\6\10\1\150"+
    "\15\10\20\0\1\10\3\0\1\10\1\0\3\10\2\0"+
    "\23\10\1\151\4\10\20\0\1\10\3\0\1\10\1\0"+
    "\3\10\2\0\26\10\1\152\1\10\20\0\1\10\3\0"+
    "\1\10\1\0\3\10\2\0\23\10\1\153\4\10\20\0"+
    "\1\10\3\0\1\10\1\0\3\10\2\0\27\10\1\154"+
    "\20\0\1\10\3\0\1\10\1\0\3\10\2\0\10\10"+
    "\1\155\6\10\1\156\10\10\20\0\1\10\3\0\1\10"+
    "\1\0\3\10\2\0\5\10\1\157\22\10\20\0\1\10"+
    "\3\0\1\10\1\0\3\10\2\0\14\10\1\160\13\10"+
    "\20\0\1\10\3\0\1\10\1\0\3\10\2\0\17\10"+
    "\1\161\10\10\20\0\1\10\3\0\1\10\1\0\3\10"+
    "\2\0\10\10\1\162\17\10\20\0\1\10\3\0\1\10"+
    "\1\0\3\10\2\0\16\10\1\163\11\10\20\0\1\10"+
    "\3\0\1\10\1\0\3\10\2\0\6\10\1\164\21\10"+
    "\20\0\1\10\3\0\1\10\1\0\3\10\2\0\3\10"+
    "\1\165\7\10\1\166\14\10\20\0\1\10\3\0\1\10"+
    "\1\0\3\10\2\0\4\10\1\167\23\10\20\0\1\10"+
    "\3\0\1\10\1\0\3\10\2\0\6\10\1\170\21\10"+
    "\20\0\1\10\3\0\1\10\1\0\3\10\2\0\12\10"+
    "\1\171\15\10\20\0\1\10\3\0\1\10\1\0\3\10"+
    "\2\0\12\10\1\172\5\10\1\173\7\10\20\0\1\10"+
    "\3\0\1\10\1\0\3\10\2\0\12\10\1\174\15\10"+
    "\20\0\1\10\3\0\1\10\1\0\3\10\2\0\17\10"+
    "\1\175\10\10\20\0\1\10\3\0\1\10\1\0\3\10"+
    "\2\0\3\10\1\176\4\10\1\177\17\10\20\0\1\10"+
    "\3\0\1\10\1\0\3\10\2\0\10\10\1\200\17\10"+
    "\23\0\1\201\57\0\1\10\3\0\1\10\1\0\3\10"+
    "\2\0\14\10\1\202\13\10\20\0\1\10\3\0\1\10"+
    "\1\0\3\10\2\0\16\10\1\203\11\10\20\0\1\10"+
    "\3\0\1\10\1\0\3\10\2\0\2\10\1\204\25\10"+
    "\20\0\1\10\3\0\1\10\1\0\3\10\2\0\4\10"+
    "\1\205\23\10\20\0\1\10\3\0\1\10\1\0\3\10"+
    "\2\0\4\10\1\206\5\10\1\207\15\10\20\0\1\10"+
    "\3\0\1\10\1\0\3\10\2\0\17\10\1\210\10\10"+
    "\20\0\1\10\3\0\1\10\1\0\3\10\2\0\20\10"+
    "\1\211\7\10\20\0\1\10\3\0\1\10\1\0\3\10"+
    "\2\0\16\10\1\212\11\10\20\0\1\10\3\0\1\10"+
    "\1\0\3\10\2\0\11\10\1\213\16\10\20\0\1\10"+
    "\3\0\1\10\1\0\3\10\2\0\12\10\1\214\15\10"+
    "\20\0\1\10\3\0\1\10\1\0\3\10\2\0\6\10"+
    "\1\215\1\10\1\216\17\10\20\0\1\10\3\0\1\10"+
    "\1\0\3\10\2\0\17\10\1\217\10\10\20\0\1\10"+
    "\3\0\1\10\1\0\3\10\2\0\12\10\1\220\15\10"+
    "\20\0\1\10\3\0\1\10\1\0\3\10\2\0\3\10"+
    "\1\221\24\10\20\0\1\10\3\0\1\10\1\0\3\10"+
    "\2\0\22\10\1\222\5\10\20\0\1\10\3\0\1\10"+
    "\1\0\3\10\2\0\12\10\1\223\15\10\20\0\1\10"+
    "\3\0\1\10\1\0\3\10\2\0\10\10\1\224\17\10"+
    "\20\0\1\10\3\0\1\10\1\0\3\10\2\0\14\10"+
    "\1\225\13\10\20\0\1\10\3\0\1\10\1\0\1\10"+
    "\1\226\1\10\2\0\30\10\20\0\1\10\3\0\1\10"+
    "\1\0\3\10\2\0\3\10\1\227\24\10\20\0\1\10"+
    "\3\0\1\10\1\0\3\10\2\0\10\10\1\230\17\10"+
    "\20\0\1\10\3\0\1\10\1\0\3\10\2\0\16\10"+
    "\1\231\11\10\20\0\1\10\3\0\1\10\1\0\3\10"+
    "\2\0\5\10\1\232\22\10\20\0\1\10\3\0\1\10"+
    "\1\0\3\10\2\0\4\10\1\233\23\10\20\0\1\10"+
    "\3\0\1\10\1\0\3\10\2\0\14\10\1\234\13\10"+
    "\20\0\1\10\3\0\1\10\1\0\3\10\2\0\16\10"+
    "\1\235\11\10\20\0\1\10\3\0\1\10\1\0\1\10"+
    "\1\236\1\10\2\0\30\10\20\0\1\10\3\0\1\10"+
    "\1\0\3\10\2\0\16\10\1\237\11\10\20\0\1\10"+
    "\3\0\1\10\1\0\3\10\2\0\17\10\1\240\10\10"+
    "\20\0\1\10\3\0\1\10\1\0\3\10\2\0\7\10"+
    "\1\241\20\10\20\0\1\10\3\0\1\10\1\0\3\10"+
    "\2\0\16\10\1\242\11\10\20\0\1\10\3\0\1\10"+
    "\1\0\1\10\1\243\1\10\2\0\10\10\1\244\17\10"+
    "\20\0\1\10\3\0\1\10\1\0\3\10\2\0\16\10"+
    "\1\245\11\10\20\0\1\10\3\0\1\10\1\0\3\10"+
    "\2\0\23\10\1\246\4\10\20\0\1\10\3\0\1\10"+
    "\1\0\3\10\2\0\16\10\1\247\11\10\20\0\1\10"+
    "\3\0\1\10\1\0\3\10\2\0\6\10\1\250\21\10"+
    "\20\0\1\10\3\0\1\10\1\0\3\10\2\0\10\10"+
    "\1\251\17\10\20\0\1\10\3\0\1\10\1\0\3\10"+
    "\2\0\14\10\1\252\13\10\20\0\1\10\3\0\1\10"+
    "\1\0\3\10\2\0\12\10\1\253\15\10\20\0\1\10"+
    "\3\0\1\10\1\0\1\10\1\254\1\10\2\0\30\10"+
    "\20\0\1\10\3\0\1\10\1\0\3\10\2\0\15\10"+
    "\1\255\12\10\20\0\1\10\3\0\1\10\1\0\3\10"+
    "\2\0\3\10\1\256\24\10\24\0\1\257\56\0\1\10"+
    "\3\0\1\10\1\0\3\10\2\0\21\10\1\260\6\10"+
    "\20\0\1\10\3\0\1\10\1\0\3\10\2\0\4\10"+
    "\1\261\23\10\20\0\1\10\3\0\1\10\1\0\3\10"+
    "\2\0\12\10\1\262\15\10\20\0\1\10\3\0\1\10"+
    "\1\0\3\10\2\0\10\10\1\263\17\10\20\0\1\10"+
    "\3\0\1\10\1\0\3\10\2\0\14\10\1\264\13\10"+
    "\20\0\1\10\3\0\1\10\1\0\3\10\2\0\16\10"+
    "\1\265\11\10\20\0\1\10\3\0\1\10\1\0\3\10"+
    "\2\0\10\10\1\266\17\10\20\0\1\10\3\0\1\10"+
    "\1\0\3\10\2\0\2\10\1\267\25\10\20\0\1\10"+
    "\3\0\1\10\1\0\3\10\2\0\11\10\1\270\16\10"+
    "\20\0\1\10\3\0\1\10\1\0\3\10\2\0\12\10"+
    "\1\271\15\10\20\0\1\10\3\0\1\10\1\0\3\10"+
    "\2\0\2\10\1\272\25\10\20\0\1\10\3\0\1\10"+
    "\1\0\3\10\2\0\10\10\1\273\17\10\20\0\1\10"+
    "\3\0\1\10\1\0\1\10\1\274\1\10\2\0\30\10"+
    "\20\0\1\10\3\0\1\10\1\0\3\10\2\0\16\10"+
    "\1\275\11\10\20\0\1\10\3\0\1\10\1\0\3\10"+
    "\2\0\20\10\1\276\7\10\20\0\1\10\3\0\1\10"+
    "\1\0\3\10\2\0\11\10\1\277\16\10\20\0\1\10"+
    "\3\0\1\10\1\0\3\10\2\0\24\10\1\300\3\10"+
    "\20\0\1\10\3\0\1\10\1\0\3\10\2\0\6\10"+
    "\1\301\21\10\20\0\1\10\3\0\1\10\1\0\3\10"+
    "\2\0\11\10\1\302\16\10\20\0\1\10\3\0\1\10"+
    "\1\0\3\10\2\0\4\10\1\303\23\10\20\0\1\10"+
    "\3\0\1\10\1\0\3\10\2\0\3\10\1\304\24\10"+
    "\20\0\1\10\3\0\1\10\1\0\3\10\2\0\26\10"+
    "\1\305\1\10\20\0\1\10\3\0\1\10\1\0\3\10"+
    "\2\0\15\10\1\306\12\10\20\0\1\10\3\0\1\10"+
    "\1\0\3\10\2\0\12\10\1\307\15\10\20\0\1\10"+
    "\3\0\1\10\1\0\3\10\2\0\11\10\1\310\16\10"+
    "\20\0\1\10\3\0\1\10\1\0\1\10\1\311\1\10"+
    "\2\0\30\10\20\0\1\10\3\0\1\10\1\0\3\10"+
    "\2\0\3\10\1\312\24\10\20\0\1\10\3\0\1\10"+
    "\1\0\3\10\2\0\12\10\1\313\15\10\20\0\1\10"+
    "\3\0\1\10\1\0\3\10\2\0\6\10\1\314\21\10"+
    "\20\0\1\10\3\0\1\10\1\0\3\10\2\0\11\10"+
    "\1\315\16\10\20\0\1\10\3\0\1\10\1\0\3\10"+
    "\2\0\17\10\1\316\10\10\20\0\1\10\3\0\1\10"+
    "\1\0\3\10\2\0\17\10\1\317\10\10\20\0\1\10"+
    "\3\0\1\10\1\0\3\10\2\0\4\10\1\320\23\10"+
    "\20\0\1\10\3\0\1\10\1\0\3\10\2\0\6\10"+
    "\1\321\21\10\20\0\1\10\3\0\1\10\1\0\3\10"+
    "\2\0\12\10\1\322\15\10\20\0\1\10\3\0\1\10"+
    "\1\0\3\10\2\0\16\10\1\323\11\10\25\0\1\324"+
    "\55\0\1\10\3\0\1\10\1\0\3\10\2\0\11\10"+
    "\1\325\16\10\20\0\1\10\3\0\1\10\1\0\3\10"+
    "\2\0\13\10\1\326\14\10\20\0\1\10\3\0\1\10"+
    "\1\0\3\10\2\0\15\10\1\327\12\10\20\0\1\10"+
    "\3\0\1\10\1\0\3\10\2\0\2\10\1\330\25\10"+
    "\20\0\1\10\3\0\1\10\1\0\3\10\2\0\12\10"+
    "\1\331\15\10\20\0\1\10\3\0\1\10\1\0\3\10"+
    "\2\0\20\10\1\332\7\10\20\0\1\10\3\0\1\10"+
    "\1\0\3\10\2\0\21\10\1\333\6\10\20\0\1\10"+
    "\3\0\1\10\1\0\3\10\2\0\2\10\1\334\25\10"+
    "\20\0\1\10\3\0\1\10\1\0\3\10\2\0\12\10"+
    "\1\335\15\10\20\0\1\10\3\0\1\10\1\0\3\10"+
    "\2\0\2\10\1\336\25\10\20\0\1\10\3\0\1\10"+
    "\1\0\3\10\2\0\11\10\1\337\16\10\20\0\1\10"+
    "\3\0\1\10\1\0\3\10\2\0\15\10\1\340\12\10"+
    "\20\0\1\10\3\0\1\10\1\0\3\10\2\0\16\10"+
    "\1\341\11\10\20\0\1\10\3\0\1\10\1\0\3\10"+
    "\2\0\5\10\1\342\22\10\20\0\1\10\3\0\1\10"+
    "\1\0\1\10\1\343\1\10\2\0\30\10\20\0\1\10"+
    "\3\0\1\10\1\0\3\10\2\0\16\10\1\344\11\10"+
    "\20\0\1\10\3\0\1\10\1\0\3\10\2\0\15\10"+
    "\1\345\12\10\20\0\1\10\3\0\1\10\1\0\3\10"+
    "\2\0\12\10\1\346\15\10\20\0\1\10\3\0\1\10"+
    "\1\0\3\10\2\0\16\10\1\347\11\10\20\0\1\10"+
    "\3\0\1\10\1\0\3\10\2\0\16\10\1\350\11\10"+
    "\20\0\1\10\3\0\1\10\1\0\3\10\2\0\3\10"+
    "\1\351\24\10\20\0\1\10\3\0\1\10\1\0\3\10"+
    "\2\0\16\10\1\352\11\10\20\0\1\10\3\0\1\10"+
    "\1\0\3\10\2\0\11\10\1\353\16\10\20\0\1\10"+
    "\3\0\1\10\1\0\3\10\2\0\11\10\1\354\16\10"+
    "\20\0\1\10\3\0\1\10\1\0\3\10\2\0\12\10"+
    "\1\355\15\10\20\0\1\10\3\0\1\10\1\0\1\10"+
    "\1\356\1\10\2\0\30\10\20\0\1\10\3\0\1\10"+
    "\1\0\3\10\2\0\10\10\1\357\17\10\26\0\1\360"+
    "\54\0\1\10\3\0\1\10\1\0\3\10\2\0\6\10"+
    "\1\361\21\10\20\0\1\10\3\0\1\10\1\0\3\10"+
    "\2\0\16\10\1\362\11\10\20\0\1\10\3\0\1\10"+
    "\1\0\3\10\2\0\12\10\1\363\15\10\20\0\1\10"+
    "\3\0\1\10\1\0\3\10\2\0\16\10\1\364\11\10"+
    "\20\0\1\10\3\0\1\10\1\0\3\10\2\0\16\10"+
    "\1\365\11\10\20\0\1\10\3\0\1\10\1\0\1\10"+
    "\1\366\1\10\2\0\30\10\20\0\1\10\3\0\1\10"+
    "\1\0\3\10\2\0\12\10\1\367\15\10\20\0\1\10"+
    "\3\0\1\10\1\0\3\10\2\0\13\10\1\370\14\10"+
    "\20\0\1\10\3\0\1\10\1\0\3\10\2\0\14\10"+
    "\1\371\13\10\20\0\1\10\3\0\1\10\1\0\3\10"+
    "\2\0\12\10\1\372\15\10\20\0\1\10\3\0\1\10"+
    "\1\0\3\10\2\0\16\10\1\373\11\10\20\0\1\10"+
    "\3\0\1\10\1\0\3\10\2\0\3\10\1\374\24\10"+
    "\20\0\1\10\3\0\1\10\1\0\3\10\2\0\3\10"+
    "\1\375\24\10\27\0\1\376\53\0\1\10\3\0\1\10"+
    "\1\0\3\10\2\0\16\10\1\377\11\10\20\0\1\10"+
    "\3\0\1\10\1\0\3\10\2\0\16\10\1\u0100\11\10"+
    "\20\0\1\10\3\0\1\10\1\0\3\10\2\0\15\10"+
    "\1\u0101\12\10\20\0\1\10\3\0\1\10\1\0\3\10"+
    "\2\0\2\10\1\u0102\25\10\20\0\1\10\3\0\1\10"+
    "\1\0\3\10\2\0\16\10\1\u0103\11\10\20\0\1\10"+
    "\3\0\1\10\1\0\3\10\2\0\17\10\1\u0104\10\10"+
    "\20\0\1\10\3\0\1\10\1\0\3\10\2\0\17\10"+
    "\1\u0105\10\10\20\0\1\10\3\0\1\10\1\0\3\10"+
    "\2\0\16\10\1\u0106\11\10\25\0\1\u0107\55\0\1\10"+
    "\3\0\1\10\1\0\3\10\2\0\15\10\1\u0108\12\10"+
    "\20\0\1\10\3\0\1\10\1\0\3\10\2\0\16\10"+
    "\1\u0109\11\10\30\0\1\u010a\63\0\1\u010b\63\0\1\u010c"+
    "\52\0\1\u010d\61\0\1\u010e\62\0\1\u010f\55\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  9,  1,  9,  1,  1,  1,  9,  1,  9,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9,  9,  9, 
     9,  9,  9,  1,  1,  9,  9,  9,  0,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9, 
     0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1, 
     1,  1,  1,  1,  1,  1,  0,  1,  1,  0,  0,  0,  0,  0,  9
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	

    public Lexer(ComplexSymbolFactory sf, java.io.InputStream is){
		this(is);
        symbolFactory = sf;
    }
	public Lexer(ComplexSymbolFactory sf, java.io.Reader reader){
		this(reader);
        symbolFactory = sf;
    }
    
    private StringBuffer sb;
    private ComplexSymbolFactory symbolFactory;
    private int csline,cscolumn;

    public Symbol symbol(String name, int code){
		return symbolFactory.newSymbol(name, code,
						new Location(yyline+1,yycolumn+1, yychar), // -yylength()
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength())
				);
    }
    public Symbol symbol(String name, int code, String lexem){
	return symbolFactory.newSymbol(name, code, 
						new Location(yyline+1, yycolumn +1, yychar), 
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength()), lexem);
    }
    
    protected void emit_warning(String message){
    	System.out.println("scanner warning: " + message + " at : 2 "+ 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }
    
    protected void emit_error(String message){
    	System.out.println("scanner error: " + message + " at : 2" + 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[10404];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2300) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 32: 
          {  return symbolFactory.newSymbol("CLPAREN", CLPAREN);  }
        case 272: break;
        case 33: 
          {  return symbolFactory.newSymbol("CRPAREN", CRPAREN);  }
        case 273: break;
        case 241: 
          {  return symbolFactory.newSymbol("PRIVATE", PRIVATE);  }
        case 274: break;
        case 244: 
          {  return symbolFactory.newSymbol("INCLUDE", INCLUDE);  }
        case 275: break;
        case 247: 
          {  return symbolFactory.newSymbol("TYPEDEF", TYPEDEF);  }
        case 276: break;
        case 249: 
          {  return symbolFactory.newSymbol("DEFAULT", DEFAULT);  }
        case 277: break;
        case 251: 
          {  return symbolFactory.newSymbol("VIRTUAL", VIRTUAL);  }
        case 278: break;
        case 10: 
          {  return symbolFactory.newSymbol("TIMES", TIMES);  }
        case 279: break;
        case 8: 
          {  return symbolFactory.newSymbol("MINUS", MINUS);  }
        case 280: break;
        case 7: 
        case 9: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 104: 
        case 106: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 166: 
        case 167: 
        case 168: 
        case 170: 
        case 171: 
        case 173: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 197: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 212: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
        case 225: 
        case 226: 
        case 227: 
        case 229: 
        case 232: 
        case 236: 
        case 237: 
        case 238: 
        case 240: 
        case 242: 
        case 243: 
        case 245: 
        case 246: 
        case 248: 
        case 250: 
        case 252: 
        case 255: 
        case 257: 
          {  return symbolFactory.newSymbol("IDENT", IDENT);  }
        case 281: break;
        case 34: 
          {  return symbolFactory.newSymbol("COMMA", COMMA);  }
        case 282: break;
        case 175: 
          {  return symbolFactory.newSymbol("CATCH", CATCH);  }
        case 283: break;
        case 176: 
          {  return symbolFactory.newSymbol("CLASS", CLASS);  }
        case 284: break;
        case 177: 
          {  return symbolFactory.newSymbol("CONST", CONST);  }
        case 285: break;
        case 184: 
          {  return symbolFactory.newSymbol("SHORT", SHORT);  }
        case 286: break;
        case 190: 
          {  return symbolFactory.newSymbol("UNION", UNION);  }
        case 287: break;
        case 191: 
          {  return symbolFactory.newSymbol("BREAK", BREAK);  }
        case 288: break;
        case 196: 
          {  return symbolFactory.newSymbol("THROW", THROW);  }
        case 289: break;
        case 198: 
          {  return symbolFactory.newSymbol("FLOAT", FLOAT);  }
        case 290: break;
        case 210: 
          {  return symbolFactory.newSymbol("WHILE", WHILE);  }
        case 291: break;
        case 2: 
        case 6: 
          {  emit_warning("Unrecognized character '" +yytext()+"' -- ignored");  }
        case 292: break;
        case 79: 
          {  return symbolFactory.newSymbol("RIGHTSHIFT", RIGHTSHIFT);  }
        case 293: break;
        case 112: 
          {  return symbolFactory.newSymbol("FOR", FOR);  }
        case 294: break;
        case 107: 
          {  return symbolFactory.newSymbol("TRY", TRY);  }
        case 295: break;
        case 105: 
          {  return symbolFactory.newSymbol("NEW", NEW);  }
        case 296: break;
        case 103: 
          {  return symbolFactory.newSymbol("INT", INT);  }
        case 297: break;
        case 81: 
          {  return symbolFactory.newSymbol("ASM", ASM);  }
        case 298: break;
        case 37: 
          {  return symbolFactory.newSymbol("XOR", XOR);  }
        case 299: break;
        case 38: 
          {  return symbolFactory.newSymbol("AND", AND);  }
        case 300: break;
        case 217: 
          {  return symbolFactory.newSymbol("STR", STR);  }
        case 301: break;
        case 254: 
          {  return symbolFactory.newSymbol("CONTINUE", CONTINUE);  }
        case 302: break;
        case 256: 
          {  return symbolFactory.newSymbol("UNSIGNED", UNSIGNED);  }
        case 303: break;
        case 258: 
          {  return symbolFactory.newSymbol("TEMPLATE", TEMPLATE);  }
        case 304: break;
        case 259: 
          {  return symbolFactory.newSymbol("OPERATOR", OPERATOR);  }
        case 305: break;
        case 260: 
          {  return symbolFactory.newSymbol("REGISTER", REGISTER);  }
        case 306: break;
        case 261: 
          {  return symbolFactory.newSymbol("VOLATILE", VOLATILE);  }
        case 307: break;
        case 270: 
          {  return symbolFactory.newSymbol("STRING", STRING, yytext());  }
        case 308: break;
        case 35: 
          {  return symbolFactory.newSymbol("SMALLERTHAN", SMALLERTHAN);  }
        case 309: break;
        case 36: 
          {  return symbolFactory.newSymbol("GREATERTHAN", GREATERTHAN);  }
        case 310: break;
        case 169: 
          {  return symbolFactory.newSymbol("GOTO", GOTO);  }
        case 311: break;
        case 165: 
          {  return symbolFactory.newSymbol("ENUM", ENUM);  }
        case 312: break;
        case 164: 
          {  return symbolFactory.newSymbol("ELSE", ELSE);  }
        case 313: break;
        case 154: 
          {  return symbolFactory.newSymbol("THIS", THIS);  }
        case 314: break;
        case 136: 
          {  return symbolFactory.newSymbol("LONG", LONG);  }
        case 315: break;
        case 130: 
          {  return symbolFactory.newSymbol("CASE", CASE);  }
        case 316: break;
        case 129: 
          {  return symbolFactory.newSymbol("AUTO", AUTO);  }
        case 317: break;
        case 29: 
          {  return symbolFactory.newSymbol("PLUS", PLUS);  }
        case 318: break;
        case 28: 
          {  return symbolFactory.newSymbol("SEMI", SEMI);  }
        case 319: break;
        case 172: 
          {  return symbolFactory.newSymbol("VOID", VOID);  }
        case 320: break;
        case 264: 
          {  return symbolFactory.newSymbol("NAMESPACE", NAMESPACE);  }
        case 321: break;
        case 78: 
          {  return symbolFactory.newSymbol("LEFTSHIFT", LEFTSHIFT);  }
        case 322: break;
        case 263: 
          {  return symbolFactory.newSymbol("PROTECTED", PROTECTED);  }
        case 323: break;
        case 30: 
          {  return symbolFactory.newSymbol("LPAREN", LPAREN);  }
        case 324: break;
        case 31: 
          {  return symbolFactory.newSymbol("RPAREN", RPAREN);  }
        case 325: break;
        case 213: 
          {  return symbolFactory.newSymbol("SIZEOF", SIZEOF);  }
        case 326: break;
        case 214: 
          {  return symbolFactory.newSymbol("SIGNED", SIGNED);  }
        case 327: break;
        case 216: 
          {  return symbolFactory.newSymbol("STRUCT", STRUCT);  }
        case 328: break;
        case 218: 
          {  return symbolFactory.newSymbol("SWITCH", SWITCH);  }
        case 329: break;
        case 219: 
          {  return symbolFactory.newSymbol("PUBLIC", PUBLIC);  }
        case 330: break;
        case 224: 
          {  return symbolFactory.newSymbol("INLINE", INLINE);  }
        case 331: break;
        case 228: 
          {  return symbolFactory.newSymbol("FRIEND", FRIEND);  }
        case 332: break;
        case 230: 
          {  return symbolFactory.newSymbol("DOUBLE", DOUBLE);  }
        case 333: break;
        case 231: 
          {  return symbolFactory.newSymbol("DELETE", DELETE);  }
        case 334: break;
        case 233: 
          {  return symbolFactory.newSymbol("DEFINE", DEFINE);  }
        case 335: break;
        case 234: 
          {  return symbolFactory.newSymbol("EXTERN", EXTERN);  }
        case 336: break;
        case 235: 
          {  return symbolFactory.newSymbol("RETURN", RETURN);  }
        case 337: break;
        case 135: 
          {  return symbolFactory.newSymbol("CR", CR);  }
        case 338: break;
        case 68: 
          {  return symbolFactory.newSymbol("DO", DO);  }
        case 339: break;
        case 57: 
          {  return symbolFactory.newSymbol("IF", IF);  }
        case 340: break;
        case 39: 
          {  return symbolFactory.newSymbol("OR", OR);  }
        case 341: break;
        case 215: 
          {  return symbolFactory.newSymbol("ST", ST);  }
        case 342: break;
        case 5: 
          {  return symbolFactory.newSymbol("NUMBER", NUMBER, Integer.parseInt(yytext()));  }
        case 343: break;
        case 3: 
        case 4: 
          {                                }
        case 344: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return symbolFactory.newSymbol("EOF",sym.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
