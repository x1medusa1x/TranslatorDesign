/* The following code was generated by JFlex 1.3.5 on 11/14/22, 9:41 PM */

package cup.example;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java.lang.*;
import java.io.InputStreamReader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 11/14/22, 9:41 PM from the specification file
 * <tt>file:/C:/Users/alini/eclipse-workspace/TranslatorDesign/TD_extra/lexer.jflex</tt>
 */
public class Lexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int CODESEG = 1;
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\40\1\3\1\2\1\0\1\3\1\1\16\40\4\0\1\7\1\62"+
    "\1\5\1\0\1\37\1\70\1\65\1\15\1\73\1\74\1\36\1\67"+
    "\1\77\1\34\1\32\1\35\1\10\7\11\2\4\1\60\1\72\1\63"+
    "\1\61\1\64\1\16\1\0\4\13\1\33\1\13\5\6\1\31\10\6"+
    "\1\30\2\6\1\12\2\6\1\0\1\14\1\0\1\71\1\37\1\0"+
    "\1\17\1\20\1\41\1\47\1\50\1\21\1\51\1\52\1\45\1\6"+
    "\1\54\1\42\1\53\1\22\1\46\1\44\1\6\1\23\1\43\1\24"+
    "\1\27\1\25\1\55\1\26\1\57\1\56\1\75\1\66\1\76\1\0"+
    "\41\40\2\0\4\37\4\0\1\37\2\0\1\40\7\0\1\37\4\0"+
    "\1\37\5\0\27\37\1\0\37\37\1\0\u01ca\37\4\0\14\37\16\0"+
    "\5\37\7\0\1\37\1\0\1\37\21\0\160\40\5\37\1\0\2\37"+
    "\2\0\4\37\1\0\1\37\6\0\1\37\1\0\3\37\1\0\1\37"+
    "\1\0\24\37\1\0\123\37\1\0\213\37\1\0\5\40\2\0\246\37"+
    "\1\0\46\37\2\0\1\37\7\0\47\37\7\0\1\37\1\0\55\40"+
    "\1\0\1\40\1\0\2\40\1\0\2\40\1\0\1\40\10\0\33\37"+
    "\5\0\3\37\15\0\6\40\5\0\1\37\4\0\13\40\1\0\1\40"+
    "\3\0\53\37\37\40\4\0\2\37\1\40\143\37\1\0\1\37\10\40"+
    "\1\0\6\40\2\37\2\40\1\0\4\40\2\37\12\40\3\37\2\0"+
    "\1\37\17\0\1\40\1\37\1\40\36\37\33\40\2\0\131\37\13\40"+
    "\1\37\16\0\12\40\41\37\11\40\2\37\4\0\1\37\5\0\26\37"+
    "\4\40\1\37\11\40\1\37\3\40\1\37\5\40\22\0\31\37\3\40"+
    "\4\0\13\37\65\0\25\37\1\0\10\37\26\0\60\40\66\37\3\40"+
    "\1\37\22\40\1\37\7\40\12\37\2\40\2\0\12\40\1\0\20\37"+
    "\3\40\1\0\10\37\2\0\2\37\2\0\26\37\1\0\7\37\1\0"+
    "\1\37\3\0\4\37\2\0\1\40\1\37\7\40\2\0\2\40\2\0"+
    "\3\40\1\37\10\0\1\40\4\0\2\37\1\0\3\37\2\40\2\0"+
    "\12\40\4\37\7\0\2\37\4\0\3\40\1\0\6\37\4\0\2\37"+
    "\2\0\26\37\1\0\7\37\1\0\2\37\1\0\2\37\1\0\2\37"+
    "\2\0\1\40\1\0\5\40\4\0\2\40\2\0\3\40\3\0\1\40"+
    "\7\0\4\37\1\0\1\37\7\0\14\40\3\37\1\40\13\0\3\40"+
    "\1\0\11\37\1\0\3\37\1\0\26\37\1\0\7\37\1\0\2\37"+
    "\1\0\5\37\2\0\1\40\1\37\10\40\1\0\3\40\1\0\3\40"+
    "\2\0\1\37\17\0\2\37\2\40\2\0\12\40\1\0\1\37\7\0"+
    "\1\37\6\40\1\0\3\40\1\0\10\37\2\0\2\37\2\0\26\37"+
    "\1\0\7\37\1\0\2\37\1\0\5\37\2\0\1\40\1\37\7\40"+
    "\2\0\2\40\2\0\3\40\10\0\2\40\4\0\2\37\1\0\3\37"+
    "\2\40\2\0\12\40\1\0\1\37\20\0\1\40\1\37\1\0\6\37"+
    "\3\0\3\37\1\0\4\37\3\0\2\37\1\0\1\37\1\0\2\37"+
    "\3\0\2\37\3\0\3\37\3\0\14\37\4\0\5\40\3\0\3\40"+
    "\1\0\4\40\2\0\1\37\6\0\1\40\16\0\12\40\11\0\1\37"+
    "\6\0\4\40\1\0\10\37\1\0\3\37\1\0\27\37\1\0\20\37"+
    "\3\0\1\37\7\40\1\0\3\40\1\0\4\40\7\0\2\40\1\0"+
    "\3\37\5\0\2\37\2\40\2\0\12\40\20\0\1\37\3\40\1\0"+
    "\10\37\1\0\3\37\1\0\27\37\1\0\12\37\1\0\5\37\2\0"+
    "\1\40\1\37\7\40\1\0\3\40\1\0\4\40\7\0\2\40\7\0"+
    "\1\37\1\0\2\37\2\40\2\0\12\40\1\0\2\37\15\0\4\40"+
    "\1\0\10\37\1\0\3\37\1\0\51\37\2\40\1\37\7\40\1\0"+
    "\3\40\1\0\4\40\1\37\5\0\3\37\1\40\7\0\3\37\2\40"+
    "\2\0\12\40\12\0\6\37\2\0\2\40\1\0\22\37\3\0\30\37"+
    "\1\0\11\37\1\0\1\37\2\0\7\37\3\0\1\40\4\0\6\40"+
    "\1\0\1\40\1\0\10\40\6\0\12\40\2\0\2\40\15\0\60\37"+
    "\1\40\2\37\7\40\4\0\10\37\10\40\1\0\12\40\47\0\2\37"+
    "\1\0\1\37\2\0\2\37\1\0\1\37\2\0\1\37\6\0\4\37"+
    "\1\0\7\37\1\0\3\37\1\0\1\37\1\0\1\37\2\0\2\37"+
    "\1\0\4\37\1\40\2\37\6\40\1\0\2\40\1\37\2\0\5\37"+
    "\1\0\1\37\1\0\6\40\2\0\12\40\2\0\4\37\40\0\1\37"+
    "\27\0\2\40\6\0\12\40\13\0\1\40\1\0\1\40\1\0\1\40"+
    "\4\0\2\40\10\37\1\0\44\37\4\0\24\40\1\0\2\40\5\37"+
    "\13\40\1\0\44\40\11\0\1\40\71\0\53\37\24\40\1\37\12\40"+
    "\6\0\6\37\4\40\4\37\3\40\1\37\3\40\2\37\7\40\3\37"+
    "\4\40\15\37\14\40\1\37\17\40\2\0\46\37\1\0\1\37\5\0"+
    "\1\37\2\0\53\37\1\0\u014d\37\1\0\4\37\2\0\7\37\1\0"+
    "\1\37\1\0\4\37\2\0\51\37\1\0\4\37\2\0\41\37\1\0"+
    "\4\37\2\0\7\37\1\0\1\37\1\0\4\37\2\0\17\37\1\0"+
    "\71\37\1\0\4\37\2\0\103\37\2\0\3\40\40\0\20\37\20\0"+
    "\126\37\2\0\6\37\3\0\u026c\37\2\0\21\37\1\0\32\37\5\0"+
    "\113\37\3\0\13\37\7\0\15\37\1\0\4\37\3\40\13\0\22\37"+
    "\3\40\13\0\22\37\2\40\14\0\15\37\1\0\3\37\1\0\2\40"+
    "\14\0\64\37\40\40\3\0\1\37\3\0\2\37\1\40\2\0\12\40"+
    "\41\0\4\40\1\0\12\40\6\0\130\37\10\0\5\37\2\40\42\37"+
    "\1\40\1\37\5\0\106\37\12\0\37\37\1\0\14\40\4\0\14\40"+
    "\12\0\12\40\36\37\2\0\5\37\13\0\54\37\4\0\32\37\6\0"+
    "\12\40\46\0\27\37\5\40\4\0\65\37\12\40\1\0\35\40\2\0"+
    "\13\40\6\0\12\40\15\0\1\37\10\0\16\40\102\0\5\40\57\37"+
    "\21\40\7\37\4\0\12\40\21\0\11\40\14\0\3\40\36\37\15\40"+
    "\2\37\12\40\54\37\16\40\14\0\44\37\24\40\10\0\12\40\3\0"+
    "\3\37\12\40\44\37\2\0\11\37\107\0\3\40\1\0\25\40\4\37"+
    "\1\40\4\37\3\40\2\37\3\40\6\0\300\37\72\40\1\0\5\40"+
    "\u0116\37\2\0\6\37\2\0\46\37\2\0\6\37\2\0\10\37\1\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\37\37\2\0\65\37\1\0"+
    "\7\37\1\0\1\37\3\0\3\37\1\0\7\37\3\0\4\37\2\0"+
    "\6\37\4\0\15\37\5\0\3\37\1\0\7\37\16\0\5\40\32\0"+
    "\5\40\20\0\2\37\23\0\1\37\13\0\5\40\1\0\12\40\1\0"+
    "\1\37\15\0\1\37\20\0\15\37\3\0\40\37\20\0\15\40\4\0"+
    "\1\40\3\0\14\40\21\0\1\37\4\0\1\37\2\0\12\37\1\0"+
    "\1\37\3\0\5\37\6\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\4\37\1\0\13\37\2\0\4\37\5\0\5\37\4\0\1\37\21\0"+
    "\51\37\u0a77\0\57\37\1\0\57\37\1\0\205\37\6\0\4\37\3\40"+
    "\2\37\14\0\46\37\1\0\1\37\5\0\1\37\2\0\70\37\7\0"+
    "\1\37\17\0\1\40\27\37\11\0\7\37\1\0\7\37\1\0\7\37"+
    "\1\0\7\37\1\0\7\37\1\0\7\37\1\0\7\37\1\0\7\37"+
    "\1\0\40\40\57\0\1\37\u01d5\0\3\37\31\0\11\37\6\40\1\0"+
    "\5\37\2\0\5\37\4\0\126\37\2\0\2\40\2\0\3\37\1\0"+
    "\132\37\1\0\4\37\5\0\52\37\2\0\136\37\21\0\33\37\65\0"+
    "\20\37\u0200\0\u19b6\37\112\0\u51eb\37\25\0\u048d\37\103\0\56\37\2\0"+
    "\u010d\37\3\0\20\37\12\40\2\37\24\0\57\37\1\40\4\0\12\40"+
    "\1\0\37\37\2\40\120\37\2\40\45\0\11\37\2\0\147\37\2\0"+
    "\44\37\1\0\10\37\77\0\13\37\1\40\3\37\1\40\4\37\1\40"+
    "\27\37\5\40\20\0\1\37\7\0\64\37\14\0\2\40\62\37\22\40"+
    "\12\0\12\40\6\0\22\40\6\37\3\0\1\37\1\0\1\37\2\0"+
    "\12\40\34\37\10\40\2\0\27\37\15\40\14\0\35\37\3\0\4\40"+
    "\57\37\16\40\16\0\1\37\12\40\6\0\5\37\1\40\12\37\12\40"+
    "\5\37\1\0\51\37\16\40\11\0\3\37\1\40\10\37\2\40\2\0"+
    "\12\40\6\0\27\37\3\0\1\37\3\40\62\37\1\40\1\37\3\40"+
    "\2\37\2\40\5\37\2\40\1\37\1\40\1\37\30\0\3\37\2\0"+
    "\13\37\5\40\2\0\3\37\2\40\12\0\6\37\2\0\6\37\2\0"+
    "\6\37\11\0\7\37\1\0\7\37\1\0\53\37\1\0\12\37\12\0"+
    "\163\37\10\40\1\0\2\40\2\0\12\40\6\0\u2ba4\37\14\0\27\37"+
    "\4\0\61\37\u2104\0\u016e\37\2\0\152\37\46\0\7\37\14\0\5\37"+
    "\5\0\1\37\1\40\12\37\1\0\15\37\1\0\5\37\1\0\1\37"+
    "\1\0\2\37\1\0\2\37\1\0\154\37\41\0\u016b\37\22\0\100\37"+
    "\2\0\66\37\50\0\15\37\3\0\20\40\20\0\20\40\3\0\2\37"+
    "\30\0\3\37\31\0\1\37\6\0\5\37\1\0\207\37\2\0\1\40"+
    "\4\0\1\37\13\0\12\40\7\0\32\37\4\0\1\37\1\0\32\37"+
    "\13\0\131\37\3\0\6\37\2\0\6\37\2\0\6\37\2\0\3\37"+
    "\3\0\2\37\3\0\2\37\22\0\3\40\4\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    64,   128,   192,   128,   256,   320,   384,   448,   512, 
      576,   640,   704,   768,   832,   896,   960,  1024,  1088,  1152, 
     1216,  1280,  1344,  1408,  1472,  1536,  1600,  1664,  1728,  1792, 
     1856,  1920,  1984,  2048,  2112,  2176,  2240,  2304,  2368,  2432, 
     2496,  2560,  2624,   128,   128,   128,   128,   128,   128,  2688, 
     2752,  2816,  2880,  2944,   128,  3008,  3072,  3136,  3200,  3264, 
     3328,  3392,  3456,  3520,  3584,  3648,  3712,  3776,  3840,  3904, 
     3968,  4032,  4096,  4160,  4224,  4288,  4352,  4416,   128,   128, 
      128,  4480,   128,   128,  4544,  4608,  4672,  4736,  4800,  4864, 
     4928,  4992,  5056,  5120,  5184,   384,  5248,  5312,  5376,  5440, 
     5504,  5568,  5632,  5696,  5760,   128,   128,   128,   128,  5824, 
      128,  5888,   128,   128,   128,   128,   128,   128,   128,   128, 
     5952,  6016,  2880,   320,  6080,  6144,  6208,  6272,  6336,   384, 
     6400,  6464,  6528,   384,  6592,   384,  6656,  6720,   384,  6784, 
     6848,  6912,  6976,  7040,  7104,  7168,  7232,  7296,  7360,   128, 
      128,  7424,  7488,  7552,  7616,  7680,  7744,  7808,  7872,  7936, 
     8000,  8064,  8128,  8192,  8256,  8320,   384,  8384,  8448,  8512, 
     8576,  8640,  8704,  8768,  8832,  8896,  8960,  9024,   128,   128, 
     9088,  9152,  9216,  9280,  9344,   384,  9408,  9472,  9536,  9600, 
     9664,  9728,  9792,  9856,   384,  9920,  9984, 10048,   384, 10112, 
    10176, 10240,   384, 10304, 10368, 10432,   384,   384, 10496, 10560, 
    10624, 10688, 10752, 10816, 10880, 10944, 11008, 11072, 11136, 11200, 
    11264, 11328, 11392, 11456, 11520,   384, 11584,   384,   384, 11648, 
    11712, 11776, 11840, 11904, 11968,   384, 12032,   384, 12096, 12160, 
    12224, 12288,   384, 12352, 12416, 12480, 12544,   384,   384,   384, 
    12608,   384, 12672, 12736, 12800, 12864, 12928,   384, 12992, 13056, 
    13120, 13184, 13248, 13312, 13376, 13440, 13504, 13568, 13632, 13696, 
      384, 13760, 13824, 13888, 13952, 14016,   384, 14080,   384, 14144, 
    14208, 14272, 14336, 14400, 14464, 14528,   384,   384,   384,   384, 
      384,   384, 14592, 14656,   384, 14720,   384, 14784,   384, 14848, 
      384,   384,   384, 14912, 14976, 15040, 15104, 15168, 15232, 15296, 
      384,   384, 15360, 15424, 15488,   384, 15552,   384, 15616,   384, 
    15680, 15744, 15808, 15872, 15936,   384,   384,   384,   384,   384, 
    16000,   384, 16064, 16128, 16192, 16256,   384,   384, 16320, 16384, 
    16448, 16512, 16576, 16640, 16704, 16768, 16832, 16896, 16960, 17024, 
    17088, 17152, 17216, 17280, 17344, 17408, 17216, 17472, 17536, 17600, 
    17664
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\5\2\6"+
    "\2\10\1\11\1\12\1\3\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\10\1\22\1\10\1\23\1\24"+
    "\1\10\1\25\1\26\1\27\1\10\1\3\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\3\10"+
    "\1\41\2\10\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\100\3\102\0\1\5\101\0\1\6\1\0"+
    "\2\62\2\6\2\62\1\63\2\0\14\62\1\64\5\0"+
    "\7\62\1\64\7\62\20\0\2\7\1\0\2\7\1\65"+
    "\6\7\1\66\63\7\4\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\13\10\1\0\1\10\3\0\21\10\25\0"+
    "\1\67\2\0\2\70\2\0\12\67\1\71\1\72\1\73"+
    "\47\0\2\12\1\0\11\12\1\74\1\0\62\12\4\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\10\10\1\75"+
    "\2\10\1\0\1\10\3\0\4\10\1\76\14\10\24\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\4\10\1\77"+
    "\6\10\1\0\1\10\3\0\21\10\24\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\4\10\1\100\6\10\1\0"+
    "\1\10\3\0\3\10\1\101\3\10\1\102\11\10\24\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\1\103\12\10"+
    "\1\0\1\10\3\0\11\10\1\104\7\10\24\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\13\10\1\0\1\10"+
    "\3\0\11\10\1\105\7\10\24\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\4\10\1\106\6\10\1\0\1\10"+
    "\3\0\11\10\1\107\1\10\1\110\4\10\1\111\24\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\13\10\1\0"+
    "\1\10\3\0\6\10\1\112\1\113\11\10\24\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\3\10\1\114\7\10"+
    "\1\0\1\10\3\0\21\10\24\0\1\10\1\115\1\10"+
    "\1\0\4\10\1\0\1\12\1\0\13\10\1\0\1\10"+
    "\3\0\21\10\24\0\1\62\3\0\2\62\20\0\1\116"+
    "\3\0\1\117\75\0\1\120\24\0\1\121\2\0\1\122"+
    "\74\0\1\123\77\0\1\124\22\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\1\125\12\10\1\0\1\10\3\0"+
    "\3\10\1\126\3\10\1\127\3\10\1\130\5\10\24\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\13\10\1\0"+
    "\1\10\3\0\7\10\1\131\11\10\24\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\5\10\1\132\5\10\1\0"+
    "\1\10\3\0\6\10\1\133\4\10\1\134\2\10\1\135"+
    "\2\10\24\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\4\10\1\136\3\10\1\137\2\10\1\0\1\10\3\0"+
    "\21\10\24\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\2\10\1\140\1\141\7\10\1\0\1\10\3\0\21\10"+
    "\24\0\1\10\1\0\1\10\1\0\4\10\3\0\13\10"+
    "\1\0\1\10\3\0\5\10\1\142\13\10\24\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\13\10\1\0\1\10"+
    "\3\0\7\10\1\143\1\10\1\144\7\10\24\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\3\10\1\145\3\10"+
    "\1\146\3\10\1\0\1\10\3\0\3\10\1\147\15\10"+
    "\24\0\1\10\1\0\1\10\1\0\4\10\3\0\13\10"+
    "\1\0\1\10\3\0\7\10\1\150\11\10\24\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\13\10\1\0\1\10"+
    "\3\0\13\10\1\151\5\10\100\0\1\152\100\0\1\153"+
    "\77\0\1\154\77\0\1\155\1\0\1\156\75\0\1\157"+
    "\2\0\1\160\74\0\1\161\3\0\1\162\73\0\1\163"+
    "\4\0\1\164\72\0\1\165\5\0\1\166\71\0\1\167"+
    "\77\0\1\170\22\0\1\62\1\0\6\62\1\63\2\0"+
    "\14\62\1\64\5\0\7\62\1\64\7\62\47\0\1\171"+
    "\1\172\53\0\1\62\1\0\6\62\1\63\2\0\14\62"+
    "\1\64\1\62\4\0\7\62\1\64\7\62\7\0\1\62"+
    "\10\0\2\173\1\0\2\173\1\65\72\173\2\7\1\0"+
    "\2\7\1\174\72\7\10\0\2\175\76\0\1\176\77\0"+
    "\1\177\77\0\1\200\67\0\2\12\1\0\75\12\4\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\5\10\1\201"+
    "\5\10\1\0\1\10\3\0\21\10\24\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\13\10\1\0\1\10\3\0"+
    "\14\10\1\202\4\10\24\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\13\10\1\0\1\10\3\0\11\10\1\203"+
    "\7\10\24\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\13\10\1\0\1\10\3\0\6\10\1\204\12\10\24\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\13\10\1\0"+
    "\1\10\3\0\7\10\1\205\11\10\24\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\4\10\1\206\6\10\1\0"+
    "\1\10\3\0\21\10\24\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\13\10\1\0\1\10\3\0\14\10\1\207"+
    "\4\10\24\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\13\10\1\0\1\10\3\0\16\10\1\210\2\10\24\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\5\10\1\211"+
    "\5\10\1\0\1\10\3\0\12\10\1\212\6\10\24\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\13\10\1\0"+
    "\1\10\3\0\20\10\1\213\24\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\13\10\1\0\1\10\3\0\14\10"+
    "\1\214\4\10\24\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\4\10\1\215\6\10\1\0\1\10\3\0\6\10"+
    "\1\216\12\10\24\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\13\10\1\0\1\10\3\0\5\10\1\217\13\10"+
    "\24\0\1\10\1\0\1\10\1\0\4\10\3\0\4\10"+
    "\1\220\6\10\1\0\1\10\3\0\21\10\24\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\13\10\1\0\1\10"+
    "\3\0\3\10\1\221\2\10\1\222\12\10\24\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\13\10\1\0\1\10"+
    "\3\0\4\10\1\223\1\10\1\224\12\10\20\0\2\115"+
    "\1\0\2\115\1\0\6\115\1\225\63\115\32\0\1\226"+
    "\103\0\1\227\45\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\5\10\1\230\5\10\1\0\1\10\3\0\4\10"+
    "\1\231\14\10\24\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\1\232\12\10\1\0\1\10\3\0\21\10\24\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\3\10\1\233"+
    "\7\10\1\0\1\10\3\0\21\10\24\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\1\234\12\10\1\0\1\10"+
    "\3\0\21\10\24\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\3\10\1\235\7\10\1\0\1\10\3\0\21\10"+
    "\24\0\1\10\1\0\1\10\1\0\4\10\3\0\1\236"+
    "\3\10\1\237\6\10\1\0\1\10\3\0\21\10\24\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\13\10\1\0"+
    "\1\10\3\0\12\10\1\240\4\10\1\241\1\10\24\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\13\10\1\0"+
    "\1\10\3\0\7\10\1\242\11\10\24\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\13\10\1\0\1\10\3\0"+
    "\6\10\1\243\12\10\24\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\13\10\1\0\1\10\3\0\6\10\1\244"+
    "\1\245\11\10\24\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\1\10\1\246\11\10\1\0\1\10\3\0\21\10"+
    "\24\0\1\10\1\0\1\10\1\0\4\10\3\0\5\10"+
    "\1\247\5\10\1\0\1\10\3\0\2\10\1\250\1\251"+
    "\15\10\24\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\13\10\1\0\1\10\3\0\11\10\1\252\7\10\24\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\10\10\1\253"+
    "\2\10\1\0\1\10\3\0\21\10\24\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\2\10\1\254\10\10\1\0"+
    "\1\10\3\0\3\10\1\255\15\10\24\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\10\10\1\256\2\10\1\0"+
    "\1\10\3\0\21\10\24\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\5\10\1\257\5\10\1\0\1\10\3\0"+
    "\21\10\24\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\13\10\1\0\1\10\3\0\4\10\1\260\14\10\24\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\5\10\1\261"+
    "\5\10\1\0\1\10\3\0\21\10\24\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\13\10\1\0\1\10\3\0"+
    "\6\10\1\262\12\10\101\0\1\263\77\0\1\264\26\0"+
    "\1\265\77\0\1\266\77\0\2\67\100\0\1\267\13\0"+
    "\1\267\63\0\1\270\13\0\1\270\63\0\1\271\13\0"+
    "\1\271\55\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\13\10\1\0\1\10\3\0\7\10\1\272\11\10\24\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\1\273\12\10"+
    "\1\0\1\10\3\0\21\10\24\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\13\10\1\0\1\10\3\0\11\10"+
    "\1\274\7\10\24\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\1\275\12\10\1\0\1\10\3\0\21\10\24\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\13\10\1\0"+
    "\1\10\3\0\11\10\1\276\7\10\24\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\10\10\1\277\2\10\1\0"+
    "\1\10\3\0\21\10\24\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\13\10\1\0\1\10\3\0\6\10\1\300"+
    "\12\10\24\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\13\10\1\0\1\10\3\0\5\10\1\301\13\10\24\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\13\10\1\0"+
    "\1\10\3\0\7\10\1\302\11\10\24\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\13\10\1\0\1\10\3\0"+
    "\4\10\1\303\14\10\24\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\13\10\1\0\1\10\3\0\11\10\1\304"+
    "\7\10\24\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\5\10\1\305\5\10\1\0\1\10\3\0\21\10\24\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\1\306\12\10"+
    "\1\0\1\10\3\0\21\10\24\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\13\10\1\0\1\10\3\0\10\10"+
    "\1\307\10\10\24\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\13\10\1\0\1\10\3\0\6\10\1\310\12\10"+
    "\24\0\1\10\1\0\1\10\1\0\4\10\3\0\13\10"+
    "\1\0\1\10\3\0\7\10\1\311\11\10\20\0\2\115"+
    "\1\0\75\115\4\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\13\10\1\0\1\10\3\0\2\10\1\312\16\10"+
    "\24\0\1\10\1\0\1\10\1\0\4\10\3\0\13\10"+
    "\1\0\1\10\3\0\11\10\1\313\7\10\24\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\13\10\1\0\1\10"+
    "\3\0\4\10\1\314\14\10\24\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\5\10\1\315\5\10\1\0\1\10"+
    "\3\0\4\10\1\316\14\10\24\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\4\10\1\317\6\10\1\0\1\10"+
    "\3\0\21\10\24\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\13\10\1\0\1\10\3\0\12\10\1\320\6\10"+
    "\24\0\1\10\1\0\1\10\1\0\4\10\3\0\5\10"+
    "\1\321\5\10\1\0\1\10\3\0\21\10\24\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\10\10\1\322\2\10"+
    "\1\0\1\10\3\0\6\10\1\323\12\10\24\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\3\10\1\324\7\10"+
    "\1\0\1\10\3\0\21\10\24\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\13\10\1\0\1\10\3\0\11\10"+
    "\1\325\7\10\24\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\4\10\1\326\6\10\1\0\1\10\3\0\21\10"+
    "\24\0\1\10\1\0\1\10\1\0\4\10\3\0\5\10"+
    "\1\327\5\10\1\0\1\10\3\0\21\10\24\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\6\10\1\330\4\10"+
    "\1\0\1\10\3\0\21\10\24\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\5\10\1\331\5\10\1\0\1\10"+
    "\3\0\21\10\24\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\13\10\1\0\1\10\3\0\3\10\1\332\15\10"+
    "\24\0\1\10\1\0\1\10\1\0\4\10\3\0\13\10"+
    "\1\0\1\10\3\0\3\10\1\333\15\10\24\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\13\10\1\0\1\10"+
    "\3\0\6\10\1\334\12\10\24\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\4\10\1\335\6\10\1\0\1\10"+
    "\3\0\21\10\24\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\1\10\1\336\11\10\1\0\1\10\3\0\21\10"+
    "\24\0\1\10\1\0\1\10\1\0\4\10\3\0\1\337"+
    "\12\10\1\0\1\10\3\0\6\10\1\340\12\10\24\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\13\10\1\0"+
    "\1\10\3\0\11\10\1\341\7\10\24\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\13\10\1\0\1\10\3\0"+
    "\14\10\1\342\4\10\24\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\13\10\1\0\1\10\3\0\11\10\1\343"+
    "\7\10\24\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\13\10\1\0\1\10\3\0\11\10\1\344\7\10\24\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\13\10\1\0"+
    "\1\10\3\0\7\10\1\345\11\10\24\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\13\10\1\0\1\10\3\0"+
    "\3\10\1\346\15\10\32\0\1\347\13\0\1\347\63\0"+
    "\1\350\13\0\1\350\55\0\1\351\3\0\2\351\1\0"+
    "\1\351\3\0\3\351\11\0\1\351\5\0\1\351\5\0"+
    "\2\351\33\0\1\352\3\0\2\352\1\0\1\352\3\0"+
    "\3\352\11\0\1\352\5\0\1\352\5\0\2\352\33\0"+
    "\1\353\3\0\2\353\1\0\1\353\3\0\3\353\11\0"+
    "\1\353\5\0\1\353\5\0\2\353\33\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\13\10\1\0\1\10\3\0"+
    "\15\10\1\354\3\10\24\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\3\10\1\355\7\10\1\0\1\10\3\0"+
    "\21\10\24\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\5\10\1\356\5\10\1\0\1\10\3\0\21\10\24\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\13\10\1\0"+
    "\1\10\3\0\4\10\1\357\14\10\24\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\4\10\1\360\6\10\1\0"+
    "\1\10\3\0\21\10\24\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\13\10\1\0\1\10\3\0\4\10\1\361"+
    "\14\10\24\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\13\10\1\0\1\10\3\0\3\10\1\362\15\10\24\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\13\10\1\0"+
    "\1\10\3\0\16\10\1\363\2\10\24\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\13\10\1\0\1\10\3\0"+
    "\10\10\1\364\10\10\24\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\10\10\1\365\2\10\1\0\1\10\3\0"+
    "\21\10\24\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\5\10\1\366\5\10\1\0\1\10\3\0\21\10\24\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\13\10\1\0"+
    "\1\10\3\0\12\10\1\367\6\10\24\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\3\10\1\370\7\10\1\0"+
    "\1\10\3\0\21\10\24\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\13\10\1\0\1\10\3\0\13\10\1\371"+
    "\5\10\24\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\13\10\1\0\1\10\3\0\4\10\1\372\14\10\24\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\13\10\1\0"+
    "\1\10\3\0\6\10\1\373\12\10\24\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\5\10\1\374\5\10\1\0"+
    "\1\10\3\0\21\10\24\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\13\10\1\0\1\10\3\0\6\10\1\375"+
    "\12\10\24\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\13\10\1\0\1\10\3\0\2\10\1\376\16\10\24\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\3\10\1\377"+
    "\7\10\1\0\1\10\3\0\21\10\24\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\13\10\1\0\1\10\3\0"+
    "\11\10\1\u0100\7\10\24\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\13\10\1\0\1\10\3\0\7\10\1\u0101"+
    "\11\10\24\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\5\10\1\u0102\5\10\1\0\1\10\3\0\21\10\24\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\13\10\1\0"+
    "\1\10\3\0\2\10\1\u0103\16\10\24\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\1\u0104\12\10\1\0\1\10"+
    "\3\0\21\10\24\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\13\10\1\0\1\10\3\0\11\10\1\u0105\7\10"+
    "\24\0\1\10\1\0\1\10\1\0\4\10\3\0\13\10"+
    "\1\0\1\10\3\0\6\10\1\u0106\12\10\24\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\10\10\1\u0107\2\10"+
    "\1\0\1\10\3\0\21\10\24\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\3\10\1\u0108\7\10\1\0\1\10"+
    "\3\0\21\10\24\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\1\u0109\12\10\1\0\1\10\3\0\21\10\24\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\13\10\1\0"+
    "\1\10\3\0\3\10\1\u010a\15\10\24\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\10\10\1\u010b\2\10\1\0"+
    "\1\10\3\0\21\10\24\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\3\10\1\u010c\7\10\1\0\1\10\3\0"+
    "\21\10\24\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\5\10\1\u010d\5\10\1\0\1\10\3\0\21\10\24\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\4\10\1\u010e"+
    "\6\10\1\0\1\10\3\0\21\10\24\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\13\10\1\0\1\10\3\0"+
    "\11\10\1\u010f\7\10\24\0\1\u0110\3\0\2\u0110\1\0"+
    "\1\u0110\3\0\3\u0110\11\0\1\u0110\5\0\1\u0110\5\0"+
    "\2\u0110\33\0\1\u0111\3\0\2\u0111\1\0\1\u0111\3\0"+
    "\3\u0111\11\0\1\u0111\5\0\1\u0111\5\0\2\u0111\33\0"+
    "\1\351\3\0\1\u0112\1\351\1\0\1\351\3\0\3\351"+
    "\11\0\1\351\5\0\1\351\5\0\2\351\33\0\1\352"+
    "\3\0\1\u0113\1\352\1\0\1\352\3\0\3\352\11\0"+
    "\1\352\5\0\1\352\5\0\2\352\33\0\1\353\3\0"+
    "\1\u0114\1\353\1\0\1\353\3\0\3\353\11\0\1\353"+
    "\5\0\1\353\5\0\2\353\33\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\13\10\1\0\1\10\3\0\10\10"+
    "\1\u0115\10\10\24\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\13\10\1\0\1\10\3\0\5\10\1\u0116\13\10"+
    "\24\0\1\10\1\0\1\10\1\0\4\10\3\0\3\10"+
    "\1\u0117\7\10\1\0\1\10\3\0\21\10\24\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\5\10\1\u0118\5\10"+
    "\1\0\1\10\3\0\21\10\24\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\1\u0119\12\10\1\0\1\10\3\0"+
    "\21\10\24\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\13\10\1\0\1\10\3\0\11\10\1\u011a\7\10\24\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\1\u011b\12\10"+
    "\1\0\1\10\3\0\21\10\24\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\13\10\1\0\1\10\3\0\6\10"+
    "\1\u011c\12\10\24\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\3\10\1\u011d\7\10\1\0\1\10\3\0\21\10"+
    "\24\0\1\10\1\0\1\10\1\0\4\10\3\0\3\10"+
    "\1\u011e\7\10\1\0\1\10\3\0\21\10\24\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\13\10\1\0\1\10"+
    "\3\0\2\10\1\u011f\16\10\24\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\5\10\1\u0120\5\10\1\0\1\10"+
    "\3\0\21\10\24\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\13\10\1\0\1\10\3\0\12\10\1\u0121\6\10"+
    "\24\0\1\10\1\0\1\10\1\0\4\10\3\0\13\10"+
    "\1\0\1\10\3\0\10\10\1\u0122\10\10\24\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\2\10\1\u0123\10\10"+
    "\1\0\1\10\3\0\21\10\24\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\13\10\1\0\1\10\3\0\13\10"+
    "\1\u0124\5\10\24\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\5\10\1\u0125\5\10\1\0\1\10\3\0\21\10"+
    "\24\0\1\10\1\0\1\10\1\0\4\10\3\0\13\10"+
    "\1\0\1\10\3\0\2\10\1\u0126\16\10\24\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\13\10\1\0\1\10"+
    "\3\0\2\10\1\u0127\16\10\24\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\13\10\1\0\1\10\3\0\10\10"+
    "\1\u0128\10\10\24\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\13\10\1\0\1\10\3\0\11\10\1\u0129\7\10"+
    "\24\0\1\10\1\0\1\10\1\0\4\10\3\0\5\10"+
    "\1\u012a\5\10\1\0\1\10\3\0\21\10\24\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\13\10\1\0\1\10"+
    "\3\0\11\10\1\u012b\7\10\24\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\13\10\1\0\1\10\3\0\3\10"+
    "\1\u012c\15\10\24\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\13\10\1\0\1\10\3\0\11\10\1\u012d\7\10"+
    "\24\0\1\10\1\0\1\10\1\0\4\10\3\0\13\10"+
    "\1\0\1\10\3\0\11\10\1\u012e\7\10\24\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\3\10\1\u012f\7\10"+
    "\1\0\1\10\3\0\21\10\24\0\1\u0110\3\0\1\u0130"+
    "\1\u0110\1\0\1\u0110\3\0\3\u0110\11\0\1\u0110\5\0"+
    "\1\u0110\5\0\2\u0110\33\0\1\u0111\3\0\1\u0131\1\u0111"+
    "\1\0\1\u0111\3\0\3\u0111\11\0\1\u0111\5\0\1\u0111"+
    "\5\0\2\u0111\33\0\1\351\3\0\1\u0112\1\351\1\267"+
    "\1\351\3\0\3\351\4\0\1\267\4\0\1\351\5\0"+
    "\1\351\5\0\2\351\33\0\1\352\3\0\1\u0113\1\352"+
    "\1\u0132\1\352\3\0\3\352\4\0\1\u0132\4\0\1\352"+
    "\5\0\1\352\5\0\2\352\33\0\1\353\3\0\1\u0114"+
    "\1\353\1\u0133\1\353\3\0\3\353\4\0\1\u0133\4\0"+
    "\1\353\5\0\1\353\5\0\2\353\33\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\1\u0134\12\10\1\0\1\10"+
    "\3\0\21\10\24\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\13\10\1\0\1\10\3\0\11\10\1\u0135\7\10"+
    "\24\0\1\10\1\0\1\10\1\0\4\10\3\0\5\10"+
    "\1\u0136\5\10\1\0\1\10\3\0\21\10\24\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\2\10\1\u0137\10\10"+
    "\1\0\1\10\3\0\21\10\24\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\13\10\1\0\1\10\3\0\3\10"+
    "\1\u0138\15\10\24\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\13\10\1\0\1\10\3\0\3\10\1\u0139\15\10"+
    "\24\0\1\10\1\0\1\10\1\0\4\10\3\0\13\10"+
    "\1\0\1\10\3\0\11\10\1\u013a\7\10\24\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\10\10\1\u013b\2\10"+
    "\1\0\1\10\3\0\21\10\24\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\13\10\1\0\1\10\3\0\11\10"+
    "\1\u013c\7\10\24\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\5\10\1\u013d\5\10\1\0\1\10\3\0\21\10"+
    "\24\0\1\10\1\0\1\10\1\0\4\10\3\0\13\10"+
    "\1\0\1\10\3\0\11\10\1\u013e\7\10\24\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\13\10\1\0\1\10"+
    "\3\0\7\10\1\u013f\11\10\24\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\5\10\1\u0140\5\10\1\0\1\10"+
    "\3\0\21\10\24\0\1\u0110\3\0\1\u0130\1\u0110\1\u0141"+
    "\1\u0110\3\0\3\u0110\4\0\1\u0141\4\0\1\u0110\5\0"+
    "\1\u0110\5\0\2\u0110\33\0\1\u0111\3\0\1\u0131\1\u0111"+
    "\1\u0142\1\u0111\3\0\3\u0111\4\0\1\u0142\4\0\1\u0111"+
    "\5\0\1\u0111\5\0\2\u0111\33\0\1\u0143\3\0\2\u0143"+
    "\1\0\1\u0143\3\0\3\u0143\11\0\1\u0143\5\0\1\u0143"+
    "\5\0\2\u0143\33\0\1\u0144\3\0\2\u0144\1\0\1\u0144"+
    "\3\0\3\u0144\11\0\1\u0144\5\0\1\u0144\5\0\2\u0144"+
    "\33\0\1\10\1\0\1\10\1\0\4\10\3\0\13\10"+
    "\1\0\1\10\3\0\2\10\1\u0145\16\10\24\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\4\10\1\u0146\6\10"+
    "\1\0\1\10\3\0\21\10\24\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\13\10\1\0\1\10\3\0\11\10"+
    "\1\u0147\7\10\24\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\13\10\1\0\1\10\3\0\11\10\1\u0148\7\10"+
    "\24\0\1\10\1\0\1\10\1\0\4\10\3\0\13\10"+
    "\1\0\1\10\3\0\10\10\1\u0149\10\10\24\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\13\10\1\0\1\10"+
    "\3\0\11\10\1\u014a\7\10\24\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\13\10\1\0\1\10\3\0\11\10"+
    "\1\u014b\7\10\24\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\4\10\1\u014c\6\10\1\0\1\10\3\0\21\10"+
    "\24\0\1\u014d\3\0\2\u014d\1\0\1\u014d\3\0\3\u014d"+
    "\11\0\1\u014d\5\0\1\u014d\5\0\2\u014d\33\0\1\u014e"+
    "\3\0\2\u014e\1\0\1\u014e\3\0\3\u014e\11\0\1\u014e"+
    "\5\0\1\u014e\5\0\2\u014e\33\0\1\u0143\3\0\1\u014f"+
    "\1\u0143\1\0\1\u0143\3\0\3\u0143\11\0\1\u0143\5\0"+
    "\1\u0143\5\0\2\u0143\33\0\1\u0144\3\0\1\u0150\1\u0144"+
    "\1\0\1\u0144\3\0\3\u0144\11\0\1\u0144\5\0\1\u0144"+
    "\5\0\2\u0144\33\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\13\10\1\0\1\10\3\0\11\10\1\u0151\7\10"+
    "\24\0\1\10\1\0\1\10\1\0\4\10\3\0\13\10"+
    "\1\0\1\10\3\0\10\10\1\u0152\10\10\24\0\1\u014d"+
    "\3\0\1\u0153\1\u014d\1\0\1\u014d\3\0\3\u014d\11\0"+
    "\1\u014d\5\0\1\u014d\5\0\2\u014d\33\0\1\u014e\3\0"+
    "\1\u0154\1\u014e\1\0\1\u014e\3\0\3\u014e\11\0\1\u014e"+
    "\5\0\1\u014e\5\0\2\u014e\33\0\1\u0143\3\0\1\u014f"+
    "\1\u0143\1\u0155\1\u0143\3\0\3\u0143\4\0\1\u0155\4\0"+
    "\1\u0143\5\0\1\u0143\5\0\2\u0143\33\0\1\u0144\3\0"+
    "\1\u0150\1\u0144\1\u0156\1\u0144\3\0\3\u0144\4\0\1\u0156"+
    "\4\0\1\u0144\5\0\1\u0144\5\0\2\u0144\33\0\1\u014d"+
    "\3\0\1\u0153\1\u014d\1\u0157\1\u014d\3\0\3\u014d\4\0"+
    "\1\u0157\4\0\1\u014d\5\0\1\u014d\5\0\2\u014d\33\0"+
    "\1\u014e\3\0\1\u0154\1\u014e\1\u0158\1\u014e\3\0\3\u014e"+
    "\4\0\1\u0158\4\0\1\u014e\5\0\1\u014e\5\0\2\u014e"+
    "\33\0\1\u0159\3\0\2\u0159\1\0\1\u0159\3\0\3\u0159"+
    "\11\0\1\u0159\5\0\1\u0159\5\0\2\u0159\33\0\1\u015a"+
    "\3\0\2\u015a\1\0\1\u015a\3\0\3\u015a\11\0\1\u015a"+
    "\5\0\1\u015a\5\0\2\u015a\33\0\1\u015b\3\0\2\u015b"+
    "\1\0\1\u015b\3\0\3\u015b\11\0\1\u015b\5\0\1\u015b"+
    "\5\0\2\u015b\33\0\1\u015c\3\0\2\u015c\1\0\1\u015c"+
    "\3\0\3\u015c\11\0\1\u015c\5\0\1\u015c\5\0\2\u015c"+
    "\33\0\1\u0159\3\0\1\u015d\1\u0159\1\0\1\u0159\3\0"+
    "\3\u0159\11\0\1\u0159\5\0\1\u0159\5\0\2\u0159\33\0"+
    "\1\u015a\3\0\1\u015e\1\u015a\1\0\1\u015a\3\0\3\u015a"+
    "\11\0\1\u015a\5\0\1\u015a\5\0\2\u015a\33\0\1\u015b"+
    "\3\0\1\u015f\1\u015b\1\0\1\u015b\3\0\3\u015b\11\0"+
    "\1\u015b\5\0\1\u015b\5\0\2\u015b\33\0\1\u015c\3\0"+
    "\1\u0160\1\u015c\1\0\1\u015c\3\0\3\u015c\11\0\1\u015c"+
    "\5\0\1\u015c\5\0\2\u015c\33\0\1\u0159\3\0\1\u015d"+
    "\1\u0159\1\u0161\1\u0159\3\0\3\u0159\4\0\1\u0161\4\0"+
    "\1\u0159\5\0\1\u0159\5\0\2\u0159\33\0\1\u015a\3\0"+
    "\1\u015e\1\u015a\1\u0162\1\u015a\3\0\3\u015a\4\0\1\u0162"+
    "\4\0\1\u015a\5\0\1\u015a\5\0\2\u015a\33\0\1\u015b"+
    "\3\0\1\u015f\1\u015b\1\u0163\1\u015b\3\0\3\u015b\4\0"+
    "\1\u0163\4\0\1\u015b\5\0\1\u015b\5\0\2\u015b\33\0"+
    "\1\u015c\3\0\1\u0160\1\u015c\1\u0164\1\u015c\3\0\3\u015c"+
    "\4\0\1\u0164\4\0\1\u015c\5\0\1\u015c\5\0\2\u015c"+
    "\33\0\1\u0165\3\0\2\u0165\1\0\1\u0165\3\0\3\u0165"+
    "\11\0\1\u0165\5\0\1\u0165\5\0\2\u0165\33\0\1\u0166"+
    "\3\0\2\u0166\1\0\1\u0166\3\0\3\u0166\11\0\1\u0166"+
    "\5\0\1\u0166\5\0\2\u0166\33\0\1\62\3\0\2\62"+
    "\1\0\1\62\3\0\3\62\11\0\1\62\5\0\1\62"+
    "\5\0\2\62\33\0\1\u0167\3\0\2\u0167\1\0\1\u0167"+
    "\3\0\3\u0167\11\0\1\u0167\5\0\1\u0167\5\0\2\u0167"+
    "\33\0\1\u0166\3\0\1\u0168\1\u0166\1\0\1\u0166\3\0"+
    "\3\u0166\11\0\1\u0166\5\0\1\u0166\5\0\2\u0166\33\0"+
    "\1\u0167\3\0\1\u0169\1\u0167\1\0\1\u0167\3\0\3\u0167"+
    "\11\0\1\u0167\5\0\1\u0167\5\0\2\u0167\33\0\1\u0166"+
    "\3\0\1\u0168\1\u0166\1\270\1\u0166\3\0\3\u0166\4\0"+
    "\1\270\4\0\1\u0166\5\0\1\u0166\5\0\2\u0166\33\0"+
    "\1\u0167\3\0\1\u0169\1\u0167\1\347\1\u0167\3\0\3\u0167"+
    "\4\0\1\347\4\0\1\u0167\5\0\1\u0167\5\0\2\u0167"+
    "\27\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  9,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9,  9,  9,  9, 
     9,  1,  0,  1,  1,  0,  9,  1,  0,  0,  0,  0,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  9,  9, 
     9,  1,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9,  9,  9,  1,  9,  1, 
     9,  9,  9,  9,  9,  9,  9,  9,  0,  0,  0,  1,  1,  0,  0,  0, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  0,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  9,  9,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  0,  0,  1,  0,  0,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0, 
     0,  1,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0, 
     0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0, 
     1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  1,  0,  0,  0,  0
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	

    public Lexer(ComplexSymbolFactory sf, java.io.InputStream is){
		this(is);
        symbolFactory = sf;
    }
	public Lexer(ComplexSymbolFactory sf, java.io.Reader reader){
		this(reader);
        symbolFactory = sf;
    }
    
    private StringBuffer sb;
    private ComplexSymbolFactory symbolFactory;
    private int csline,cscolumn;

    public Symbol symbol(String name, int code){
		return symbolFactory.newSymbol(name, code,
						new Location(yyline+1,yycolumn+1, yychar), // -yylength()
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength())
				);
    }
    public Symbol symbol(String name, int code, String lexem){
	return symbolFactory.newSymbol(name, code, 
						new Location(yyline+1, yycolumn +1, yychar), 
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength()), lexem);
    }
    
    protected void emit_warning(String message){
    	System.out.println("scanner warning: " + message + " at : 2 "+ 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }
    
    protected void emit_error(String message){
    	System.out.println("scanner error: " + message + " at : 2" + 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[17728];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2314) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 319: 
          {  return symbolFactory.newSymbol("DEFAULT", DEFAULT);  }
        case 362: break;
        case 317: 
          {  return symbolFactory.newSymbol("INCLUDE", INCLUDE);  }
        case 363: break;
        case 315: 
          {  return symbolFactory.newSymbol("PRIVATE", PRIVATE);  }
        case 364: break;
        case 311: 
          {  return symbolFactory.newSymbol("VIRTUAL", VIRTUAL);  }
        case 365: break;
        case 310: 
          {  return symbolFactory.newSymbol("TYPEDEF", TYPEDEF);  }
        case 366: break;
        case 83: 
          {  return symbolFactory.newSymbol("ASS_MUL", ASS_MUL);  }
        case 367: break;
        case 82: 
          {  return symbolFactory.newSymbol("ASS_DIV", ASS_DIV);  }
        case 368: break;
        case 80: 
          {  return symbolFactory.newSymbol("ASS_SUB", ASS_SUB);  }
        case 369: break;
        case 54: 
        case 55: 
        case 124: 
        case 232: 
        case 273: 
        case 356: 
          {  return symbolFactory.newSymbol("ESCAPED", ESCAPED);  }
        case 370: break;
        case 47: 
          {  return symbolFactory.newSymbol("CRPAREN", CRPAREN);  }
        case 371: break;
        case 46: 
          {  return symbolFactory.newSymbol("CLPAREN", CLPAREN);  }
        case 372: break;
        case 112: 
          {  return symbolFactory.newSymbol("ASS_AND", ASS_AND);  }
        case 373: break;
        case 113: 
          {  return symbolFactory.newSymbol("LOG_AND", LOG_AND);  }
        case 374: break;
        case 116: 
          {  return symbolFactory.newSymbol("ASS_ADD", ASS_ADD);  }
        case 375: break;
        case 118: 
          {  return symbolFactory.newSymbol("ASS_MOD", ASS_MOD);  }
        case 376: break;
        case 119: 
          {  return symbolFactory.newSymbol("ASS_XOR", ASS_XOR);  }
        case 377: break;
        case 178: 
          {  return symbolFactory.newSymbol("ASS_SHL", ASS_SHL);  }
        case 378: break;
        case 179: 
          {  return symbolFactory.newSymbol("ASS_SHR", ASS_SHR);  }
        case 379: break;
        case 270: 
          {  return symbolFactory.newSymbol("WHILE", WHILE);  }
        case 380: break;
        case 257: 
          {  return symbolFactory.newSymbol("SHORT", SHORT);  }
        case 381: break;
        case 251: 
          {  return symbolFactory.newSymbol("CONST", CONST);  }
        case 382: break;
        case 249: 
          {  return symbolFactory.newSymbol("CLASS", CLASS);  }
        case 383: break;
        case 105: 
          {  return symbolFactory.newSymbol("SCOPE", SCOPE);  }
        case 384: break;
        case 81: 
          {  return symbolFactory.newSymbol("ARROW", ARROW);  }
        case 385: break;
        case 48: 
          {  return symbolFactory.newSymbol("COMMA", COMMA);  }
        case 386: break;
        case 22: 
          {  return symbolFactory.newSymbol("TIMES", TIMES);  }
        case 387: break;
        case 20: 
          {  return symbolFactory.newSymbol("MINUS", MINUS);  }
        case 388: break;
        case 7: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 96: 
        case 97: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 128: 
        case 130: 
        case 131: 
        case 132: 
        case 134: 
        case 136: 
        case 137: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 195: 
        case 196: 
        case 197: 
        case 199: 
        case 200: 
        case 201: 
        case 203: 
        case 204: 
        case 205: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
        case 224: 
        case 226: 
        case 229: 
        case 236: 
        case 238: 
        case 239: 
        case 240: 
        case 241: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 250: 
        case 252: 
        case 253: 
        case 254: 
        case 255: 
        case 256: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 262: 
        case 263: 
        case 264: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 269: 
        case 277: 
        case 279: 
        case 280: 
        case 281: 
        case 282: 
        case 283: 
        case 284: 
        case 285: 
        case 292: 
        case 293: 
        case 295: 
        case 297: 
        case 299: 
        case 307: 
        case 308: 
        case 309: 
        case 312: 
        case 313: 
        case 314: 
        case 316: 
        case 318: 
        case 324: 
        case 330: 
          {  return symbolFactory.newSymbol("IDENT", IDENT);  }
        case 389: break;
        case 33: 
          {  return symbolFactory.newSymbol("COLON", COLON);  }
        case 390: break;
        case 34: 
          {  return symbolFactory.newSymbol("EQUAL", EQUAL);  }
        case 391: break;
        case 235: 
          {  return symbolFactory.newSymbol("BREAK", BREAK);  }
        case 392: break;
        case 237: 
          {  return symbolFactory.newSymbol("FLOAT", FLOAT);  }
        case 393: break;
        case 242: 
          {  return symbolFactory.newSymbol("THROW", THROW);  }
        case 394: break;
        case 247: 
          {  return symbolFactory.newSymbol("UNION", UNION);  }
        case 395: break;
        case 248: 
          {  return symbolFactory.newSymbol("CATCH", CATCH);  }
        case 396: break;
        case 2: 
        case 8: 
        case 19: 
        case 21: 
        case 35: 
        case 41: 
          {  emit_warning("Unrecognized character '" +yytext()+"' -- ignored");  }
        case 397: break;
        case 111: 
          {  return symbolFactory.newSymbol("RIGHTSHIFT", RIGHTSHIFT);  }
        case 398: break;
        case 150: 
          {  return symbolFactory.newSymbol("ARROW_STAR", ARROW_STAR);  }
        case 399: break;
        case 288: 
          {  return symbolFactory.newSymbol("STR", STR);  }
        case 400: break;
        case 79: 
          {  return symbolFactory.newSymbol("DEC", DEC);  }
        case 401: break;
        case 38: 
          {  return symbolFactory.newSymbol("AND", AND);  }
        case 402: break;
        case 42: 
          {  return symbolFactory.newSymbol("XOR", XOR);  }
        case 403: break;
        case 117: 
          {  return symbolFactory.newSymbol("INC", INC);  }
        case 404: break;
        case 129: 
          {  return symbolFactory.newSymbol("ASM", ASM);  }
        case 405: break;
        case 133: 
          {  return symbolFactory.newSymbol("FOR", FOR);  }
        case 406: break;
        case 135: 
          {  return symbolFactory.newSymbol("NEW", NEW);  }
        case 407: break;
        case 138: 
          {  return symbolFactory.newSymbol("TRY", TRY);  }
        case 408: break;
        case 166: 
          {  return symbolFactory.newSymbol("INT", INT);  }
        case 409: break;
        case 331: 
          {  return symbolFactory.newSymbol("OPERATOR", OPERATOR);  }
        case 410: break;
        case 329: 
          {  return symbolFactory.newSymbol("CONTINUE", CONTINUE);  }
        case 411: break;
        case 328: 
          {  return symbolFactory.newSymbol("UNSIGNED", UNSIGNED);  }
        case 412: break;
        case 327: 
          {  return symbolFactory.newSymbol("VOLATILE", VOLATILE);  }
        case 413: break;
        case 326: 
          {  return symbolFactory.newSymbol("TEMPLATE", TEMPLATE);  }
        case 414: break;
        case 325: 
          {  return symbolFactory.newSymbol("REGISTER", REGISTER);  }
        case 415: break;
        case 149: 
          {  return symbolFactory.newSymbol("ELLIPSIS", ELLIPSIS);  }
        case 416: break;
        case 6: 
        case 76: 
          {  return symbolFactory.newSymbol("STRNG", STRNG, yytext());   }
        case 417: break;
        case 36: 
          {  return symbolFactory.newSymbol("SMALLERTHAN", SMALLERTHAN);  }
        case 418: break;
        case 37: 
          {  return symbolFactory.newSymbol("GREATERTHAN", GREATERTHAN);  }
        case 419: break;
        case 40: 
          {  return symbolFactory.newSymbol("PLUS", PLUS);  }
        case 420: break;
        case 43: 
          {  return symbolFactory.newSymbol("SEMI", SEMI);  }
        case 421: break;
        case 185: 
          {  return symbolFactory.newSymbol("AUTO", AUTO);  }
        case 422: break;
        case 194: 
          {  return symbolFactory.newSymbol("THIS", THIS);  }
        case 423: break;
        case 198: 
          {  return symbolFactory.newSymbol("VOID", VOID);  }
        case 424: break;
        case 202: 
          {  return symbolFactory.newSymbol("CASE", CASE);  }
        case 425: break;
        case 206: 
          {  return symbolFactory.newSymbol("CHAR", CHAR);  }
        case 426: break;
        case 207: 
          {  return symbolFactory.newSymbol("LONG", LONG);  }
        case 427: break;
        case 225: 
          {  return symbolFactory.newSymbol("ENUM", ENUM);  }
        case 428: break;
        case 227: 
          {  return symbolFactory.newSymbol("ELSE", ELSE);  }
        case 429: break;
        case 228: 
          {  return symbolFactory.newSymbol("GOTO", GOTO);  }
        case 430: break;
        case 337: 
          {  return symbolFactory.newSymbol("PROTECTED", PROTECTED);  }
        case 431: break;
        case 336: 
          {  return symbolFactory.newSymbol("NAMESPACE", NAMESPACE);  }
        case 432: break;
        case 78: 
          {  return symbolFactory.newSymbol("DOT_START", DOT_START);  }
        case 433: break;
        case 109: 
          {  return symbolFactory.newSymbol("LEFTSHIFT", LEFTSHIFT);  }
        case 434: break;
        case 302: 
          {  return symbolFactory.newSymbol("EXTERN", EXTERN);  }
        case 435: break;
        case 301: 
          {  return symbolFactory.newSymbol("DELETE", DELETE);  }
        case 436: break;
        case 300: 
          {  return symbolFactory.newSymbol("DEFINE", DEFINE);  }
        case 437: break;
        case 298: 
          {  return symbolFactory.newSymbol("DOUBLE", DOUBLE);  }
        case 438: break;
        case 296: 
          {  return symbolFactory.newSymbol("INLINE", INLINE);  }
        case 439: break;
        case 294: 
          {  return symbolFactory.newSymbol("PUBLIC", PUBLIC);  }
        case 440: break;
        case 291: 
          {  return symbolFactory.newSymbol("SWITCH", SWITCH);  }
        case 441: break;
        case 290: 
          {  return symbolFactory.newSymbol("SIZEOF", SIZEOF);  }
        case 442: break;
        case 289: 
          {  return symbolFactory.newSymbol("SIGNED", SIGNED);  }
        case 443: break;
        case 287: 
          {  return symbolFactory.newSymbol("STRUCT", STRUCT);  }
        case 444: break;
        case 286: 
          {  return symbolFactory.newSymbol("STATIC", STATIC);  }
        case 445: break;
        case 278: 
          {  return symbolFactory.newSymbol("RETURN", RETURN);  }
        case 446: break;
        case 276: 
          {  return symbolFactory.newSymbol("FRIEND", FRIEND);  }
        case 447: break;
        case 52: 
        case 123: 
          {  return symbolFactory.newSymbol("STRING", STRING);  }
        case 448: break;
        case 45: 
          {  return symbolFactory.newSymbol("RPAREN", RPAREN);  }
        case 449: break;
        case 44: 
          {  return symbolFactory.newSymbol("LPAREN", LPAREN);  }
        case 450: break;
        case 114: 
          {  return symbolFactory.newSymbol("ASS_OR", ASS_OR);  }
        case 451: break;
        case 115: 
          {  return symbolFactory.newSymbol("LOG_OR", LOG_OR);  }
        case 452: break;
        case 9: 
          {  return symbolFactory.newSymbol("CHARACTER", CHARACTER, yytext());  }
        case 453: break;
        case 106: 
          {  return symbolFactory.newSymbol("EQ", EQ);  }
        case 454: break;
        case 98: 
          {  return symbolFactory.newSymbol("DO", DO);  }
        case 455: break;
        case 95: 
          {  return symbolFactory.newSymbol("IF", IF);  }
        case 456: break;
        case 39: 
          {  return symbolFactory.newSymbol("OR", OR);  }
        case 457: break;
        case 107: 
          {  return symbolFactory.newSymbol("NE", NE);  }
        case 458: break;
        case 108: 
          {  return symbolFactory.newSymbol("LE", LE);  }
        case 459: break;
        case 110: 
          {  return symbolFactory.newSymbol("GE", GE);  }
        case 460: break;
        case 49: 
        case 51: 
          {  return symbolFactory.newSymbol("PPNUMBER", PPNUMBER, Integer.parseInt(yytext()));  }
        case 461: break;
        case 5: 
          {  return symbolFactory.newSymbol("NUMBER", NUMBER, Integer.parseInt(yytext()));  }
        case 462: break;
        case 3: 
        case 4: 
          {                                }
        case 463: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return symbolFactory.newSymbol("EOF",sym.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
