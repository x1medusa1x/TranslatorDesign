/* The following code was generated by JFlex 1.3.5 on 11/23/22, 10:44 PM */

package cup.example;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java.lang.*;
import java.io.InputStreamReader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 11/23/22, 10:44 PM from the specification file
 * <tt>file:/C:/Users/alini/eclipse-workspace/TranslatorDesign/TD_extra/lexer.jflex</tt>
 */
public class Lexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int CODESEG = 1;
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\40\1\3\1\2\1\0\1\3\1\1\16\40\4\0\1\7\1\62"+
    "\1\5\1\103\1\36\1\70\1\65\1\15\1\74\1\77\1\35\1\67"+
    "\1\102\1\33\1\31\1\34\1\10\7\11\2\4\1\60\1\72\1\63"+
    "\1\61\1\64\1\16\1\0\4\13\1\32\1\13\5\6\1\6\10\6"+
    "\1\30\2\6\1\12\2\6\1\75\1\14\1\76\1\71\1\37\1\0"+
    "\1\17\1\20\1\41\1\47\1\50\1\21\1\51\1\52\1\45\1\6"+
    "\1\54\1\42\1\53\1\22\1\46\1\44\1\6\1\23\1\43\1\24"+
    "\1\27\1\25\1\55\1\26\1\57\1\56\1\100\1\66\1\101\1\73"+
    "\41\40\2\0\4\36\4\0\1\36\2\0\1\40\7\0\1\36\4\0"+
    "\1\36\5\0\27\36\1\0\37\36\1\0\u01ca\36\4\0\14\36\16\0"+
    "\5\36\7\0\1\36\1\0\1\36\21\0\160\40\5\36\1\0\2\36"+
    "\2\0\4\36\1\0\1\36\6\0\1\36\1\0\3\36\1\0\1\36"+
    "\1\0\24\36\1\0\123\36\1\0\213\36\1\0\5\40\2\0\246\36"+
    "\1\0\46\36\2\0\1\36\7\0\47\36\7\0\1\36\1\0\55\40"+
    "\1\0\1\40\1\0\2\40\1\0\2\40\1\0\1\40\10\0\33\36"+
    "\5\0\3\36\15\0\6\40\5\0\1\36\4\0\13\40\1\0\1\40"+
    "\3\0\53\36\37\40\4\0\2\36\1\40\143\36\1\0\1\36\10\40"+
    "\1\0\6\40\2\36\2\40\1\0\4\40\2\36\12\40\3\36\2\0"+
    "\1\36\17\0\1\40\1\36\1\40\36\36\33\40\2\0\131\36\13\40"+
    "\1\36\16\0\12\40\41\36\11\40\2\36\4\0\1\36\5\0\26\36"+
    "\4\40\1\36\11\40\1\36\3\40\1\36\5\40\22\0\31\36\3\40"+
    "\4\0\13\36\65\0\25\36\1\0\10\36\26\0\60\40\66\36\3\40"+
    "\1\36\22\40\1\36\7\40\12\36\2\40\2\0\12\40\1\0\20\36"+
    "\3\40\1\0\10\36\2\0\2\36\2\0\26\36\1\0\7\36\1\0"+
    "\1\36\3\0\4\36\2\0\1\40\1\36\7\40\2\0\2\40\2\0"+
    "\3\40\1\36\10\0\1\40\4\0\2\36\1\0\3\36\2\40\2\0"+
    "\12\40\4\36\7\0\2\36\4\0\3\40\1\0\6\36\4\0\2\36"+
    "\2\0\26\36\1\0\7\36\1\0\2\36\1\0\2\36\1\0\2\36"+
    "\2\0\1\40\1\0\5\40\4\0\2\40\2\0\3\40\3\0\1\40"+
    "\7\0\4\36\1\0\1\36\7\0\14\40\3\36\1\40\13\0\3\40"+
    "\1\0\11\36\1\0\3\36\1\0\26\36\1\0\7\36\1\0\2\36"+
    "\1\0\5\36\2\0\1\40\1\36\10\40\1\0\3\40\1\0\3\40"+
    "\2\0\1\36\17\0\2\36\2\40\2\0\12\40\1\0\1\36\7\0"+
    "\1\36\6\40\1\0\3\40\1\0\10\36\2\0\2\36\2\0\26\36"+
    "\1\0\7\36\1\0\2\36\1\0\5\36\2\0\1\40\1\36\7\40"+
    "\2\0\2\40\2\0\3\40\10\0\2\40\4\0\2\36\1\0\3\36"+
    "\2\40\2\0\12\40\1\0\1\36\20\0\1\40\1\36\1\0\6\36"+
    "\3\0\3\36\1\0\4\36\3\0\2\36\1\0\1\36\1\0\2\36"+
    "\3\0\2\36\3\0\3\36\3\0\14\36\4\0\5\40\3\0\3\40"+
    "\1\0\4\40\2\0\1\36\6\0\1\40\16\0\12\40\11\0\1\36"+
    "\6\0\4\40\1\0\10\36\1\0\3\36\1\0\27\36\1\0\20\36"+
    "\3\0\1\36\7\40\1\0\3\40\1\0\4\40\7\0\2\40\1\0"+
    "\3\36\5\0\2\36\2\40\2\0\12\40\20\0\1\36\3\40\1\0"+
    "\10\36\1\0\3\36\1\0\27\36\1\0\12\36\1\0\5\36\2\0"+
    "\1\40\1\36\7\40\1\0\3\40\1\0\4\40\7\0\2\40\7\0"+
    "\1\36\1\0\2\36\2\40\2\0\12\40\1\0\2\36\15\0\4\40"+
    "\1\0\10\36\1\0\3\36\1\0\51\36\2\40\1\36\7\40\1\0"+
    "\3\40\1\0\4\40\1\36\5\0\3\36\1\40\7\0\3\36\2\40"+
    "\2\0\12\40\12\0\6\36\2\0\2\40\1\0\22\36\3\0\30\36"+
    "\1\0\11\36\1\0\1\36\2\0\7\36\3\0\1\40\4\0\6\40"+
    "\1\0\1\40\1\0\10\40\6\0\12\40\2\0\2\40\15\0\60\36"+
    "\1\40\2\36\7\40\4\0\10\36\10\40\1\0\12\40\47\0\2\36"+
    "\1\0\1\36\2\0\2\36\1\0\1\36\2\0\1\36\6\0\4\36"+
    "\1\0\7\36\1\0\3\36\1\0\1\36\1\0\1\36\2\0\2\36"+
    "\1\0\4\36\1\40\2\36\6\40\1\0\2\40\1\36\2\0\5\36"+
    "\1\0\1\36\1\0\6\40\2\0\12\40\2\0\4\36\40\0\1\36"+
    "\27\0\2\40\6\0\12\40\13\0\1\40\1\0\1\40\1\0\1\40"+
    "\4\0\2\40\10\36\1\0\44\36\4\0\24\40\1\0\2\40\5\36"+
    "\13\40\1\0\44\40\11\0\1\40\71\0\53\36\24\40\1\36\12\40"+
    "\6\0\6\36\4\40\4\36\3\40\1\36\3\40\2\36\7\40\3\36"+
    "\4\40\15\36\14\40\1\36\17\40\2\0\46\36\1\0\1\36\5\0"+
    "\1\36\2\0\53\36\1\0\u014d\36\1\0\4\36\2\0\7\36\1\0"+
    "\1\36\1\0\4\36\2\0\51\36\1\0\4\36\2\0\41\36\1\0"+
    "\4\36\2\0\7\36\1\0\1\36\1\0\4\36\2\0\17\36\1\0"+
    "\71\36\1\0\4\36\2\0\103\36\2\0\3\40\40\0\20\36\20\0"+
    "\126\36\2\0\6\36\3\0\u026c\36\2\0\21\36\1\0\32\36\5\0"+
    "\113\36\3\0\13\36\7\0\15\36\1\0\4\36\3\40\13\0\22\36"+
    "\3\40\13\0\22\36\2\40\14\0\15\36\1\0\3\36\1\0\2\40"+
    "\14\0\64\36\40\40\3\0\1\36\3\0\2\36\1\40\2\0\12\40"+
    "\41\0\4\40\1\0\12\40\6\0\130\36\10\0\5\36\2\40\42\36"+
    "\1\40\1\36\5\0\106\36\12\0\37\36\1\0\14\40\4\0\14\40"+
    "\12\0\12\40\36\36\2\0\5\36\13\0\54\36\4\0\32\36\6\0"+
    "\12\40\46\0\27\36\5\40\4\0\65\36\12\40\1\0\35\40\2\0"+
    "\13\40\6\0\12\40\15\0\1\36\10\0\16\40\102\0\5\40\57\36"+
    "\21\40\7\36\4\0\12\40\21\0\11\40\14\0\3\40\36\36\15\40"+
    "\2\36\12\40\54\36\16\40\14\0\44\36\24\40\10\0\12\40\3\0"+
    "\3\36\12\40\44\36\2\0\11\36\107\0\3\40\1\0\25\40\4\36"+
    "\1\40\4\36\3\40\2\36\3\40\6\0\300\36\72\40\1\0\5\40"+
    "\u0116\36\2\0\6\36\2\0\46\36\2\0\6\36\2\0\10\36\1\0"+
    "\1\36\1\0\1\36\1\0\1\36\1\0\37\36\2\0\65\36\1\0"+
    "\7\36\1\0\1\36\3\0\3\36\1\0\7\36\3\0\4\36\2\0"+
    "\6\36\4\0\15\36\5\0\3\36\1\0\7\36\16\0\5\40\32\0"+
    "\5\40\20\0\2\36\23\0\1\36\13\0\5\40\1\0\12\40\1\0"+
    "\1\36\15\0\1\36\20\0\15\36\3\0\40\36\20\0\15\40\4\0"+
    "\1\40\3\0\14\40\21\0\1\36\4\0\1\36\2\0\12\36\1\0"+
    "\1\36\3\0\5\36\6\0\1\36\1\0\1\36\1\0\1\36\1\0"+
    "\4\36\1\0\13\36\2\0\4\36\5\0\5\36\4\0\1\36\21\0"+
    "\51\36\u0a77\0\57\36\1\0\57\36\1\0\205\36\6\0\4\36\3\40"+
    "\2\36\14\0\46\36\1\0\1\36\5\0\1\36\2\0\70\36\7\0"+
    "\1\36\17\0\1\40\27\36\11\0\7\36\1\0\7\36\1\0\7\36"+
    "\1\0\7\36\1\0\7\36\1\0\7\36\1\0\7\36\1\0\7\36"+
    "\1\0\40\40\57\0\1\36\u01d5\0\3\36\31\0\11\36\6\40\1\0"+
    "\5\36\2\0\5\36\4\0\126\36\2\0\2\40\2\0\3\36\1\0"+
    "\132\36\1\0\4\36\5\0\52\36\2\0\136\36\21\0\33\36\65\0"+
    "\20\36\u0200\0\u19b6\36\112\0\u51eb\36\25\0\u048d\36\103\0\56\36\2\0"+
    "\u010d\36\3\0\20\36\12\40\2\36\24\0\57\36\1\40\4\0\12\40"+
    "\1\0\37\36\2\40\120\36\2\40\45\0\11\36\2\0\147\36\2\0"+
    "\44\36\1\0\10\36\77\0\13\36\1\40\3\36\1\40\4\36\1\40"+
    "\27\36\5\40\20\0\1\36\7\0\64\36\14\0\2\40\62\36\22\40"+
    "\12\0\12\40\6\0\22\40\6\36\3\0\1\36\1\0\1\36\2\0"+
    "\12\40\34\36\10\40\2\0\27\36\15\40\14\0\35\36\3\0\4\40"+
    "\57\36\16\40\16\0\1\36\12\40\6\0\5\36\1\40\12\36\12\40"+
    "\5\36\1\0\51\36\16\40\11\0\3\36\1\40\10\36\2\40\2\0"+
    "\12\40\6\0\27\36\3\0\1\36\3\40\62\36\1\40\1\36\3\40"+
    "\2\36\2\40\5\36\2\40\1\36\1\40\1\36\30\0\3\36\2\0"+
    "\13\36\5\40\2\0\3\36\2\40\12\0\6\36\2\0\6\36\2\0"+
    "\6\36\11\0\7\36\1\0\7\36\1\0\53\36\1\0\12\36\12\0"+
    "\163\36\10\40\1\0\2\40\2\0\12\40\6\0\u2ba4\36\14\0\27\36"+
    "\4\0\61\36\u2104\0\u016e\36\2\0\152\36\46\0\7\36\14\0\5\36"+
    "\5\0\1\36\1\40\12\36\1\0\15\36\1\0\5\36\1\0\1\36"+
    "\1\0\2\36\1\0\2\36\1\0\154\36\41\0\u016b\36\22\0\100\36"+
    "\2\0\66\36\50\0\15\36\3\0\20\40\20\0\20\40\3\0\2\36"+
    "\30\0\3\36\31\0\1\36\6\0\5\36\1\0\207\36\2\0\1\40"+
    "\4\0\1\36\13\0\12\40\7\0\32\36\4\0\1\36\1\0\32\36"+
    "\13\0\131\36\3\0\6\36\2\0\6\36\2\0\6\36\2\0\3\36"+
    "\3\0\2\36\3\0\2\36\22\0\3\40\4\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    68,   136,   204,   136,   272,   340,   408,   476,   544, 
      136,   612,   680,   748,   816,   884,   952,  1020,  1088,  1156, 
     1224,  1292,  1360,  1428,  1496,  1564,  1632,  1700,  1768,  1836, 
     1904,  1972,  2040,  2108,  2176,  2244,  2312,  2380,  2448,  2516, 
     2584,  2652,  2720,  2788,   136,   136,   136,   136,   136,   136, 
      136,   136,   136,   136,  2856,  2924,  2992,   340,   340,   136, 
     3060,  3128,  3196,  3264,  3332,  3400,  3468,  3536,  3604,  3672, 
     3740,  3808,  3876,  3944,  4012,  4080,  4148,  4216,  4284,  4352, 
     4420,  4488,  4556,  4624,  4692,   136,   136,   136,  4760,   136, 
      136,  4828,  4896,  4964,  5032,  5100,  5168,  5236,  5304,  5372, 
     5440,  5508,   408,  5576,  5644,  5712,  5780,  5848,  5916,  5984, 
     6052,  6120,  6188,  6256,   136,   136,   136,   136,  6324,   136, 
     6392,   136,   136,   136,   136,   136,   136,   136,   136,  6460, 
     6528,  6596,  6664,  6732,  6800,   136,  6868,   408,  6936,  7004, 
     7072,  7140,  7208,   408,  7276,   408,  7344,  7412,  7480,  7548, 
      408,  7616,  7684,  7752,  7820,  7888,  7956,  8024,  8092,  8160, 
     8228,   136,   136,  8296,  8364,  8432,  8500,  8568,  8636,  8704, 
     8772,  8840,  8908,  8976,  9044,  9112,  9180,  9248,   408,  9316, 
     9384,  9452,  9520,  9588,  9656,  9724,  9792,  9860,  9928,  9996, 
    10064, 10132, 10200,   136,   136, 10268, 10336, 10404, 10472, 10540, 
      408, 10608,   408, 10676, 10744, 10812, 10880, 10948, 11016, 11084, 
      408, 11152, 11220,   408, 11288, 11356, 11424,   408, 11492, 11560, 
    11628, 11696,   408, 11764, 11832, 11900,   408,   408, 11968, 12036, 
    12104, 12172, 12240, 12308, 12376, 12444, 12512, 12580, 12648, 12716, 
    12784, 12852, 12920, 12988, 13056, 13124,   408, 13192, 13260, 13328, 
      408,   408, 13396, 13464, 13532, 13600, 13668, 13736, 13804,   408, 
      408, 13872,   408, 13940, 14008, 14076, 14144, 14212,   408, 14280, 
    14348, 14416, 14484, 14552, 14620,   408,   408,   408,   408, 14688, 
    14756, 14824, 14892, 14960, 15028, 15096,   408, 15164, 15232, 15300, 
    15368, 15436, 15504, 15572, 15640, 15708, 15776, 15844, 15912, 15980, 
    16048, 16116, 16184,   408, 16252, 16320, 16388, 16456, 16524,   408, 
    16592,   408, 16660, 16728, 16796, 16864,   408, 16932, 17000, 17068, 
    17136, 17204, 17272, 17340,   408,   408,   408,   408,   408, 17408, 
    17476,   408, 17544,   408, 17612,   408, 17680,   408,   408, 17748, 
      408, 17816,   408, 17884, 17952, 18020, 18088, 18156, 18224, 18292, 
    18360, 18428, 18496,   408,   408, 18564, 18632, 18700, 18768, 18836, 
      408, 18904,   408, 18972,   408, 19040, 19108,   408, 19176, 19244, 
    19312, 19380, 19448, 19516,   408,   408,   408,   408,   408,   408, 
    19584, 19652, 19720,   408, 19788,   408, 19856, 19924, 19992, 20060, 
      408, 20128, 20196, 20264,   408, 20332, 20400, 20468, 20536, 20604, 
    20672,   408, 20740, 20808, 20876, 20944, 21012, 21080, 21148,   408, 
    21216, 21284, 21352, 21420, 21488, 21556,   408, 21624, 21692, 21760, 
    21828, 21896, 21964, 22032, 21760, 22100, 22168, 22236, 22304, 22372, 
    22440,   408
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\5\2\6"+
    "\2\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\10\1\23\1\10\1\24\1\10"+
    "\1\25\1\26\1\27\2\10\1\3\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\10\1\41"+
    "\1\10\1\42\2\10\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\104\3"+
    "\106\0\1\5\105\0\1\6\1\0\2\67\2\6\2\67"+
    "\1\70\2\0\13\67\1\71\6\0\7\67\1\71\7\67"+
    "\24\0\2\72\1\0\2\72\1\73\76\72\4\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\12\10\1\0\1\10"+
    "\3\0\22\10\31\0\1\74\2\0\2\75\2\0\12\74"+
    "\1\76\1\77\1\100\53\0\2\101\1\0\101\101\4\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\10\10\1\102"+
    "\1\10\1\0\1\10\3\0\5\10\1\103\14\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\4\10\1\104"+
    "\5\10\1\0\1\10\3\0\10\10\1\105\11\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\1\106\3\10"+
    "\1\107\5\10\1\0\1\10\3\0\4\10\1\110\3\10"+
    "\1\111\11\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\1\112\11\10\1\0\1\10\3\0\12\10\1\113"+
    "\7\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\12\10\1\0\1\10\3\0\12\10\1\114\7\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\4\10\1\115"+
    "\5\10\1\0\1\10\3\0\12\10\1\116\1\10\1\117"+
    "\4\10\1\120\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\12\10\1\0\1\10\3\0\7\10\1\121\1\122"+
    "\11\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\3\10\1\123\6\10\1\0\1\10\3\0\5\10\1\124"+
    "\14\10\30\0\1\67\3\0\2\67\17\0\1\125\3\0"+
    "\1\126\101\0\1\127\25\0\1\130\2\0\1\131\100\0"+
    "\1\132\103\0\1\133\26\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\1\134\11\10\1\0\1\10\3\0\4\10"+
    "\1\135\3\10\1\136\3\10\1\137\5\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\12\10\1\0\1\10"+
    "\3\0\10\10\1\140\11\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\5\10\1\141\4\10\1\0\1\10"+
    "\3\0\7\10\1\142\4\10\1\143\2\10\1\144\2\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\4\10"+
    "\1\145\3\10\1\146\1\10\1\0\1\10\3\0\22\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\2\10"+
    "\1\147\1\150\6\10\1\0\1\10\3\0\22\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\12\10\1\0"+
    "\1\10\3\0\6\10\1\151\13\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\12\10\1\0\1\10\3\0"+
    "\10\10\1\152\1\10\1\153\6\10\1\154\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\3\10\1\155\3\10"+
    "\1\156\2\10\1\0\1\10\3\0\4\10\1\157\15\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\12\10"+
    "\1\0\1\10\3\0\10\10\1\160\11\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\10\10\1\161\1\10"+
    "\1\0\1\10\3\0\22\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\12\10\1\0\1\10\3\0\14\10"+
    "\1\162\5\10\104\0\1\163\104\0\1\164\103\0\1\165"+
    "\103\0\1\166\1\0\1\167\101\0\1\170\2\0\1\171"+
    "\100\0\1\172\3\0\1\173\77\0\1\174\4\0\1\175"+
    "\76\0\1\176\5\0\1\177\75\0\1\200\103\0\1\201"+
    "\26\0\1\67\1\0\6\67\1\70\2\0\13\67\1\71"+
    "\6\0\7\67\1\71\7\67\53\0\1\202\1\203\57\0"+
    "\1\67\1\0\6\67\1\70\2\0\13\67\1\71\1\67"+
    "\5\0\7\67\1\71\7\67\7\0\1\67\24\0\2\204"+
    "\102\0\1\205\103\0\1\206\103\0\1\207\110\0\1\210"+
    "\72\0\1\10\1\0\1\10\1\0\4\10\3\0\5\10"+
    "\1\211\4\10\1\0\1\10\3\0\22\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\12\10\1\0\1\10"+
    "\3\0\15\10\1\212\4\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\12\10\1\0\1\10\3\0\12\10"+
    "\1\213\7\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\12\10\1\0\1\10\3\0\10\10\1\214\11\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\12\10"+
    "\1\0\1\10\3\0\4\10\1\215\15\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\12\10\1\0\1\10"+
    "\3\0\7\10\1\216\12\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\12\10\1\0\1\10\3\0\10\10"+
    "\1\217\11\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\4\10\1\220\5\10\1\0\1\10\3\0\22\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\12\10"+
    "\1\0\1\10\3\0\15\10\1\221\4\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\12\10\1\0\1\10"+
    "\3\0\17\10\1\222\2\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\5\10\1\223\4\10\1\0\1\10"+
    "\3\0\7\10\1\224\3\10\1\225\6\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\10\10\1\226\1\10"+
    "\1\0\1\10\3\0\21\10\1\227\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\12\10\1\0\1\10\3\0"+
    "\15\10\1\230\4\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\4\10\1\231\5\10\1\0\1\10\3\0"+
    "\7\10\1\232\12\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\12\10\1\0\1\10\3\0\6\10\1\233"+
    "\13\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\4\10\1\234\5\10\1\0\1\10\3\0\22\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\12\10\1\0"+
    "\1\10\3\0\4\10\1\235\2\10\1\236\12\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\12\10\1\0"+
    "\1\10\3\0\5\10\1\237\1\10\1\240\12\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\12\10\1\0"+
    "\1\10\3\0\7\10\1\241\12\10\55\0\1\242\107\0"+
    "\1\243\52\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\5\10\1\244\4\10\1\0\1\10\3\0\5\10\1\245"+
    "\14\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\1\246\11\10\1\0\1\10\3\0\22\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\3\10\1\247\6\10"+
    "\1\0\1\10\3\0\22\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\1\250\11\10\1\0\1\10\3\0"+
    "\22\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\3\10\1\251\6\10\1\0\1\10\3\0\22\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\1\252\3\10"+
    "\1\253\5\10\1\0\1\10\3\0\22\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\12\10\1\0\1\10"+
    "\3\0\13\10\1\254\4\10\1\255\1\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\12\10\1\0\1\10"+
    "\3\0\10\10\1\256\11\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\12\10\1\0\1\10\3\0\7\10"+
    "\1\257\12\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\12\10\1\0\1\10\3\0\7\10\1\260\1\261"+
    "\11\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\1\10\1\262\10\10\1\0\1\10\3\0\22\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\5\10\1\263"+
    "\4\10\1\0\1\10\3\0\3\10\1\264\1\265\15\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\12\10"+
    "\1\0\1\10\3\0\12\10\1\266\7\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\10\10\1\267\1\10"+
    "\1\0\1\10\3\0\22\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\2\10\1\270\7\10\1\0\1\10"+
    "\3\0\4\10\1\271\15\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\3\10\1\272\6\10\1\0\1\10"+
    "\3\0\22\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\10\10\1\273\1\10\1\0\1\10\3\0\22\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\5\10"+
    "\1\274\4\10\1\0\1\10\3\0\6\10\1\275\13\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\12\10"+
    "\1\0\1\10\3\0\5\10\1\276\14\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\5\10\1\277\4\10"+
    "\1\0\1\10\3\0\22\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\5\10\1\300\4\10\1\0\1\10"+
    "\3\0\22\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\12\10\1\0\1\10\3\0\7\10\1\301\12\10"+
    "\105\0\1\302\103\0\1\303\32\0\1\304\103\0\1\305"+
    "\103\0\2\74\104\0\1\306\13\0\1\306\67\0\1\307"+
    "\13\0\1\307\67\0\1\310\13\0\1\310\61\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\12\10\1\0\1\10"+
    "\3\0\10\10\1\311\11\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\1\312\11\10\1\0\1\10\3\0"+
    "\22\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\12\10\1\0\1\10\3\0\4\10\1\313\15\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\12\10\1\0"+
    "\1\10\3\0\5\10\1\314\14\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\12\10\1\0\1\10\3\0"+
    "\12\10\1\315\7\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\1\316\11\10\1\0\1\10\3\0\22\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\12\10"+
    "\1\0\1\10\3\0\12\10\1\317\7\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\10\10\1\320\1\10"+
    "\1\0\1\10\3\0\22\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\3\10\1\321\6\10\1\0\1\10"+
    "\3\0\22\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\12\10\1\0\1\10\3\0\7\10\1\322\12\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\12\10"+
    "\1\0\1\10\3\0\12\10\1\323\7\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\12\10\1\0\1\10"+
    "\3\0\6\10\1\324\13\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\12\10\1\0\1\10\3\0\10\10"+
    "\1\325\11\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\12\10\1\0\1\10\3\0\5\10\1\326\14\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\12\10"+
    "\1\0\1\10\3\0\12\10\1\327\7\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\5\10\1\330\4\10"+
    "\1\0\1\10\3\0\22\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\1\331\11\10\1\0\1\10\3\0"+
    "\22\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\12\10\1\0\1\10\3\0\11\10\1\332\10\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\12\10\1\0"+
    "\1\10\3\0\7\10\1\333\12\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\12\10\1\0\1\10\3\0"+
    "\10\10\1\334\11\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\3\10\1\335\6\10\1\0\1\10\3\0"+
    "\22\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\12\10\1\0\1\10\3\0\3\10\1\336\16\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\12\10\1\0"+
    "\1\10\3\0\12\10\1\337\7\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\12\10\1\0\1\10\3\0"+
    "\5\10\1\340\14\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\5\10\1\341\4\10\1\0\1\10\3\0"+
    "\5\10\1\342\14\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\4\10\1\343\5\10\1\0\1\10\3\0"+
    "\22\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\12\10\1\0\1\10\3\0\13\10\1\344\6\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\5\10\1\345"+
    "\4\10\1\0\1\10\3\0\22\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\10\10\1\346\1\10\1\0"+
    "\1\10\3\0\7\10\1\347\12\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\3\10\1\350\6\10\1\0"+
    "\1\10\3\0\22\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\12\10\1\0\1\10\3\0\12\10\1\351"+
    "\7\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\4\10\1\352\5\10\1\0\1\10\3\0\22\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\5\10\1\353"+
    "\4\10\1\0\1\10\3\0\22\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\6\10\1\354\3\10\1\0"+
    "\1\10\3\0\22\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\5\10\1\355\4\10\1\0\1\10\3\0"+
    "\22\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\12\10\1\0\1\10\3\0\4\10\1\356\15\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\12\10\1\0"+
    "\1\10\3\0\4\10\1\357\15\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\12\10\1\0\1\10\3\0"+
    "\7\10\1\360\12\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\4\10\1\361\5\10\1\0\1\10\3\0"+
    "\22\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\1\10\1\362\10\10\1\0\1\10\3\0\22\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\1\363\11\10"+
    "\1\0\1\10\3\0\7\10\1\364\12\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\12\10\1\0\1\10"+
    "\3\0\12\10\1\365\7\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\1\366\11\10\1\0\1\10\3\0"+
    "\22\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\12\10\1\0\1\10\3\0\15\10\1\367\4\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\12\10\1\0"+
    "\1\10\3\0\12\10\1\370\7\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\12\10\1\0\1\10\3\0"+
    "\4\10\1\371\3\10\1\372\11\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\12\10\1\0\1\10\3\0"+
    "\12\10\1\373\7\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\12\10\1\0\1\10\3\0\10\10\1\374"+
    "\11\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\1\375\11\10\1\0\1\10\3\0\22\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\12\10\1\0\1\10"+
    "\3\0\4\10\1\376\15\10\36\0\1\377\13\0\1\377"+
    "\67\0\1\u0100\13\0\1\u0100\61\0\1\u0101\3\0\2\u0101"+
    "\1\0\1\u0101\3\0\3\u0101\10\0\1\u0101\6\0\1\u0101"+
    "\5\0\2\u0101\37\0\1\u0102\3\0\2\u0102\1\0\1\u0102"+
    "\3\0\3\u0102\10\0\1\u0102\6\0\1\u0102\5\0\2\u0102"+
    "\37\0\1\u0103\3\0\2\u0103\1\0\1\u0103\3\0\3\u0103"+
    "\10\0\1\u0103\6\0\1\u0103\5\0\2\u0103\37\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\12\10\1\0\1\10"+
    "\3\0\16\10\1\u0104\3\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\12\10\1\0\1\10\3\0\12\10"+
    "\1\u0105\7\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\3\10\1\u0106\6\10\1\0\1\10\3\0\22\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\5\10"+
    "\1\u0107\4\10\1\0\1\10\3\0\22\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\12\10\1\0\1\10"+
    "\3\0\5\10\1\u0108\14\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\4\10\1\u0109\5\10\1\0\1\10"+
    "\3\0\22\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\5\10\1\u010a\4\10\1\0\1\10\3\0\22\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\12\10"+
    "\1\0\1\10\3\0\5\10\1\u010b\14\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\12\10\1\0\1\10"+
    "\3\0\4\10\1\u010c\15\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\12\10\1\0\1\10\3\0\17\10"+
    "\1\u010d\2\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\3\10\1\u010e\6\10\1\0\1\10\3\0\7\10"+
    "\1\u010f\1\10\1\u0110\10\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\10\10\1\u0111\1\10\1\0\1\10"+
    "\3\0\22\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\5\10\1\u0112\4\10\1\0\1\10\3\0\22\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\12\10"+
    "\1\0\1\10\3\0\13\10\1\u0113\6\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\3\10\1\u0114\6\10"+
    "\1\0\1\10\3\0\22\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\12\10\1\0\1\10\3\0\13\10"+
    "\1\u0115\6\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\12\10\1\0\1\10\3\0\14\10\1\u0116\5\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\12\10"+
    "\1\0\1\10\3\0\5\10\1\u0117\14\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\12\10\1\0\1\10"+
    "\3\0\7\10\1\u0118\12\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\5\10\1\u0119\4\10\1\0\1\10"+
    "\3\0\22\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\12\10\1\0\1\10\3\0\7\10\1\u011a\12\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\12\10"+
    "\1\0\1\10\3\0\3\10\1\u011b\16\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\3\10\1\u011c\6\10"+
    "\1\0\1\10\3\0\22\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\12\10\1\0\1\10\3\0\12\10"+
    "\1\u011d\7\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\12\10\1\0\1\10\3\0\10\10\1\u011e\11\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\5\10"+
    "\1\u011f\4\10\1\0\1\10\3\0\22\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\12\10\1\0\1\10"+
    "\3\0\3\10\1\u0120\16\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\1\u0121\11\10\1\0\1\10\3\0"+
    "\22\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\12\10\1\0\1\10\3\0\12\10\1\u0122\7\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\12\10\1\0"+
    "\1\10\3\0\7\10\1\u0123\12\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\10\10\1\u0124\1\10\1\0"+
    "\1\10\3\0\22\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\3\10\1\u0125\6\10\1\0\1\10\3\0"+
    "\22\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\1\u0126\11\10\1\0\1\10\3\0\22\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\12\10\1\0\1\10"+
    "\3\0\4\10\1\u0127\15\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\10\10\1\u0128\1\10\1\0\1\10"+
    "\3\0\22\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\3\10\1\u0129\6\10\1\0\1\10\3\0\22\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\5\10"+
    "\1\u012a\4\10\1\0\1\10\3\0\22\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\12\10\1\0\1\10"+
    "\3\0\15\10\1\u012b\4\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\4\10\1\u012c\5\10\1\0\1\10"+
    "\3\0\22\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\12\10\1\0\1\10\3\0\7\10\1\u012d\12\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\4\10"+
    "\1\u012e\5\10\1\0\1\10\3\0\22\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\1\10\1\u012f\10\10"+
    "\1\0\1\10\3\0\22\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\12\10\1\0\1\10\3\0\12\10"+
    "\1\u0130\7\10\30\0\1\u0131\3\0\2\u0131\1\0\1\u0131"+
    "\3\0\3\u0131\10\0\1\u0131\6\0\1\u0131\5\0\2\u0131"+
    "\37\0\1\u0132\3\0\2\u0132\1\0\1\u0132\3\0\3\u0132"+
    "\10\0\1\u0132\6\0\1\u0132\5\0\2\u0132\37\0\1\u0101"+
    "\3\0\1\u0133\1\u0101\1\0\1\u0101\3\0\3\u0101\10\0"+
    "\1\u0101\6\0\1\u0101\5\0\2\u0101\37\0\1\u0102\3\0"+
    "\1\u0134\1\u0102\1\0\1\u0102\3\0\3\u0102\10\0\1\u0102"+
    "\6\0\1\u0102\5\0\2\u0102\37\0\1\u0103\3\0\1\u0135"+
    "\1\u0103\1\0\1\u0103\3\0\3\u0103\10\0\1\u0103\6\0"+
    "\1\u0103\5\0\2\u0103\37\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\12\10\1\0\1\10\3\0\11\10\1\u0136"+
    "\10\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\12\10\1\0\1\10\3\0\6\10\1\u0137\13\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\3\10\1\u0138"+
    "\6\10\1\0\1\10\3\0\22\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\12\10\1\0\1\10\3\0"+
    "\12\10\1\u0139\7\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\5\10\1\u013a\4\10\1\0\1\10\3\0"+
    "\22\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\1\u013b\11\10\1\0\1\10\3\0\22\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\1\u013c\11\10\1\0"+
    "\1\10\3\0\22\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\12\10\1\0\1\10\3\0\11\10\1\u013d"+
    "\10\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\12\10\1\0\1\10\3\0\12\10\1\u013e\7\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\1\u013f\11\10"+
    "\1\0\1\10\3\0\22\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\12\10\1\0\1\10\3\0\7\10"+
    "\1\u0140\12\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\3\10\1\u0141\6\10\1\0\1\10\3\0\22\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\3\10"+
    "\1\u0142\6\10\1\0\1\10\3\0\22\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\12\10\1\0\1\10"+
    "\3\0\1\10\1\u0143\20\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\12\10\1\0\1\10\3\0\3\10"+
    "\1\u0144\16\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\5\10\1\u0145\4\10\1\0\1\10\3\0\22\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\12\10"+
    "\1\0\1\10\3\0\13\10\1\u0146\6\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\12\10\1\0\1\10"+
    "\3\0\11\10\1\u0147\10\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\2\10\1\u0148\7\10\1\0\1\10"+
    "\3\0\22\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\12\10\1\0\1\10\3\0\14\10\1\u0149\5\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\5\10"+
    "\1\u014a\4\10\1\0\1\10\3\0\22\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\12\10\1\0\1\10"+
    "\3\0\3\10\1\u014b\16\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\12\10\1\0\1\10\3\0\3\10"+
    "\1\u014c\16\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\12\10\1\0\1\10\3\0\11\10\1\u014d\10\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\12\10"+
    "\1\0\1\10\3\0\12\10\1\u014e\7\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\5\10\1\u014f\4\10"+
    "\1\0\1\10\3\0\22\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\12\10\1\0\1\10\3\0\12\10"+
    "\1\u0150\7\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\12\10\1\0\1\10\3\0\4\10\1\u0151\15\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\12\10"+
    "\1\0\1\10\3\0\12\10\1\u0152\7\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\12\10\1\0\1\10"+
    "\3\0\12\10\1\u0153\7\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\12\10\1\0\1\10\3\0\7\10"+
    "\1\u0154\12\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\3\10\1\u0155\6\10\1\0\1\10\3\0\22\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\12\10"+
    "\1\0\1\10\3\0\3\10\1\u0156\16\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\5\10\1\u0157\4\10"+
    "\1\0\1\10\3\0\22\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\12\10\1\0\1\10\3\0\4\10"+
    "\1\u0158\15\10\30\0\1\u0131\3\0\1\u0159\1\u0131\1\0"+
    "\1\u0131\3\0\3\u0131\10\0\1\u0131\6\0\1\u0131\5\0"+
    "\2\u0131\37\0\1\u0132\3\0\1\u015a\1\u0132\1\0\1\u0132"+
    "\3\0\3\u0132\10\0\1\u0132\6\0\1\u0132\5\0\2\u0132"+
    "\37\0\1\u0101\3\0\1\u0133\1\u0101\1\306\1\u0101\3\0"+
    "\3\u0101\4\0\1\306\3\0\1\u0101\6\0\1\u0101\5\0"+
    "\2\u0101\37\0\1\u0102\3\0\1\u0134\1\u0102\1\u015b\1\u0102"+
    "\3\0\3\u0102\4\0\1\u015b\3\0\1\u0102\6\0\1\u0102"+
    "\5\0\2\u0102\37\0\1\u0103\3\0\1\u0135\1\u0103\1\u015c"+
    "\1\u0103\3\0\3\u0103\4\0\1\u015c\3\0\1\u0103\6\0"+
    "\1\u0103\5\0\2\u0103\37\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\1\u015d\11\10\1\0\1\10\3\0\22\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\4\10"+
    "\1\u015e\5\10\1\0\1\10\3\0\22\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\12\10\1\0\1\10"+
    "\3\0\12\10\1\u015f\7\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\5\10\1\u0160\4\10\1\0\1\10"+
    "\3\0\22\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\12\10\1\0\1\10\3\0\15\10\1\u0161\4\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\2\10"+
    "\1\u0162\7\10\1\0\1\10\3\0\22\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\12\10\1\0\1\10"+
    "\3\0\4\10\1\u0163\15\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\12\10\1\0\1\10\3\0\4\10"+
    "\1\u0164\15\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\12\10\1\0\1\10\3\0\12\10\1\u0165\7\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\10\10"+
    "\1\u0166\1\10\1\0\1\10\3\0\22\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\12\10\1\0\1\10"+
    "\3\0\3\10\1\u0167\16\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\12\10\1\0\1\10\3\0\1\10"+
    "\1\u0168\20\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\12\10\1\0\1\10\3\0\12\10\1\u0169\7\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\5\10"+
    "\1\u016a\4\10\1\0\1\10\3\0\22\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\12\10\1\0\1\10"+
    "\3\0\12\10\1\u016b\7\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\12\10\1\0\1\10\3\0\10\10"+
    "\1\u016c\11\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\5\10\1\u016d\4\10\1\0\1\10\3\0\22\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\12\10"+
    "\1\0\1\10\3\0\3\10\1\u016e\16\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\12\10\1\0\1\10"+
    "\3\0\7\10\1\u016f\12\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\12\10\1\0\1\10\3\0\12\10"+
    "\1\u0170\7\10\30\0\1\u0131\3\0\1\u0159\1\u0131\1\u0171"+
    "\1\u0131\3\0\3\u0131\4\0\1\u0171\3\0\1\u0131\6\0"+
    "\1\u0131\5\0\2\u0131\37\0\1\u0132\3\0\1\u015a\1\u0132"+
    "\1\u0172\1\u0132\3\0\3\u0132\4\0\1\u0172\3\0\1\u0132"+
    "\6\0\1\u0132\5\0\2\u0132\37\0\1\u0173\3\0\2\u0173"+
    "\1\0\1\u0173\3\0\3\u0173\10\0\1\u0173\6\0\1\u0173"+
    "\5\0\2\u0173\37\0\1\u0174\3\0\2\u0174\1\0\1\u0174"+
    "\3\0\3\u0174\10\0\1\u0174\6\0\1\u0174\5\0\2\u0174"+
    "\37\0\1\10\1\0\1\10\1\0\4\10\3\0\12\10"+
    "\1\0\1\10\3\0\3\10\1\u0175\16\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\12\10\1\0\1\10"+
    "\3\0\6\10\1\u0176\13\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\4\10\1\u0177\5\10\1\0\1\10"+
    "\3\0\22\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\12\10\1\0\1\10\3\0\12\10\1\u0178\7\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\12\10"+
    "\1\0\1\10\3\0\12\10\1\u0179\7\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\12\10\1\0\1\10"+
    "\3\0\12\10\1\u017a\7\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\12\10\1\0\1\10\3\0\11\10"+
    "\1\u017b\10\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\12\10\1\0\1\10\3\0\12\10\1\u017c\7\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\1\u017d"+
    "\11\10\1\0\1\10\3\0\22\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\12\10\1\0\1\10\3\0"+
    "\3\10\1\u017e\16\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\12\10\1\0\1\10\3\0\12\10\1\u017f"+
    "\7\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\4\10\1\u0180\5\10\1\0\1\10\3\0\22\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\12\10\1\0"+
    "\1\10\3\0\1\10\1\u0181\20\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\5\10\1\u0182\4\10\1\0"+
    "\1\10\3\0\22\10\30\0\1\u0183\3\0\2\u0183\1\0"+
    "\1\u0183\3\0\3\u0183\10\0\1\u0183\6\0\1\u0183\5\0"+
    "\2\u0183\37\0\1\u0184\3\0\2\u0184\1\0\1\u0184\3\0"+
    "\3\u0184\10\0\1\u0184\6\0\1\u0184\5\0\2\u0184\37\0"+
    "\1\u0173\3\0\1\u0185\1\u0173\1\0\1\u0173\3\0\3\u0173"+
    "\10\0\1\u0173\6\0\1\u0173\5\0\2\u0173\37\0\1\u0174"+
    "\3\0\1\u0186\1\u0174\1\0\1\u0174\3\0\3\u0174\10\0"+
    "\1\u0174\6\0\1\u0174\5\0\2\u0174\37\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\12\10\1\0\1\10\3\0"+
    "\12\10\1\u0187\7\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\4\10\1\u0188\5\10\1\0\1\10\3\0"+
    "\22\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\12\10\1\0\1\10\3\0\5\10\1\u0189\14\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\1\u018a\11\10"+
    "\1\0\1\10\3\0\22\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\12\10\1\0\1\10\3\0\11\10"+
    "\1\u018b\10\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\12\10\1\0\1\10\3\0\3\10\1\u018c\16\10"+
    "\30\0\1\u0183\3\0\1\u018d\1\u0183\1\0\1\u0183\3\0"+
    "\3\u0183\10\0\1\u0183\6\0\1\u0183\5\0\2\u0183\37\0"+
    "\1\u0184\3\0\1\u018e\1\u0184\1\0\1\u0184\3\0\3\u0184"+
    "\10\0\1\u0184\6\0\1\u0184\5\0\2\u0184\37\0\1\u0173"+
    "\3\0\1\u0185\1\u0173\1\u018f\1\u0173\3\0\3\u0173\4\0"+
    "\1\u018f\3\0\1\u0173\6\0\1\u0173\5\0\2\u0173\37\0"+
    "\1\u0174\3\0\1\u0186\1\u0174\1\u0190\1\u0174\3\0\3\u0174"+
    "\4\0\1\u0190\3\0\1\u0174\6\0\1\u0174\5\0\2\u0174"+
    "\37\0\1\10\1\0\1\10\1\0\4\10\3\0\12\10"+
    "\1\0\1\10\3\0\12\10\1\u0191\7\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\5\10\1\u0192\4\10"+
    "\1\0\1\10\3\0\22\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\12\10\1\0\1\10\3\0\5\10"+
    "\1\u0193\14\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\1\u0194\11\10\1\0\1\10\3\0\22\10\30\0"+
    "\1\u0183\3\0\1\u018d\1\u0183\1\u0195\1\u0183\3\0\3\u0183"+
    "\4\0\1\u0195\3\0\1\u0183\6\0\1\u0183\5\0\2\u0183"+
    "\37\0\1\u0184\3\0\1\u018e\1\u0184\1\u0196\1\u0184\3\0"+
    "\3\u0184\4\0\1\u0196\3\0\1\u0184\6\0\1\u0184\5\0"+
    "\2\u0184\37\0\1\u0197\3\0\2\u0197\1\0\1\u0197\3\0"+
    "\3\u0197\10\0\1\u0197\6\0\1\u0197\5\0\2\u0197\37\0"+
    "\1\u0198\3\0\2\u0198\1\0\1\u0198\3\0\3\u0198\10\0"+
    "\1\u0198\6\0\1\u0198\5\0\2\u0198\37\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\5\10\1\u0199\4\10\1\0"+
    "\1\10\3\0\22\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\5\10\1\u019a\4\10\1\0\1\10\3\0"+
    "\22\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\12\10\1\0\1\10\3\0\5\10\1\u019b\14\10\30\0"+
    "\1\u019c\3\0\2\u019c\1\0\1\u019c\3\0\3\u019c\10\0"+
    "\1\u019c\6\0\1\u019c\5\0\2\u019c\37\0\1\u019d\3\0"+
    "\2\u019d\1\0\1\u019d\3\0\3\u019d\10\0\1\u019d\6\0"+
    "\1\u019d\5\0\2\u019d\37\0\1\u0197\3\0\1\u019e\1\u0197"+
    "\1\0\1\u0197\3\0\3\u0197\10\0\1\u0197\6\0\1\u0197"+
    "\5\0\2\u0197\37\0\1\u0198\3\0\1\u019f\1\u0198\1\0"+
    "\1\u0198\3\0\3\u0198\10\0\1\u0198\6\0\1\u0198\5\0"+
    "\2\u0198\37\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\12\10\1\0\1\10\3\0\1\10\1\u01a0\20\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\5\10\1\u01a1"+
    "\4\10\1\0\1\10\3\0\22\10\30\0\1\u019c\3\0"+
    "\1\u01a2\1\u019c\1\0\1\u019c\3\0\3\u019c\10\0\1\u019c"+
    "\6\0\1\u019c\5\0\2\u019c\37\0\1\u019d\3\0\1\u01a3"+
    "\1\u019d\1\0\1\u019d\3\0\3\u019d\10\0\1\u019d\6\0"+
    "\1\u019d\5\0\2\u019d\37\0\1\u0197\3\0\1\u019e\1\u0197"+
    "\1\u01a4\1\u0197\3\0\3\u0197\4\0\1\u01a4\3\0\1\u0197"+
    "\6\0\1\u0197\5\0\2\u0197\37\0\1\u0198\3\0\1\u019f"+
    "\1\u0198\1\u01a5\1\u0198\3\0\3\u0198\4\0\1\u01a5\3\0"+
    "\1\u0198\6\0\1\u0198\5\0\2\u0198\37\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\12\10\1\0\1\10\3\0"+
    "\3\10\1\u01a6\16\10\30\0\1\u019c\3\0\1\u01a2\1\u019c"+
    "\1\u01a7\1\u019c\3\0\3\u019c\4\0\1\u01a7\3\0\1\u019c"+
    "\6\0\1\u019c\5\0\2\u019c\37\0\1\u019d\3\0\1\u01a3"+
    "\1\u019d\1\u01a8\1\u019d\3\0\3\u019d\4\0\1\u01a8\3\0"+
    "\1\u019d\6\0\1\u019d\5\0\2\u019d\37\0\1\u01a9\3\0"+
    "\2\u01a9\1\0\1\u01a9\3\0\3\u01a9\10\0\1\u01a9\6\0"+
    "\1\u01a9\5\0\2\u01a9\37\0\1\u01aa\3\0\2\u01aa\1\0"+
    "\1\u01aa\3\0\3\u01aa\10\0\1\u01aa\6\0\1\u01aa\5\0"+
    "\2\u01aa\37\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\1\u01ab\11\10\1\0\1\10\3\0\22\10\30\0\1\67"+
    "\3\0\2\67\1\0\1\67\3\0\3\67\10\0\1\67"+
    "\6\0\1\67\5\0\2\67\37\0\1\u01ac\3\0\2\u01ac"+
    "\1\0\1\u01ac\3\0\3\u01ac\10\0\1\u01ac\6\0\1\u01ac"+
    "\5\0\2\u01ac\37\0\1\u01aa\3\0\1\u01ad\1\u01aa\1\0"+
    "\1\u01aa\3\0\3\u01aa\10\0\1\u01aa\6\0\1\u01aa\5\0"+
    "\2\u01aa\37\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\12\10\1\0\1\10\3\0\5\10\1\u01ae\14\10\30\0"+
    "\1\u01ac\3\0\1\u01af\1\u01ac\1\0\1\u01ac\3\0\3\u01ac"+
    "\10\0\1\u01ac\6\0\1\u01ac\5\0\2\u01ac\37\0\1\u01aa"+
    "\3\0\1\u01ad\1\u01aa\1\307\1\u01aa\3\0\3\u01aa\4\0"+
    "\1\307\3\0\1\u01aa\6\0\1\u01aa\5\0\2\u01aa\37\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\5\10\1\u01b0"+
    "\4\10\1\0\1\10\3\0\22\10\30\0\1\u01ac\3\0"+
    "\1\u01af\1\u01ac\1\377\1\u01ac\3\0\3\u01ac\4\0\1\377"+
    "\3\0\1\u01ac\6\0\1\u01ac\5\0\2\u01ac\33\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  9,  1,  9,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9,  9,  9, 
     9,  9,  9,  9,  9,  9,  1,  0,  1,  0,  1,  9,  1,  0,  0,  0, 
     0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  0,  9,  9,  9,  1,  9,  9,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  9,  9,  9,  9,  1,  9,  1,  9,  9,  9,  9,  9,  9,  9, 
     9,  0,  0,  1,  0,  0,  0,  9,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  9,  9,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0, 
     1,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     0,  0,  1,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0, 
     1,  1,  1,  1,  0,  0,  0,  0,  1,  1,  1,  0,  0,  0,  0,  1, 
     1,  0,  0,  0,  0,  1,  0,  0,  1,  0,  1,  0,  0,  1,  0,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	

    public Lexer(ComplexSymbolFactory sf, java.io.InputStream is){
		this(is);
        symbolFactory = sf;
    }
	public Lexer(ComplexSymbolFactory sf, java.io.Reader reader){
		this(reader);
        symbolFactory = sf;
    }
    
    private StringBuffer sb;
    private ComplexSymbolFactory symbolFactory;
    private int csline,cscolumn;

    public Symbol symbol(String name, int code){
		return symbolFactory.newSymbol(name, code,
						new Location(yyline+1,yycolumn+1, yychar), // -yylength()
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength())
				);
    }
    public Symbol symbol(String name, int code, String lexem){
	return symbolFactory.newSymbol(name, code, 
						new Location(yyline+1, yycolumn +1, yychar), 
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength()), lexem);
    }
    
    protected void emit_warning(String message){
    	System.out.println("scanner warning: " + message + " at : 2 "+ 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }
    
    protected void emit_error(String message){
    	System.out.println("scanner error: " + message + " at : 2" + 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[22508];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2314) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 367: 
          {  return symbolFactory.newSymbol("MUTABLE", MUTABLE);  }
        case 433: break;
        case 364: 
          {  return symbolFactory.newSymbol("DEFAULT", DEFAULT);  }
        case 434: break;
        case 362: 
          {  return symbolFactory.newSymbol("INCLUDE", INCLUDE);  }
        case 435: break;
        case 360: 
          {  return symbolFactory.newSymbol("PRIVATE", PRIVATE);  }
        case 436: break;
        case 354: 
          {  return symbolFactory.newSymbol("VIRTUAL", VIRTUAL);  }
        case 437: break;
        case 353: 
          {  return symbolFactory.newSymbol("TYPEDEF", TYPEDEF);  }
        case 438: break;
        case 87: 
          {  return symbolFactory.newSymbol("ASS_SUB", ASS_SUB);  }
        case 439: break;
        case 59: 
        case 60: 
        case 131: 
        case 256: 
        case 306: 
        case 424: 
          {  return symbolFactory.newSymbol("ESCAPED", ESCAPED);  }
        case 440: break;
        case 51: 
          {  return symbolFactory.newSymbol("CRPAREN", CRPAREN);  }
        case 441: break;
        case 50: 
          {  return symbolFactory.newSymbol("CLPAREN", CLPAREN);  }
        case 442: break;
        case 45: 
          {  return symbolFactory.newSymbol("SQUIGLY", SQUIGLY);  }
        case 443: break;
        case 42: 
          {  return symbolFactory.newSymbol("PERCENT", PERCENT);  }
        case 444: break;
        case 89: 
          {  return symbolFactory.newSymbol("ASS_DIV", ASS_DIV);  }
        case 445: break;
        case 90: 
          {  return symbolFactory.newSymbol("ASS_MUL", ASS_MUL);  }
        case 446: break;
        case 121: 
          {  return symbolFactory.newSymbol("ASS_AND", ASS_AND);  }
        case 447: break;
        case 122: 
          {  return symbolFactory.newSymbol("LOG_AND", LOG_AND);  }
        case 448: break;
        case 125: 
          {  return symbolFactory.newSymbol("ASS_ADD", ASS_ADD);  }
        case 449: break;
        case 127: 
          {  return symbolFactory.newSymbol("ASS_MOD", ASS_MOD);  }
        case 450: break;
        case 128: 
          {  return symbolFactory.newSymbol("ASS_XOR", ASS_XOR);  }
        case 451: break;
        case 193: 
          {  return symbolFactory.newSymbol("ASS_SHL", ASS_SHL);  }
        case 452: break;
        case 194: 
          {  return symbolFactory.newSymbol("ASS_SHR", ASS_SHR);  }
        case 453: break;
        case 202: 
          {  return symbolFactory.newSymbol("BOOLEAN", BOOLEAN);  }
        case 454: break;
        case 303: 
          {  return symbolFactory.newSymbol("WHILE", WHILE);  }
        case 455: break;
        case 286: 
          {  return symbolFactory.newSymbol("SHORT", SHORT);  }
        case 456: break;
        case 280: 
          {  return symbolFactory.newSymbol("CONST", CONST);  }
        case 457: break;
        case 278: 
          {  return symbolFactory.newSymbol("CLASS", CLASS);  }
        case 458: break;
        case 277: 
          {  return symbolFactory.newSymbol("CATCH", CATCH);  }
        case 459: break;
        case 276: 
          {  return symbolFactory.newSymbol("USING", USING);  }
        case 460: break;
        case 275: 
          {  return symbolFactory.newSymbol("UNION", UNION);  }
        case 461: break;
        case 268: 
          {  return symbolFactory.newSymbol("THROW", THROW);  }
        case 462: break;
        case 262: 
          {  return symbolFactory.newSymbol("FLOAT", FLOAT);  }
        case 463: break;
        case 260: 
          {  return symbolFactory.newSymbol("FALSE", FALSE);  }
        case 464: break;
        case 259: 
          {  return symbolFactory.newSymbol("BREAK", BREAK);  }
        case 465: break;
        case 53: 
          {  return symbolFactory.newSymbol("HASHT", HASHT);  }
        case 466: break;
        case 52: 
          {  return symbolFactory.newSymbol("COMMA", COMMA);  }
        case 467: break;
        case 20: 
          {  return symbolFactory.newSymbol("MINUS", MINUS);  }
        case 468: break;
        case 22: 
          {  return symbolFactory.newSymbol("TIMES", TIMES);  }
        case 469: break;
        case 34: 
          {  return symbolFactory.newSymbol("COLON", COLON);  }
        case 470: break;
        case 35: 
          {  return symbolFactory.newSymbol("EQUAL", EQUAL);  }
        case 471: break;
        case 88: 
          {  return symbolFactory.newSymbol("ARROW", ARROW);  }
        case 472: break;
        case 114: 
          {  return symbolFactory.newSymbol("SCOPE", SCOPE);  }
        case 473: break;
        case 2: 
        case 6: 
        case 8: 
        case 9: 
          {  emit_warning("Unrecognized character '" +yytext()+"' -- ignored");  }
        case 474: break;
        case 409: 
          {  return symbolFactory.newSymbol("STATICCAST", STATICCAST);  }
        case 475: break;
        case 58: 
          {  return symbolFactory.newSymbol("STRNG", STRNG, yytext());  }
        case 476: break;
        case 7: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 103: 
        case 104: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 136: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 144: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 201: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 211: 
        case 212: 
        case 214: 
        case 215: 
        case 216: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 223: 
        case 224: 
        case 225: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
        case 232: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 239: 
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 247: 
        case 248: 
        case 249: 
        case 252: 
        case 253: 
        case 261: 
        case 263: 
        case 264: 
        case 265: 
        case 266: 
        case 267: 
        case 269: 
        case 270: 
        case 271: 
        case 272: 
        case 273: 
        case 274: 
        case 279: 
        case 281: 
        case 282: 
        case 283: 
        case 284: 
        case 285: 
        case 287: 
        case 288: 
        case 289: 
        case 290: 
        case 291: 
        case 292: 
        case 293: 
        case 294: 
        case 295: 
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 300: 
        case 301: 
        case 302: 
        case 310: 
        case 312: 
        case 313: 
        case 314: 
        case 315: 
        case 317: 
        case 318: 
        case 319: 
        case 320: 
        case 321: 
        case 322: 
        case 329: 
        case 330: 
        case 332: 
        case 334: 
        case 336: 
        case 339: 
        case 341: 
        case 343: 
        case 348: 
        case 349: 
        case 350: 
        case 351: 
        case 352: 
        case 355: 
        case 356: 
        case 357: 
        case 358: 
        case 359: 
        case 361: 
        case 363: 
        case 365: 
        case 366: 
        case 372: 
        case 373: 
        case 380: 
        case 381: 
        case 382: 
        case 384: 
        case 391: 
        case 392: 
        case 393: 
        case 395: 
        case 400: 
        case 402: 
        case 403: 
        case 408: 
        case 410: 
        case 415: 
        case 421: 
        case 426: 
        case 429: 
          {  return symbolFactory.newSymbol("IDENT", IDENT, yytext());  }
        case 477: break;
        case 120: 
          {  return symbolFactory.newSymbol("RIGHTSHIFT", RIGHTSHIFT);  }
        case 478: break;
        case 162: 
          {  return symbolFactory.newSymbol("ARROW_STAR", ARROW_STAR);  }
        case 479: break;
        case 325: 
          {  return symbolFactory.newSymbol("STR", STR);  }
        case 480: break;
        case 86: 
          {  return symbolFactory.newSymbol("DEC", DEC);  }
        case 481: break;
        case 43: 
          {  return symbolFactory.newSymbol("XOR", XOR);  }
        case 482: break;
        case 19: 
          {  return symbolFactory.newSymbol("DOT", DOT);  }
        case 483: break;
        case 36: 
          {  return symbolFactory.newSymbol("ESC", ESC);  }
        case 484: break;
        case 39: 
          {  return symbolFactory.newSymbol("AND", AND);  }
        case 485: break;
        case 126: 
          {  return symbolFactory.newSymbol("INC", INC);  }
        case 486: break;
        case 137: 
          {  return symbolFactory.newSymbol("ASM", ASM);  }
        case 487: break;
        case 143: 
          {  return symbolFactory.newSymbol("FOR", FOR);  }
        case 488: break;
        case 145: 
          {  return symbolFactory.newSymbol("NEW", NEW);  }
        case 489: break;
        case 150: 
          {  return symbolFactory.newSymbol("TRY", TRY);  }
        case 490: break;
        case 178: 
          {  return symbolFactory.newSymbol("INT", INT);  }
        case 491: break;
        case 385: 
          {  return symbolFactory.newSymbol("EXPLICIT", EXPLICIT);  }
        case 492: break;
        case 383: 
          {  return symbolFactory.newSymbol("OPERATOR", OPERATOR);  }
        case 493: break;
        case 379: 
          {  return symbolFactory.newSymbol("CONTINUE", CONTINUE);  }
        case 494: break;
        case 378: 
          {  return symbolFactory.newSymbol("UNSIGNED", UNSIGNED);  }
        case 495: break;
        case 377: 
          {  return symbolFactory.newSymbol("VOLATILE", VOLATILE);  }
        case 496: break;
        case 376: 
          {  return symbolFactory.newSymbol("TYPENAME", TYPENAME);  }
        case 497: break;
        case 375: 
          {  return symbolFactory.newSymbol("TEMPLATE", TEMPLATE);  }
        case 498: break;
        case 374: 
          {  return symbolFactory.newSymbol("REGISTER", REGISTER);  }
        case 499: break;
        case 48: 
          {  return symbolFactory.newSymbol("SQRPAREN", SQRPAREN);  }
        case 500: break;
        case 47: 
          {  return symbolFactory.newSymbol("SQLPAREN", SQLPAREN);  }
        case 501: break;
        case 161: 
          {  return symbolFactory.newSymbol("ELLIPSIS", ELLIPSIS);  }
        case 502: break;
        case 416: 
          {  return symbolFactory.newSymbol("DYNAMICCAST", DYNAMICCAST);  }
        case 503: break;
        case 37: 
          {  return symbolFactory.newSymbol("SMALLERTHAN", SMALLERTHAN);  }
        case 504: break;
        case 38: 
          {  return symbolFactory.newSymbol("GREATERTHAN", GREATERTHAN);  }
        case 505: break;
        case 251: 
          {  return symbolFactory.newSymbol("GOTO", GOTO);  }
        case 506: break;
        case 250: 
          {  return symbolFactory.newSymbol("ELSE", ELSE);  }
        case 507: break;
        case 246: 
          {  return symbolFactory.newSymbol("ENUM", ENUM);  }
        case 508: break;
        case 227: 
          {  return symbolFactory.newSymbol("LONG", LONG);  }
        case 509: break;
        case 226: 
          {  return symbolFactory.newSymbol("CHAR", CHAR);  }
        case 510: break;
        case 44: 
          {  return symbolFactory.newSymbol("SEMI", SEMI);  }
        case 511: break;
        case 41: 
          {  return symbolFactory.newSymbol("PLUS", PLUS);  }
        case 512: break;
        case 200: 
          {  return symbolFactory.newSymbol("AUTO", AUTO);  }
        case 513: break;
        case 210: 
          {  return symbolFactory.newSymbol("TRUE", TRUE);  }
        case 514: break;
        case 213: 
          {  return symbolFactory.newSymbol("THIS", THIS);  }
        case 515: break;
        case 222: 
          {  return symbolFactory.newSymbol("CASE", CASE);  }
        case 516: break;
        case 401: 
          {  return symbolFactory.newSymbol("CONSTCAST", CONSTCAST);  }
        case 517: break;
        case 394: 
          {  return symbolFactory.newSymbol("PROTECTED", PROTECTED);  }
        case 518: break;
        case 390: 
          {  return symbolFactory.newSymbol("NAMESPACE", NAMESPACE);  }
        case 519: break;
        case 85: 
          {  return symbolFactory.newSymbol("DOT_START", DOT_START);  }
        case 520: break;
        case 118: 
          {  return symbolFactory.newSymbol("LEFTSHIFT", LEFTSHIFT);  }
        case 521: break;
        case 217: 
          {  return symbolFactory.newSymbol("VOID", VOID, yytext());  }
        case 522: break;
        case 342: 
          {  return symbolFactory.newSymbol("EXPORT", EXPORT);  }
        case 523: break;
        case 340: 
          {  return symbolFactory.newSymbol("EXTERN", EXTERN);  }
        case 524: break;
        case 338: 
          {  return symbolFactory.newSymbol("DELETE", DELETE);  }
        case 525: break;
        case 337: 
          {  return symbolFactory.newSymbol("DEFINE", DEFINE);  }
        case 526: break;
        case 335: 
          {  return symbolFactory.newSymbol("DOUBLE", DOUBLE);  }
        case 527: break;
        case 333: 
          {  return symbolFactory.newSymbol("INLINE", INLINE);  }
        case 528: break;
        case 331: 
          {  return symbolFactory.newSymbol("PUBLIC", PUBLIC);  }
        case 529: break;
        case 328: 
          {  return symbolFactory.newSymbol("SWITCH", SWITCH);  }
        case 530: break;
        case 327: 
          {  return symbolFactory.newSymbol("SIZEOF", SIZEOF);  }
        case 531: break;
        case 326: 
          {  return symbolFactory.newSymbol("SIGNED", SIGNED);  }
        case 532: break;
        case 324: 
          {  return symbolFactory.newSymbol("STRUCT", STRUCT);  }
        case 533: break;
        case 323: 
          {  return symbolFactory.newSymbol("STATIC", STATIC);  }
        case 534: break;
        case 316: 
          {  return symbolFactory.newSymbol("TYPEID", TYPEID);  }
        case 535: break;
        case 311: 
          {  return symbolFactory.newSymbol("RETURN", RETURN);  }
        case 536: break;
        case 309: 
          {  return symbolFactory.newSymbol("FRIEND", FRIEND);  }
        case 537: break;
        case 49: 
          {  return symbolFactory.newSymbol("RPAREN", RPAREN);  }
        case 538: break;
        case 46: 
          {  return symbolFactory.newSymbol("LPAREN", LPAREN);  }
        case 539: break;
        case 21: 
          {  return symbolFactory.newSymbol("DIVIDE", DIVIDE);  }
        case 540: break;
        case 123: 
          {  return symbolFactory.newSymbol("ASS_OR", ASS_OR);  }
        case 541: break;
        case 124: 
          {  return symbolFactory.newSymbol("LOG_OR", LOG_OR);  }
        case 542: break;
        case 431: 
          {  return symbolFactory.newSymbol("REINTERPRETCAST", REINTERPRETCAST);  }
        case 543: break;
        case 135: 
          {  return symbolFactory.newSymbol("CHARACTER", CHARACTER, yytext());  }
        case 544: break;
        case 10: 
          {  return symbolFactory.newSymbol("QM", QM);  }
        case 545: break;
        case 40: 
          {  return symbolFactory.newSymbol("OR", OR);  }
        case 546: break;
        case 102: 
          {  return symbolFactory.newSymbol("IF", IF);  }
        case 547: break;
        case 105: 
          {  return symbolFactory.newSymbol("DO", DO);  }
        case 548: break;
        case 115: 
          {  return symbolFactory.newSymbol("EQ", EQ);  }
        case 549: break;
        case 116: 
          {  return symbolFactory.newSymbol("NE", NE);  }
        case 550: break;
        case 117: 
          {  return symbolFactory.newSymbol("LE", LE);  }
        case 551: break;
        case 119: 
          {  return symbolFactory.newSymbol("GE", GE);  }
        case 552: break;
        case 54: 
        case 56: 
          {  return symbolFactory.newSymbol("PPNUMBER", PPNUMBER, Integer.parseInt(yytext()));  }
        case 553: break;
        case 5: 
          {  return symbolFactory.newSymbol("NUMBER", NUMBER, Integer.parseInt(yytext()));  }
        case 554: break;
        case 3: 
        case 4: 
          {                                }
        case 555: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return symbolFactory.newSymbol("EOF",sym.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
