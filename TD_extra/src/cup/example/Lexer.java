/* The following code was generated by JFlex 1.3.5 on 11/15/22, 9:42 PM */

package cup.example;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java.lang.*;
import java.io.InputStreamReader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 11/15/22, 9:42 PM from the specification file
 * <tt>file:/C:/Users/alini/eclipse-workspace/TranslatorDesign/TD_extra/lexer.jflex</tt>
 */
public class Lexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int CODESEG = 1;
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\41\1\3\1\2\1\0\1\3\1\1\16\41\4\0\1\7\1\63"+
    "\1\5\1\104\1\37\1\71\1\66\1\15\1\75\1\100\1\36\1\70"+
    "\1\103\1\34\1\32\1\35\1\10\7\11\2\4\1\61\1\73\1\64"+
    "\1\62\1\65\1\16\1\0\4\13\1\33\1\13\5\6\1\31\10\6"+
    "\1\30\2\6\1\12\2\6\1\76\1\14\1\77\1\72\1\40\1\0"+
    "\1\17\1\20\1\42\1\50\1\51\1\21\1\52\1\53\1\46\1\6"+
    "\1\55\1\43\1\54\1\22\1\47\1\45\1\6\1\23\1\44\1\24"+
    "\1\27\1\25\1\56\1\26\1\60\1\57\1\101\1\67\1\102\1\74"+
    "\41\41\2\0\4\37\4\0\1\37\2\0\1\41\7\0\1\37\4\0"+
    "\1\37\5\0\27\37\1\0\37\37\1\0\u01ca\37\4\0\14\37\16\0"+
    "\5\37\7\0\1\37\1\0\1\37\21\0\160\41\5\37\1\0\2\37"+
    "\2\0\4\37\1\0\1\37\6\0\1\37\1\0\3\37\1\0\1\37"+
    "\1\0\24\37\1\0\123\37\1\0\213\37\1\0\5\41\2\0\246\37"+
    "\1\0\46\37\2\0\1\37\7\0\47\37\7\0\1\37\1\0\55\41"+
    "\1\0\1\41\1\0\2\41\1\0\2\41\1\0\1\41\10\0\33\37"+
    "\5\0\3\37\15\0\6\41\5\0\1\37\4\0\13\41\1\0\1\41"+
    "\3\0\53\37\37\41\4\0\2\37\1\41\143\37\1\0\1\37\10\41"+
    "\1\0\6\41\2\37\2\41\1\0\4\41\2\37\12\41\3\37\2\0"+
    "\1\37\17\0\1\41\1\37\1\41\36\37\33\41\2\0\131\37\13\41"+
    "\1\37\16\0\12\41\41\37\11\41\2\37\4\0\1\37\5\0\26\37"+
    "\4\41\1\37\11\41\1\37\3\41\1\37\5\41\22\0\31\37\3\41"+
    "\4\0\13\37\65\0\25\37\1\0\10\37\26\0\60\41\66\37\3\41"+
    "\1\37\22\41\1\37\7\41\12\37\2\41\2\0\12\41\1\0\20\37"+
    "\3\41\1\0\10\37\2\0\2\37\2\0\26\37\1\0\7\37\1\0"+
    "\1\37\3\0\4\37\2\0\1\41\1\37\7\41\2\0\2\41\2\0"+
    "\3\41\1\37\10\0\1\41\4\0\2\37\1\0\3\37\2\41\2\0"+
    "\12\41\4\37\7\0\2\37\4\0\3\41\1\0\6\37\4\0\2\37"+
    "\2\0\26\37\1\0\7\37\1\0\2\37\1\0\2\37\1\0\2\37"+
    "\2\0\1\41\1\0\5\41\4\0\2\41\2\0\3\41\3\0\1\41"+
    "\7\0\4\37\1\0\1\37\7\0\14\41\3\37\1\41\13\0\3\41"+
    "\1\0\11\37\1\0\3\37\1\0\26\37\1\0\7\37\1\0\2\37"+
    "\1\0\5\37\2\0\1\41\1\37\10\41\1\0\3\41\1\0\3\41"+
    "\2\0\1\37\17\0\2\37\2\41\2\0\12\41\1\0\1\37\7\0"+
    "\1\37\6\41\1\0\3\41\1\0\10\37\2\0\2\37\2\0\26\37"+
    "\1\0\7\37\1\0\2\37\1\0\5\37\2\0\1\41\1\37\7\41"+
    "\2\0\2\41\2\0\3\41\10\0\2\41\4\0\2\37\1\0\3\37"+
    "\2\41\2\0\12\41\1\0\1\37\20\0\1\41\1\37\1\0\6\37"+
    "\3\0\3\37\1\0\4\37\3\0\2\37\1\0\1\37\1\0\2\37"+
    "\3\0\2\37\3\0\3\37\3\0\14\37\4\0\5\41\3\0\3\41"+
    "\1\0\4\41\2\0\1\37\6\0\1\41\16\0\12\41\11\0\1\37"+
    "\6\0\4\41\1\0\10\37\1\0\3\37\1\0\27\37\1\0\20\37"+
    "\3\0\1\37\7\41\1\0\3\41\1\0\4\41\7\0\2\41\1\0"+
    "\3\37\5\0\2\37\2\41\2\0\12\41\20\0\1\37\3\41\1\0"+
    "\10\37\1\0\3\37\1\0\27\37\1\0\12\37\1\0\5\37\2\0"+
    "\1\41\1\37\7\41\1\0\3\41\1\0\4\41\7\0\2\41\7\0"+
    "\1\37\1\0\2\37\2\41\2\0\12\41\1\0\2\37\15\0\4\41"+
    "\1\0\10\37\1\0\3\37\1\0\51\37\2\41\1\37\7\41\1\0"+
    "\3\41\1\0\4\41\1\37\5\0\3\37\1\41\7\0\3\37\2\41"+
    "\2\0\12\41\12\0\6\37\2\0\2\41\1\0\22\37\3\0\30\37"+
    "\1\0\11\37\1\0\1\37\2\0\7\37\3\0\1\41\4\0\6\41"+
    "\1\0\1\41\1\0\10\41\6\0\12\41\2\0\2\41\15\0\60\37"+
    "\1\41\2\37\7\41\4\0\10\37\10\41\1\0\12\41\47\0\2\37"+
    "\1\0\1\37\2\0\2\37\1\0\1\37\2\0\1\37\6\0\4\37"+
    "\1\0\7\37\1\0\3\37\1\0\1\37\1\0\1\37\2\0\2\37"+
    "\1\0\4\37\1\41\2\37\6\41\1\0\2\41\1\37\2\0\5\37"+
    "\1\0\1\37\1\0\6\41\2\0\12\41\2\0\4\37\40\0\1\37"+
    "\27\0\2\41\6\0\12\41\13\0\1\41\1\0\1\41\1\0\1\41"+
    "\4\0\2\41\10\37\1\0\44\37\4\0\24\41\1\0\2\41\5\37"+
    "\13\41\1\0\44\41\11\0\1\41\71\0\53\37\24\41\1\37\12\41"+
    "\6\0\6\37\4\41\4\37\3\41\1\37\3\41\2\37\7\41\3\37"+
    "\4\41\15\37\14\41\1\37\17\41\2\0\46\37\1\0\1\37\5\0"+
    "\1\37\2\0\53\37\1\0\u014d\37\1\0\4\37\2\0\7\37\1\0"+
    "\1\37\1\0\4\37\2\0\51\37\1\0\4\37\2\0\41\37\1\0"+
    "\4\37\2\0\7\37\1\0\1\37\1\0\4\37\2\0\17\37\1\0"+
    "\71\37\1\0\4\37\2\0\103\37\2\0\3\41\40\0\20\37\20\0"+
    "\126\37\2\0\6\37\3\0\u026c\37\2\0\21\37\1\0\32\37\5\0"+
    "\113\37\3\0\13\37\7\0\15\37\1\0\4\37\3\41\13\0\22\37"+
    "\3\41\13\0\22\37\2\41\14\0\15\37\1\0\3\37\1\0\2\41"+
    "\14\0\64\37\40\41\3\0\1\37\3\0\2\37\1\41\2\0\12\41"+
    "\41\0\4\41\1\0\12\41\6\0\130\37\10\0\5\37\2\41\42\37"+
    "\1\41\1\37\5\0\106\37\12\0\37\37\1\0\14\41\4\0\14\41"+
    "\12\0\12\41\36\37\2\0\5\37\13\0\54\37\4\0\32\37\6\0"+
    "\12\41\46\0\27\37\5\41\4\0\65\37\12\41\1\0\35\41\2\0"+
    "\13\41\6\0\12\41\15\0\1\37\10\0\16\41\102\0\5\41\57\37"+
    "\21\41\7\37\4\0\12\41\21\0\11\41\14\0\3\41\36\37\15\41"+
    "\2\37\12\41\54\37\16\41\14\0\44\37\24\41\10\0\12\41\3\0"+
    "\3\37\12\41\44\37\2\0\11\37\107\0\3\41\1\0\25\41\4\37"+
    "\1\41\4\37\3\41\2\37\3\41\6\0\300\37\72\41\1\0\5\41"+
    "\u0116\37\2\0\6\37\2\0\46\37\2\0\6\37\2\0\10\37\1\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\37\37\2\0\65\37\1\0"+
    "\7\37\1\0\1\37\3\0\3\37\1\0\7\37\3\0\4\37\2\0"+
    "\6\37\4\0\15\37\5\0\3\37\1\0\7\37\16\0\5\41\32\0"+
    "\5\41\20\0\2\37\23\0\1\37\13\0\5\41\1\0\12\41\1\0"+
    "\1\37\15\0\1\37\20\0\15\37\3\0\40\37\20\0\15\41\4\0"+
    "\1\41\3\0\14\41\21\0\1\37\4\0\1\37\2\0\12\37\1\0"+
    "\1\37\3\0\5\37\6\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\4\37\1\0\13\37\2\0\4\37\5\0\5\37\4\0\1\37\21\0"+
    "\51\37\u0a77\0\57\37\1\0\57\37\1\0\205\37\6\0\4\37\3\41"+
    "\2\37\14\0\46\37\1\0\1\37\5\0\1\37\2\0\70\37\7\0"+
    "\1\37\17\0\1\41\27\37\11\0\7\37\1\0\7\37\1\0\7\37"+
    "\1\0\7\37\1\0\7\37\1\0\7\37\1\0\7\37\1\0\7\37"+
    "\1\0\40\41\57\0\1\37\u01d5\0\3\37\31\0\11\37\6\41\1\0"+
    "\5\37\2\0\5\37\4\0\126\37\2\0\2\41\2\0\3\37\1\0"+
    "\132\37\1\0\4\37\5\0\52\37\2\0\136\37\21\0\33\37\65\0"+
    "\20\37\u0200\0\u19b6\37\112\0\u51eb\37\25\0\u048d\37\103\0\56\37\2\0"+
    "\u010d\37\3\0\20\37\12\41\2\37\24\0\57\37\1\41\4\0\12\41"+
    "\1\0\37\37\2\41\120\37\2\41\45\0\11\37\2\0\147\37\2\0"+
    "\44\37\1\0\10\37\77\0\13\37\1\41\3\37\1\41\4\37\1\41"+
    "\27\37\5\41\20\0\1\37\7\0\64\37\14\0\2\41\62\37\22\41"+
    "\12\0\12\41\6\0\22\41\6\37\3\0\1\37\1\0\1\37\2\0"+
    "\12\41\34\37\10\41\2\0\27\37\15\41\14\0\35\37\3\0\4\41"+
    "\57\37\16\41\16\0\1\37\12\41\6\0\5\37\1\41\12\37\12\41"+
    "\5\37\1\0\51\37\16\41\11\0\3\37\1\41\10\37\2\41\2\0"+
    "\12\41\6\0\27\37\3\0\1\37\3\41\62\37\1\41\1\37\3\41"+
    "\2\37\2\41\5\37\2\41\1\37\1\41\1\37\30\0\3\37\2\0"+
    "\13\37\5\41\2\0\3\37\2\41\12\0\6\37\2\0\6\37\2\0"+
    "\6\37\11\0\7\37\1\0\7\37\1\0\53\37\1\0\12\37\12\0"+
    "\163\37\10\41\1\0\2\41\2\0\12\41\6\0\u2ba4\37\14\0\27\37"+
    "\4\0\61\37\u2104\0\u016e\37\2\0\152\37\46\0\7\37\14\0\5\37"+
    "\5\0\1\37\1\41\12\37\1\0\15\37\1\0\5\37\1\0\1\37"+
    "\1\0\2\37\1\0\2\37\1\0\154\37\41\0\u016b\37\22\0\100\37"+
    "\2\0\66\37\50\0\15\37\3\0\20\41\20\0\20\41\3\0\2\37"+
    "\30\0\3\37\31\0\1\37\6\0\5\37\1\0\207\37\2\0\1\41"+
    "\4\0\1\37\13\0\12\41\7\0\32\37\4\0\1\37\1\0\32\37"+
    "\13\0\131\37\3\0\6\37\2\0\6\37\2\0\6\37\2\0\3\37"+
    "\3\0\2\37\3\0\2\37\22\0\3\41\4\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    69,   138,   207,   138,   276,   345,   414,   483,   552, 
      138,   621,   690,   759,   828,   897,   966,  1035,  1104,  1173, 
     1242,  1311,  1380,  1449,  1518,  1587,  1656,  1725,  1794,  1863, 
     1932,  2001,  2070,  2139,  2208,  2277,  2346,  2415,  2484,  2553, 
     2622,  2691,  2760,  2829,  2898,   138,   138,   138,   138,   138, 
      138,   138,   138,   138,   138,  2967,  3036,  3105,  3174,  3243, 
      138,  3312,  3381,  3450,  3519,  3588,  3657,  3726,  3795,  3864, 
     3933,  4002,  4071,  4140,  4209,  4278,  4347,  4416,  4485,  4554, 
     4623,  4692,  4761,  4830,  4899,  4968,  5037,   138,   138,   138, 
     5106,   138,   138,  5175,  5244,  5313,  5382,  5451,  5520,  5589, 
     5658,  5727,  5796,  5865,   414,  5934,  6003,  6072,  6141,  6210, 
     6279,  6348,  6417,  6486,  6555,  6624,   138,   138,   138,   138, 
     6693,   138,  6762,   138,   138,   138,   138,   138,   138,   138, 
      138,  6831,  6900,  3174,   345,  6969,  7038,  7107,  7176,  7245, 
      414,  7314,  7383,  7452,  7521,  7590,   414,  7659,   414,  7728, 
     7797,  7866,  7935,   414,  8004,  8073,  8142,  8211,  8280,  8349, 
     8418,  8487,  8556,  8625,  8694,   138,   138,  8763,  8832,  8901, 
     8970,  9039,  9108,  9177,  9246,  9315,  9384,  9453,  9522,  9591, 
     9660,  9729,   414,  9798,  9867,  9936, 10005, 10074, 10143, 10212, 
    10281, 10350, 10419, 10488, 10557, 10626, 10695,   138,   138, 10764, 
    10833, 10902, 10971, 11040,   414, 11109,   414, 11178, 11247, 11316, 
    11385, 11454, 11523, 11592,   414, 11661, 11730,   414, 11799, 11868, 
    11937,   414, 12006, 12075, 12144, 12213,   414, 12282, 12351, 12420, 
      414,   414, 12489, 12558, 12627, 12696, 12765, 12834, 12903, 12972, 
    13041, 13110, 13179, 13248, 13317, 13386, 13455, 13524, 13593, 13662, 
      414, 13731, 13800, 13869,   414,   414, 13938, 14007, 14076, 14145, 
    14214, 14283, 14352,   414,   414, 14421,   414, 14490, 14559, 14628, 
    14697, 14766,   414, 14835, 14904, 14973, 15042, 15111, 15180,   414, 
      414,   414,   414, 15249, 15318, 15387, 15456, 15525, 15594, 15663, 
      414, 15732, 15801, 15870, 15939, 16008, 16077, 16146, 16215, 16284, 
    16353, 16422, 16491, 16560, 16629, 16698, 16767,   414, 16836, 16905, 
    16974, 17043, 17112,   414, 17181,   414, 17250, 17319, 17388, 17457, 
      414, 17526, 17595, 17664, 17733, 17802, 17871, 17940,   414,   414, 
      414,   414,   414, 18009, 18078,   414, 18147,   414, 18216,   414, 
    18285,   414,   414, 18354,   414, 18423,   414, 18492, 18561, 18630, 
    18699, 18768, 18837, 18906, 18975, 19044, 19113,   414,   414, 19182, 
    19251, 19320, 19389, 19458,   414, 19527,   414, 19596,   414, 19665, 
    19734,   414, 19803, 19872, 19941, 20010, 20079, 20148,   414,   414, 
      414,   414,   414,   414, 20217, 20286, 20355,   414, 20424,   414, 
    20493, 20562, 20631, 20700,   414, 20769, 20838, 20907,   414, 20976, 
    21045, 21114, 21183, 21252, 21321,   414, 21390, 21459, 21528, 21597, 
    21666, 21735, 21804,   414, 21873, 21942, 22011, 22080, 22149, 22218, 
      414, 22287, 22356, 22425, 22494, 22563, 22632, 22701, 22425, 22770, 
    22839, 22908, 22977, 23046, 23115,   414
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\5\2\6"+
    "\2\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\10\1\23\1\10\1\24\1\25"+
    "\1\10\1\26\1\27\1\30\2\10\1\3\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\10"+
    "\1\42\1\10\1\43\2\10\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\105\3\107\0\1\5\106\0\1\6\1\0\2\70\2\6"+
    "\2\70\1\71\2\0\14\70\1\72\6\0\7\70\1\72"+
    "\7\70\24\0\2\7\1\0\2\7\1\73\6\7\1\74"+
    "\70\7\4\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\13\10\1\0\1\10\3\0\22\10\31\0\1\75\2\0"+
    "\2\76\2\0\12\75\1\77\1\100\1\101\54\0\2\12"+
    "\1\0\11\12\1\102\1\0\67\12\4\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\10\10\1\103\2\10\1\0"+
    "\1\10\3\0\5\10\1\104\14\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\4\10\1\105\6\10\1\0"+
    "\1\10\3\0\10\10\1\106\11\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\1\107\3\10\1\110\6\10"+
    "\1\0\1\10\3\0\4\10\1\111\3\10\1\112\11\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\1\113"+
    "\12\10\1\0\1\10\3\0\12\10\1\114\7\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\13\10\1\0"+
    "\1\10\3\0\12\10\1\115\7\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\4\10\1\116\6\10\1\0"+
    "\1\10\3\0\12\10\1\117\1\10\1\120\4\10\1\121"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\13\10"+
    "\1\0\1\10\3\0\7\10\1\122\1\123\11\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\3\10\1\124"+
    "\7\10\1\0\1\10\3\0\5\10\1\125\14\10\30\0"+
    "\1\10\1\126\1\10\1\0\4\10\1\0\1\12\1\0"+
    "\13\10\1\0\1\10\3\0\22\10\30\0\1\70\3\0"+
    "\2\70\20\0\1\127\3\0\1\130\102\0\1\131\25\0"+
    "\1\132\2\0\1\133\101\0\1\134\104\0\1\135\26\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\1\136\12\10"+
    "\1\0\1\10\3\0\4\10\1\137\3\10\1\140\3\10"+
    "\1\141\5\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\13\10\1\0\1\10\3\0\10\10\1\142\11\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\5\10"+
    "\1\143\5\10\1\0\1\10\3\0\7\10\1\144\4\10"+
    "\1\145\2\10\1\146\2\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\4\10\1\147\3\10\1\150\2\10"+
    "\1\0\1\10\3\0\22\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\2\10\1\151\1\152\7\10\1\0"+
    "\1\10\3\0\22\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\13\10\1\0\1\10\3\0\6\10\1\153"+
    "\13\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\13\10\1\0\1\10\3\0\10\10\1\154\1\10\1\155"+
    "\6\10\1\156\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\3\10\1\157\3\10\1\160\3\10\1\0\1\10"+
    "\3\0\4\10\1\161\15\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\13\10\1\0\1\10\3\0\10\10"+
    "\1\162\11\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\10\10\1\163\2\10\1\0\1\10\3\0\22\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\13\10"+
    "\1\0\1\10\3\0\14\10\1\164\5\10\105\0\1\165"+
    "\105\0\1\166\104\0\1\167\104\0\1\170\1\0\1\171"+
    "\102\0\1\172\2\0\1\173\101\0\1\174\3\0\1\175"+
    "\100\0\1\176\4\0\1\177\77\0\1\200\5\0\1\201"+
    "\76\0\1\202\104\0\1\203\26\0\1\70\1\0\6\70"+
    "\1\71\2\0\14\70\1\72\6\0\7\70\1\72\7\70"+
    "\53\0\1\204\1\205\60\0\1\70\1\0\6\70\1\71"+
    "\2\0\14\70\1\72\1\70\5\0\7\70\1\72\7\70"+
    "\7\0\1\70\14\0\2\206\1\0\2\206\1\73\77\206"+
    "\2\7\1\0\2\7\1\207\77\7\10\0\2\210\103\0"+
    "\1\211\104\0\1\212\104\0\1\213\74\0\2\12\1\0"+
    "\102\12\4\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\5\10\1\214\5\10\1\0\1\10\3\0\22\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\13\10\1\0"+
    "\1\10\3\0\15\10\1\215\4\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\13\10\1\0\1\10\3\0"+
    "\12\10\1\216\7\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\13\10\1\0\1\10\3\0\10\10\1\217"+
    "\11\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\13\10\1\0\1\10\3\0\4\10\1\220\15\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\13\10\1\0"+
    "\1\10\3\0\7\10\1\221\12\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\13\10\1\0\1\10\3\0"+
    "\10\10\1\222\11\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\4\10\1\223\6\10\1\0\1\10\3\0"+
    "\22\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\13\10\1\0\1\10\3\0\15\10\1\224\4\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\13\10\1\0"+
    "\1\10\3\0\17\10\1\225\2\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\5\10\1\226\5\10\1\0"+
    "\1\10\3\0\7\10\1\227\3\10\1\230\6\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\10\10\1\231"+
    "\2\10\1\0\1\10\3\0\21\10\1\232\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\13\10\1\0\1\10"+
    "\3\0\15\10\1\233\4\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\4\10\1\234\6\10\1\0\1\10"+
    "\3\0\7\10\1\235\12\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\13\10\1\0\1\10\3\0\6\10"+
    "\1\236\13\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\4\10\1\237\6\10\1\0\1\10\3\0\22\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\13\10"+
    "\1\0\1\10\3\0\4\10\1\240\2\10\1\241\12\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\13\10"+
    "\1\0\1\10\3\0\5\10\1\242\1\10\1\243\12\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\13\10"+
    "\1\0\1\10\3\0\7\10\1\244\12\10\24\0\2\126"+
    "\1\0\2\126\1\0\6\126\1\245\70\126\32\0\1\246"+
    "\110\0\1\247\52\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\5\10\1\250\5\10\1\0\1\10\3\0\5\10"+
    "\1\251\14\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\1\252\12\10\1\0\1\10\3\0\22\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\3\10\1\253"+
    "\7\10\1\0\1\10\3\0\22\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\1\254\12\10\1\0\1\10"+
    "\3\0\22\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\3\10\1\255\7\10\1\0\1\10\3\0\22\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\1\256"+
    "\3\10\1\257\6\10\1\0\1\10\3\0\22\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\13\10\1\0"+
    "\1\10\3\0\13\10\1\260\4\10\1\261\1\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\13\10\1\0"+
    "\1\10\3\0\10\10\1\262\11\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\13\10\1\0\1\10\3\0"+
    "\7\10\1\263\12\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\13\10\1\0\1\10\3\0\7\10\1\264"+
    "\1\265\11\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\1\10\1\266\11\10\1\0\1\10\3\0\22\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\5\10"+
    "\1\267\5\10\1\0\1\10\3\0\3\10\1\270\1\271"+
    "\15\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\13\10\1\0\1\10\3\0\12\10\1\272\7\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\10\10\1\273"+
    "\2\10\1\0\1\10\3\0\22\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\2\10\1\274\10\10\1\0"+
    "\1\10\3\0\4\10\1\275\15\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\3\10\1\276\7\10\1\0"+
    "\1\10\3\0\22\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\10\10\1\277\2\10\1\0\1\10\3\0"+
    "\22\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\5\10\1\300\5\10\1\0\1\10\3\0\6\10\1\301"+
    "\13\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\13\10\1\0\1\10\3\0\5\10\1\302\14\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\5\10\1\303"+
    "\5\10\1\0\1\10\3\0\22\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\5\10\1\304\5\10\1\0"+
    "\1\10\3\0\22\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\13\10\1\0\1\10\3\0\7\10\1\305"+
    "\12\10\106\0\1\306\104\0\1\307\32\0\1\310\104\0"+
    "\1\311\104\0\2\75\105\0\1\312\13\0\1\312\70\0"+
    "\1\313\13\0\1\313\70\0\1\314\13\0\1\314\62\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\13\10\1\0"+
    "\1\10\3\0\10\10\1\315\11\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\1\316\12\10\1\0\1\10"+
    "\3\0\22\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\13\10\1\0\1\10\3\0\4\10\1\317\15\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\13\10"+
    "\1\0\1\10\3\0\5\10\1\320\14\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\13\10\1\0\1\10"+
    "\3\0\12\10\1\321\7\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\1\322\12\10\1\0\1\10\3\0"+
    "\22\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\13\10\1\0\1\10\3\0\12\10\1\323\7\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\10\10\1\324"+
    "\2\10\1\0\1\10\3\0\22\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\3\10\1\325\7\10\1\0"+
    "\1\10\3\0\22\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\13\10\1\0\1\10\3\0\7\10\1\326"+
    "\12\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\13\10\1\0\1\10\3\0\12\10\1\327\7\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\13\10\1\0"+
    "\1\10\3\0\6\10\1\330\13\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\13\10\1\0\1\10\3\0"+
    "\10\10\1\331\11\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\13\10\1\0\1\10\3\0\5\10\1\332"+
    "\14\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\13\10\1\0\1\10\3\0\12\10\1\333\7\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\5\10\1\334"+
    "\5\10\1\0\1\10\3\0\22\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\1\335\12\10\1\0\1\10"+
    "\3\0\22\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\13\10\1\0\1\10\3\0\11\10\1\336\10\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\13\10"+
    "\1\0\1\10\3\0\7\10\1\337\12\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\13\10\1\0\1\10"+
    "\3\0\10\10\1\340\11\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\3\10\1\341\7\10\1\0\1\10"+
    "\3\0\22\10\24\0\2\126\1\0\102\126\4\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\13\10\1\0\1\10"+
    "\3\0\3\10\1\342\16\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\13\10\1\0\1\10\3\0\12\10"+
    "\1\343\7\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\13\10\1\0\1\10\3\0\5\10\1\344\14\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\5\10"+
    "\1\345\5\10\1\0\1\10\3\0\5\10\1\346\14\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\4\10"+
    "\1\347\6\10\1\0\1\10\3\0\22\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\13\10\1\0\1\10"+
    "\3\0\13\10\1\350\6\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\5\10\1\351\5\10\1\0\1\10"+
    "\3\0\22\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\10\10\1\352\2\10\1\0\1\10\3\0\7\10"+
    "\1\353\12\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\3\10\1\354\7\10\1\0\1\10\3\0\22\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\13\10"+
    "\1\0\1\10\3\0\12\10\1\355\7\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\4\10\1\356\6\10"+
    "\1\0\1\10\3\0\22\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\5\10\1\357\5\10\1\0\1\10"+
    "\3\0\22\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\6\10\1\360\4\10\1\0\1\10\3\0\22\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\5\10"+
    "\1\361\5\10\1\0\1\10\3\0\22\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\13\10\1\0\1\10"+
    "\3\0\4\10\1\362\15\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\13\10\1\0\1\10\3\0\4\10"+
    "\1\363\15\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\13\10\1\0\1\10\3\0\7\10\1\364\12\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\4\10"+
    "\1\365\6\10\1\0\1\10\3\0\22\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\1\10\1\366\11\10"+
    "\1\0\1\10\3\0\22\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\1\367\12\10\1\0\1\10\3\0"+
    "\7\10\1\370\12\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\13\10\1\0\1\10\3\0\12\10\1\371"+
    "\7\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\1\372\12\10\1\0\1\10\3\0\22\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\13\10\1\0\1\10"+
    "\3\0\15\10\1\373\4\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\13\10\1\0\1\10\3\0\12\10"+
    "\1\374\7\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\13\10\1\0\1\10\3\0\4\10\1\375\3\10"+
    "\1\376\11\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\13\10\1\0\1\10\3\0\12\10\1\377\7\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\13\10"+
    "\1\0\1\10\3\0\10\10\1\u0100\11\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\1\u0101\12\10\1\0"+
    "\1\10\3\0\22\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\13\10\1\0\1\10\3\0\4\10\1\u0102"+
    "\15\10\36\0\1\u0103\13\0\1\u0103\70\0\1\u0104\13\0"+
    "\1\u0104\62\0\1\u0105\3\0\2\u0105\1\0\1\u0105\3\0"+
    "\3\u0105\11\0\1\u0105\6\0\1\u0105\5\0\2\u0105\37\0"+
    "\1\u0106\3\0\2\u0106\1\0\1\u0106\3\0\3\u0106\11\0"+
    "\1\u0106\6\0\1\u0106\5\0\2\u0106\37\0\1\u0107\3\0"+
    "\2\u0107\1\0\1\u0107\3\0\3\u0107\11\0\1\u0107\6\0"+
    "\1\u0107\5\0\2\u0107\37\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\13\10\1\0\1\10\3\0\16\10\1\u0108"+
    "\3\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\13\10\1\0\1\10\3\0\12\10\1\u0109\7\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\3\10\1\u010a"+
    "\7\10\1\0\1\10\3\0\22\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\5\10\1\u010b\5\10\1\0"+
    "\1\10\3\0\22\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\13\10\1\0\1\10\3\0\5\10\1\u010c"+
    "\14\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\4\10\1\u010d\6\10\1\0\1\10\3\0\22\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\5\10\1\u010e"+
    "\5\10\1\0\1\10\3\0\22\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\13\10\1\0\1\10\3\0"+
    "\5\10\1\u010f\14\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\13\10\1\0\1\10\3\0\4\10\1\u0110"+
    "\15\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\13\10\1\0\1\10\3\0\17\10\1\u0111\2\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\3\10\1\u0112"+
    "\7\10\1\0\1\10\3\0\7\10\1\u0113\1\10\1\u0114"+
    "\10\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\10\10\1\u0115\2\10\1\0\1\10\3\0\22\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\5\10\1\u0116"+
    "\5\10\1\0\1\10\3\0\22\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\13\10\1\0\1\10\3\0"+
    "\13\10\1\u0117\6\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\3\10\1\u0118\7\10\1\0\1\10\3\0"+
    "\22\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\13\10\1\0\1\10\3\0\13\10\1\u0119\6\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\13\10\1\0"+
    "\1\10\3\0\14\10\1\u011a\5\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\13\10\1\0\1\10\3\0"+
    "\5\10\1\u011b\14\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\13\10\1\0\1\10\3\0\7\10\1\u011c"+
    "\12\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\5\10\1\u011d\5\10\1\0\1\10\3\0\22\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\13\10\1\0"+
    "\1\10\3\0\7\10\1\u011e\12\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\13\10\1\0\1\10\3\0"+
    "\3\10\1\u011f\16\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\3\10\1\u0120\7\10\1\0\1\10\3\0"+
    "\22\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\13\10\1\0\1\10\3\0\12\10\1\u0121\7\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\13\10\1\0"+
    "\1\10\3\0\10\10\1\u0122\11\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\5\10\1\u0123\5\10\1\0"+
    "\1\10\3\0\22\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\13\10\1\0\1\10\3\0\3\10\1\u0124"+
    "\16\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\1\u0125\12\10\1\0\1\10\3\0\22\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\13\10\1\0\1\10"+
    "\3\0\12\10\1\u0126\7\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\13\10\1\0\1\10\3\0\7\10"+
    "\1\u0127\12\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\10\10\1\u0128\2\10\1\0\1\10\3\0\22\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\3\10"+
    "\1\u0129\7\10\1\0\1\10\3\0\22\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\1\u012a\12\10\1\0"+
    "\1\10\3\0\22\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\13\10\1\0\1\10\3\0\4\10\1\u012b"+
    "\15\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\10\10\1\u012c\2\10\1\0\1\10\3\0\22\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\3\10\1\u012d"+
    "\7\10\1\0\1\10\3\0\22\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\5\10\1\u012e\5\10\1\0"+
    "\1\10\3\0\22\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\13\10\1\0\1\10\3\0\15\10\1\u012f"+
    "\4\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\4\10\1\u0130\6\10\1\0\1\10\3\0\22\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\13\10\1\0"+
    "\1\10\3\0\7\10\1\u0131\12\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\4\10\1\u0132\6\10\1\0"+
    "\1\10\3\0\22\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\1\10\1\u0133\11\10\1\0\1\10\3\0"+
    "\22\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\13\10\1\0\1\10\3\0\12\10\1\u0134\7\10\30\0"+
    "\1\u0135\3\0\2\u0135\1\0\1\u0135\3\0\3\u0135\11\0"+
    "\1\u0135\6\0\1\u0135\5\0\2\u0135\37\0\1\u0136\3\0"+
    "\2\u0136\1\0\1\u0136\3\0\3\u0136\11\0\1\u0136\6\0"+
    "\1\u0136\5\0\2\u0136\37\0\1\u0105\3\0\1\u0137\1\u0105"+
    "\1\0\1\u0105\3\0\3\u0105\11\0\1\u0105\6\0\1\u0105"+
    "\5\0\2\u0105\37\0\1\u0106\3\0\1\u0138\1\u0106\1\0"+
    "\1\u0106\3\0\3\u0106\11\0\1\u0106\6\0\1\u0106\5\0"+
    "\2\u0106\37\0\1\u0107\3\0\1\u0139\1\u0107\1\0\1\u0107"+
    "\3\0\3\u0107\11\0\1\u0107\6\0\1\u0107\5\0\2\u0107"+
    "\37\0\1\10\1\0\1\10\1\0\4\10\3\0\13\10"+
    "\1\0\1\10\3\0\11\10\1\u013a\10\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\13\10\1\0\1\10"+
    "\3\0\6\10\1\u013b\13\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\3\10\1\u013c\7\10\1\0\1\10"+
    "\3\0\22\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\13\10\1\0\1\10\3\0\12\10\1\u013d\7\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\5\10"+
    "\1\u013e\5\10\1\0\1\10\3\0\22\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\1\u013f\12\10\1\0"+
    "\1\10\3\0\22\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\1\u0140\12\10\1\0\1\10\3\0\22\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\13\10"+
    "\1\0\1\10\3\0\11\10\1\u0141\10\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\13\10\1\0\1\10"+
    "\3\0\12\10\1\u0142\7\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\1\u0143\12\10\1\0\1\10\3\0"+
    "\22\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\13\10\1\0\1\10\3\0\7\10\1\u0144\12\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\3\10\1\u0145"+
    "\7\10\1\0\1\10\3\0\22\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\3\10\1\u0146\7\10\1\0"+
    "\1\10\3\0\22\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\13\10\1\0\1\10\3\0\1\10\1\u0147"+
    "\20\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\13\10\1\0\1\10\3\0\3\10\1\u0148\16\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\5\10\1\u0149"+
    "\5\10\1\0\1\10\3\0\22\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\13\10\1\0\1\10\3\0"+
    "\13\10\1\u014a\6\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\13\10\1\0\1\10\3\0\11\10\1\u014b"+
    "\10\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\2\10\1\u014c\10\10\1\0\1\10\3\0\22\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\13\10\1\0"+
    "\1\10\3\0\14\10\1\u014d\5\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\5\10\1\u014e\5\10\1\0"+
    "\1\10\3\0\22\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\13\10\1\0\1\10\3\0\3\10\1\u014f"+
    "\16\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\13\10\1\0\1\10\3\0\3\10\1\u0150\16\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\13\10\1\0"+
    "\1\10\3\0\11\10\1\u0151\10\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\13\10\1\0\1\10\3\0"+
    "\12\10\1\u0152\7\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\5\10\1\u0153\5\10\1\0\1\10\3\0"+
    "\22\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\13\10\1\0\1\10\3\0\12\10\1\u0154\7\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\13\10\1\0"+
    "\1\10\3\0\4\10\1\u0155\15\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\13\10\1\0\1\10\3\0"+
    "\12\10\1\u0156\7\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\13\10\1\0\1\10\3\0\12\10\1\u0157"+
    "\7\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\13\10\1\0\1\10\3\0\7\10\1\u0158\12\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\3\10\1\u0159"+
    "\7\10\1\0\1\10\3\0\22\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\13\10\1\0\1\10\3\0"+
    "\3\10\1\u015a\16\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\5\10\1\u015b\5\10\1\0\1\10\3\0"+
    "\22\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\13\10\1\0\1\10\3\0\4\10\1\u015c\15\10\30\0"+
    "\1\u0135\3\0\1\u015d\1\u0135\1\0\1\u0135\3\0\3\u0135"+
    "\11\0\1\u0135\6\0\1\u0135\5\0\2\u0135\37\0\1\u0136"+
    "\3\0\1\u015e\1\u0136\1\0\1\u0136\3\0\3\u0136\11\0"+
    "\1\u0136\6\0\1\u0136\5\0\2\u0136\37\0\1\u0105\3\0"+
    "\1\u0137\1\u0105\1\312\1\u0105\3\0\3\u0105\4\0\1\312"+
    "\4\0\1\u0105\6\0\1\u0105\5\0\2\u0105\37\0\1\u0106"+
    "\3\0\1\u0138\1\u0106\1\u015f\1\u0106\3\0\3\u0106\4\0"+
    "\1\u015f\4\0\1\u0106\6\0\1\u0106\5\0\2\u0106\37\0"+
    "\1\u0107\3\0\1\u0139\1\u0107\1\u0160\1\u0107\3\0\3\u0107"+
    "\4\0\1\u0160\4\0\1\u0107\6\0\1\u0107\5\0\2\u0107"+
    "\37\0\1\10\1\0\1\10\1\0\4\10\3\0\1\u0161"+
    "\12\10\1\0\1\10\3\0\22\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\4\10\1\u0162\6\10\1\0"+
    "\1\10\3\0\22\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\13\10\1\0\1\10\3\0\12\10\1\u0163"+
    "\7\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\5\10\1\u0164\5\10\1\0\1\10\3\0\22\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\13\10\1\0"+
    "\1\10\3\0\15\10\1\u0165\4\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\2\10\1\u0166\10\10\1\0"+
    "\1\10\3\0\22\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\13\10\1\0\1\10\3\0\4\10\1\u0167"+
    "\15\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\13\10\1\0\1\10\3\0\4\10\1\u0168\15\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\13\10\1\0"+
    "\1\10\3\0\12\10\1\u0169\7\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\10\10\1\u016a\2\10\1\0"+
    "\1\10\3\0\22\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\13\10\1\0\1\10\3\0\3\10\1\u016b"+
    "\16\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\13\10\1\0\1\10\3\0\1\10\1\u016c\20\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\13\10\1\0"+
    "\1\10\3\0\12\10\1\u016d\7\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\5\10\1\u016e\5\10\1\0"+
    "\1\10\3\0\22\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\13\10\1\0\1\10\3\0\12\10\1\u016f"+
    "\7\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\13\10\1\0\1\10\3\0\10\10\1\u0170\11\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\5\10\1\u0171"+
    "\5\10\1\0\1\10\3\0\22\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\13\10\1\0\1\10\3\0"+
    "\3\10\1\u0172\16\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\13\10\1\0\1\10\3\0\7\10\1\u0173"+
    "\12\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\13\10\1\0\1\10\3\0\12\10\1\u0174\7\10\30\0"+
    "\1\u0135\3\0\1\u015d\1\u0135\1\u0175\1\u0135\3\0\3\u0135"+
    "\4\0\1\u0175\4\0\1\u0135\6\0\1\u0135\5\0\2\u0135"+
    "\37\0\1\u0136\3\0\1\u015e\1\u0136\1\u0176\1\u0136\3\0"+
    "\3\u0136\4\0\1\u0176\4\0\1\u0136\6\0\1\u0136\5\0"+
    "\2\u0136\37\0\1\u0177\3\0\2\u0177\1\0\1\u0177\3\0"+
    "\3\u0177\11\0\1\u0177\6\0\1\u0177\5\0\2\u0177\37\0"+
    "\1\u0178\3\0\2\u0178\1\0\1\u0178\3\0\3\u0178\11\0"+
    "\1\u0178\6\0\1\u0178\5\0\2\u0178\37\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\13\10\1\0\1\10\3\0"+
    "\3\10\1\u0179\16\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\13\10\1\0\1\10\3\0\6\10\1\u017a"+
    "\13\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\4\10\1\u017b\6\10\1\0\1\10\3\0\22\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\13\10\1\0"+
    "\1\10\3\0\12\10\1\u017c\7\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\13\10\1\0\1\10\3\0"+
    "\12\10\1\u017d\7\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\13\10\1\0\1\10\3\0\12\10\1\u017e"+
    "\7\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\13\10\1\0\1\10\3\0\11\10\1\u017f\10\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\13\10\1\0"+
    "\1\10\3\0\12\10\1\u0180\7\10\30\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\1\u0181\12\10\1\0\1\10"+
    "\3\0\22\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\13\10\1\0\1\10\3\0\3\10\1\u0182\16\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\13\10"+
    "\1\0\1\10\3\0\12\10\1\u0183\7\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\4\10\1\u0184\6\10"+
    "\1\0\1\10\3\0\22\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\13\10\1\0\1\10\3\0\1\10"+
    "\1\u0185\20\10\30\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\5\10\1\u0186\5\10\1\0\1\10\3\0\22\10"+
    "\30\0\1\u0187\3\0\2\u0187\1\0\1\u0187\3\0\3\u0187"+
    "\11\0\1\u0187\6\0\1\u0187\5\0\2\u0187\37\0\1\u0188"+
    "\3\0\2\u0188\1\0\1\u0188\3\0\3\u0188\11\0\1\u0188"+
    "\6\0\1\u0188\5\0\2\u0188\37\0\1\u0177\3\0\1\u0189"+
    "\1\u0177\1\0\1\u0177\3\0\3\u0177\11\0\1\u0177\6\0"+
    "\1\u0177\5\0\2\u0177\37\0\1\u0178\3\0\1\u018a\1\u0178"+
    "\1\0\1\u0178\3\0\3\u0178\11\0\1\u0178\6\0\1\u0178"+
    "\5\0\2\u0178\37\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\13\10\1\0\1\10\3\0\12\10\1\u018b\7\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\4\10"+
    "\1\u018c\6\10\1\0\1\10\3\0\22\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\13\10\1\0\1\10"+
    "\3\0\5\10\1\u018d\14\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\1\u018e\12\10\1\0\1\10\3\0"+
    "\22\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\13\10\1\0\1\10\3\0\11\10\1\u018f\10\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\13\10\1\0"+
    "\1\10\3\0\3\10\1\u0190\16\10\30\0\1\u0187\3\0"+
    "\1\u0191\1\u0187\1\0\1\u0187\3\0\3\u0187\11\0\1\u0187"+
    "\6\0\1\u0187\5\0\2\u0187\37\0\1\u0188\3\0\1\u0192"+
    "\1\u0188\1\0\1\u0188\3\0\3\u0188\11\0\1\u0188\6\0"+
    "\1\u0188\5\0\2\u0188\37\0\1\u0177\3\0\1\u0189\1\u0177"+
    "\1\u0193\1\u0177\3\0\3\u0177\4\0\1\u0193\4\0\1\u0177"+
    "\6\0\1\u0177\5\0\2\u0177\37\0\1\u0178\3\0\1\u018a"+
    "\1\u0178\1\u0194\1\u0178\3\0\3\u0178\4\0\1\u0194\4\0"+
    "\1\u0178\6\0\1\u0178\5\0\2\u0178\37\0\1\10\1\0"+
    "\1\10\1\0\4\10\3\0\13\10\1\0\1\10\3\0"+
    "\12\10\1\u0195\7\10\30\0\1\10\1\0\1\10\1\0"+
    "\4\10\3\0\5\10\1\u0196\5\10\1\0\1\10\3\0"+
    "\22\10\30\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\13\10\1\0\1\10\3\0\5\10\1\u0197\14\10\30\0"+
    "\1\10\1\0\1\10\1\0\4\10\3\0\1\u0198\12\10"+
    "\1\0\1\10\3\0\22\10\30\0\1\u0187\3\0\1\u0191"+
    "\1\u0187\1\u0199\1\u0187\3\0\3\u0187\4\0\1\u0199\4\0"+
    "\1\u0187\6\0\1\u0187\5\0\2\u0187\37\0\1\u0188\3\0"+
    "\1\u0192\1\u0188\1\u019a\1\u0188\3\0\3\u0188\4\0\1\u019a"+
    "\4\0\1\u0188\6\0\1\u0188\5\0\2\u0188\37\0\1\u019b"+
    "\3\0\2\u019b\1\0\1\u019b\3\0\3\u019b\11\0\1\u019b"+
    "\6\0\1\u019b\5\0\2\u019b\37\0\1\u019c\3\0\2\u019c"+
    "\1\0\1\u019c\3\0\3\u019c\11\0\1\u019c\6\0\1\u019c"+
    "\5\0\2\u019c\37\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\5\10\1\u019d\5\10\1\0\1\10\3\0\22\10"+
    "\30\0\1\10\1\0\1\10\1\0\4\10\3\0\5\10"+
    "\1\u019e\5\10\1\0\1\10\3\0\22\10\30\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\13\10\1\0\1\10"+
    "\3\0\5\10\1\u019f\14\10\30\0\1\u01a0\3\0\2\u01a0"+
    "\1\0\1\u01a0\3\0\3\u01a0\11\0\1\u01a0\6\0\1\u01a0"+
    "\5\0\2\u01a0\37\0\1\u01a1\3\0\2\u01a1\1\0\1\u01a1"+
    "\3\0\3\u01a1\11\0\1\u01a1\6\0\1\u01a1\5\0\2\u01a1"+
    "\37\0\1\u019b\3\0\1\u01a2\1\u019b\1\0\1\u019b\3\0"+
    "\3\u019b\11\0\1\u019b\6\0\1\u019b\5\0\2\u019b\37\0"+
    "\1\u019c\3\0\1\u01a3\1\u019c\1\0\1\u019c\3\0\3\u019c"+
    "\11\0\1\u019c\6\0\1\u019c\5\0\2\u019c\37\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\13\10\1\0\1\10"+
    "\3\0\1\10\1\u01a4\20\10\30\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\5\10\1\u01a5\5\10\1\0\1\10"+
    "\3\0\22\10\30\0\1\u01a0\3\0\1\u01a6\1\u01a0\1\0"+
    "\1\u01a0\3\0\3\u01a0\11\0\1\u01a0\6\0\1\u01a0\5\0"+
    "\2\u01a0\37\0\1\u01a1\3\0\1\u01a7\1\u01a1\1\0\1\u01a1"+
    "\3\0\3\u01a1\11\0\1\u01a1\6\0\1\u01a1\5\0\2\u01a1"+
    "\37\0\1\u019b\3\0\1\u01a2\1\u019b\1\u01a8\1\u019b\3\0"+
    "\3\u019b\4\0\1\u01a8\4\0\1\u019b\6\0\1\u019b\5\0"+
    "\2\u019b\37\0\1\u019c\3\0\1\u01a3\1\u019c\1\u01a9\1\u019c"+
    "\3\0\3\u019c\4\0\1\u01a9\4\0\1\u019c\6\0\1\u019c"+
    "\5\0\2\u019c\37\0\1\10\1\0\1\10\1\0\4\10"+
    "\3\0\13\10\1\0\1\10\3\0\3\10\1\u01aa\16\10"+
    "\30\0\1\u01a0\3\0\1\u01a6\1\u01a0\1\u01ab\1\u01a0\3\0"+
    "\3\u01a0\4\0\1\u01ab\4\0\1\u01a0\6\0\1\u01a0\5\0"+
    "\2\u01a0\37\0\1\u01a1\3\0\1\u01a7\1\u01a1\1\u01ac\1\u01a1"+
    "\3\0\3\u01a1\4\0\1\u01ac\4\0\1\u01a1\6\0\1\u01a1"+
    "\5\0\2\u01a1\37\0\1\u01ad\3\0\2\u01ad\1\0\1\u01ad"+
    "\3\0\3\u01ad\11\0\1\u01ad\6\0\1\u01ad\5\0\2\u01ad"+
    "\37\0\1\u01ae\3\0\2\u01ae\1\0\1\u01ae\3\0\3\u01ae"+
    "\11\0\1\u01ae\6\0\1\u01ae\5\0\2\u01ae\37\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\1\u01af\12\10\1\0"+
    "\1\10\3\0\22\10\30\0\1\70\3\0\2\70\1\0"+
    "\1\70\3\0\3\70\11\0\1\70\6\0\1\70\5\0"+
    "\2\70\37\0\1\u01b0\3\0\2\u01b0\1\0\1\u01b0\3\0"+
    "\3\u01b0\11\0\1\u01b0\6\0\1\u01b0\5\0\2\u01b0\37\0"+
    "\1\u01ae\3\0\1\u01b1\1\u01ae\1\0\1\u01ae\3\0\3\u01ae"+
    "\11\0\1\u01ae\6\0\1\u01ae\5\0\2\u01ae\37\0\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\13\10\1\0\1\10"+
    "\3\0\5\10\1\u01b2\14\10\30\0\1\u01b0\3\0\1\u01b3"+
    "\1\u01b0\1\0\1\u01b0\3\0\3\u01b0\11\0\1\u01b0\6\0"+
    "\1\u01b0\5\0\2\u01b0\37\0\1\u01ae\3\0\1\u01b1\1\u01ae"+
    "\1\313\1\u01ae\3\0\3\u01ae\4\0\1\313\4\0\1\u01ae"+
    "\6\0\1\u01ae\5\0\2\u01ae\37\0\1\10\1\0\1\10"+
    "\1\0\4\10\3\0\5\10\1\u01b4\5\10\1\0\1\10"+
    "\3\0\22\10\30\0\1\u01b0\3\0\1\u01b3\1\u01b0\1\u0103"+
    "\1\u01b0\3\0\3\u01b0\4\0\1\u0103\4\0\1\u01b0\6\0"+
    "\1\u01b0\5\0\2\u01b0\33\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  9,  1,  9,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9,  9, 
     9,  9,  9,  9,  9,  9,  9,  1,  0,  1,  1,  0,  9,  1,  0,  0, 
     0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  0,  9,  9,  9,  1,  9,  9,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  9,  9,  9,  9,  1,  9,  1,  9,  9,  9,  9,  9, 
     9,  9,  9,  0,  0,  0,  1,  1,  0,  0,  0,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  0,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  9,  9,  0,  0,  0,  0,  0,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  0,  0,  1,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  0,  0,  1,  0,  0,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1, 
     0,  0,  0,  0,  1,  1,  1,  1,  0,  0,  0,  0,  1,  1,  1,  0, 
     0,  0,  0,  1,  1,  0,  0,  0,  0,  1,  0,  0,  1,  0,  1,  0, 
     0,  1,  0,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	

    public Lexer(ComplexSymbolFactory sf, java.io.InputStream is){
		this(is);
        symbolFactory = sf;
    }
	public Lexer(ComplexSymbolFactory sf, java.io.Reader reader){
		this(reader);
        symbolFactory = sf;
    }
    
    private StringBuffer sb;
    private ComplexSymbolFactory symbolFactory;
    private int csline,cscolumn;

    public Symbol symbol(String name, int code){
		return symbolFactory.newSymbol(name, code,
						new Location(yyline+1,yycolumn+1, yychar), // -yylength()
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength())
				);
    }
    public Symbol symbol(String name, int code, String lexem){
	return symbolFactory.newSymbol(name, code, 
						new Location(yyline+1, yycolumn +1, yychar), 
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength()), lexem);
    }
    
    protected void emit_warning(String message){
    	System.out.println("scanner warning: " + message + " at : 2 "+ 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }
    
    protected void emit_error(String message){
    	System.out.println("scanner error: " + message + " at : 2" + 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[23184];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2314) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 371: 
          {  return symbolFactory.newSymbol("MUTABLE", MUTABLE);  }
        case 437: break;
        case 368: 
          {  return symbolFactory.newSymbol("DEFAULT", DEFAULT);  }
        case 438: break;
        case 366: 
          {  return symbolFactory.newSymbol("INCLUDE", INCLUDE);  }
        case 439: break;
        case 364: 
          {  return symbolFactory.newSymbol("PRIVATE", PRIVATE);  }
        case 440: break;
        case 358: 
          {  return symbolFactory.newSymbol("VIRTUAL", VIRTUAL);  }
        case 441: break;
        case 357: 
          {  return symbolFactory.newSymbol("TYPEDEF", TYPEDEF);  }
        case 442: break;
        case 60: 
        case 61: 
        case 135: 
        case 260: 
        case 310: 
        case 428: 
          {  return symbolFactory.newSymbol("ESCAPED", ESCAPED);  }
        case 443: break;
        case 52: 
          {  return symbolFactory.newSymbol("CRPAREN", CRPAREN);  }
        case 444: break;
        case 51: 
          {  return symbolFactory.newSymbol("CLPAREN", CLPAREN);  }
        case 445: break;
        case 46: 
          {  return symbolFactory.newSymbol("SQUIGLY", SQUIGLY);  }
        case 446: break;
        case 43: 
          {  return symbolFactory.newSymbol("PERCENT", PERCENT);  }
        case 447: break;
        case 89: 
          {  return symbolFactory.newSymbol("ASS_SUB", ASS_SUB);  }
        case 448: break;
        case 91: 
          {  return symbolFactory.newSymbol("ASS_DIV", ASS_DIV);  }
        case 449: break;
        case 92: 
          {  return symbolFactory.newSymbol("ASS_MUL", ASS_MUL);  }
        case 450: break;
        case 123: 
          {  return symbolFactory.newSymbol("ASS_AND", ASS_AND);  }
        case 451: break;
        case 124: 
          {  return symbolFactory.newSymbol("LOG_AND", LOG_AND);  }
        case 452: break;
        case 127: 
          {  return symbolFactory.newSymbol("ASS_ADD", ASS_ADD);  }
        case 453: break;
        case 129: 
          {  return symbolFactory.newSymbol("ASS_MOD", ASS_MOD);  }
        case 454: break;
        case 130: 
          {  return symbolFactory.newSymbol("ASS_XOR", ASS_XOR);  }
        case 455: break;
        case 197: 
          {  return symbolFactory.newSymbol("ASS_SHL", ASS_SHL);  }
        case 456: break;
        case 198: 
          {  return symbolFactory.newSymbol("ASS_SHR", ASS_SHR);  }
        case 457: break;
        case 206: 
          {  return symbolFactory.newSymbol("BOOLEAN", BOOLEAN);  }
        case 458: break;
        case 307: 
          {  return symbolFactory.newSymbol("WHILE", WHILE);  }
        case 459: break;
        case 290: 
          {  return symbolFactory.newSymbol("SHORT", SHORT);  }
        case 460: break;
        case 284: 
          {  return symbolFactory.newSymbol("CONST", CONST);  }
        case 461: break;
        case 282: 
          {  return symbolFactory.newSymbol("CLASS", CLASS);  }
        case 462: break;
        case 281: 
          {  return symbolFactory.newSymbol("CATCH", CATCH);  }
        case 463: break;
        case 280: 
          {  return symbolFactory.newSymbol("USING", USING);  }
        case 464: break;
        case 279: 
          {  return symbolFactory.newSymbol("UNION", UNION);  }
        case 465: break;
        case 272: 
          {  return symbolFactory.newSymbol("THROW", THROW);  }
        case 466: break;
        case 266: 
          {  return symbolFactory.newSymbol("FLOAT", FLOAT);  }
        case 467: break;
        case 264: 
          {  return symbolFactory.newSymbol("FALSE", FALSE);  }
        case 468: break;
        case 263: 
          {  return symbolFactory.newSymbol("BREAK", BREAK);  }
        case 469: break;
        case 54: 
          {  return symbolFactory.newSymbol("HASHT", HASHT);  }
        case 470: break;
        case 53: 
          {  return symbolFactory.newSymbol("COMMA", COMMA);  }
        case 471: break;
        case 7: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 105: 
        case 106: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 139: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 147: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 205: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 215: 
        case 216: 
        case 218: 
        case 219: 
        case 220: 
        case 222: 
        case 223: 
        case 224: 
        case 225: 
        case 227: 
        case 228: 
        case 229: 
        case 232: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 239: 
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
        case 248: 
        case 249: 
        case 251: 
        case 252: 
        case 253: 
        case 256: 
        case 257: 
        case 265: 
        case 267: 
        case 268: 
        case 269: 
        case 270: 
        case 271: 
        case 273: 
        case 274: 
        case 275: 
        case 276: 
        case 277: 
        case 278: 
        case 283: 
        case 285: 
        case 286: 
        case 287: 
        case 288: 
        case 289: 
        case 291: 
        case 292: 
        case 293: 
        case 294: 
        case 295: 
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 300: 
        case 301: 
        case 302: 
        case 303: 
        case 304: 
        case 305: 
        case 306: 
        case 314: 
        case 316: 
        case 317: 
        case 318: 
        case 319: 
        case 321: 
        case 322: 
        case 323: 
        case 324: 
        case 325: 
        case 326: 
        case 333: 
        case 334: 
        case 336: 
        case 338: 
        case 340: 
        case 343: 
        case 345: 
        case 347: 
        case 352: 
        case 353: 
        case 354: 
        case 355: 
        case 356: 
        case 359: 
        case 360: 
        case 361: 
        case 362: 
        case 363: 
        case 365: 
        case 367: 
        case 369: 
        case 370: 
        case 376: 
        case 377: 
        case 384: 
        case 385: 
        case 386: 
        case 388: 
        case 395: 
        case 396: 
        case 397: 
        case 399: 
        case 404: 
        case 406: 
        case 407: 
        case 412: 
        case 414: 
        case 419: 
        case 425: 
        case 430: 
        case 433: 
          {  return symbolFactory.newSymbol("IDENT", IDENT);  }
        case 472: break;
        case 21: 
          {  return symbolFactory.newSymbol("MINUS", MINUS);  }
        case 473: break;
        case 23: 
          {  return symbolFactory.newSymbol("TIMES", TIMES);  }
        case 474: break;
        case 35: 
          {  return symbolFactory.newSymbol("COLON", COLON);  }
        case 475: break;
        case 36: 
          {  return symbolFactory.newSymbol("EQUAL", EQUAL);  }
        case 476: break;
        case 90: 
          {  return symbolFactory.newSymbol("ARROW", ARROW);  }
        case 477: break;
        case 116: 
          {  return symbolFactory.newSymbol("SCOPE", SCOPE);  }
        case 478: break;
        case 2: 
        case 8: 
          {  emit_warning("Unrecognized character '" +yytext()+"' -- ignored");  }
        case 479: break;
        case 413: 
          {  return symbolFactory.newSymbol("STATICCAST", STATICCAST);  }
        case 480: break;
        case 122: 
          {  return symbolFactory.newSymbol("RIGHTSHIFT", RIGHTSHIFT);  }
        case 481: break;
        case 166: 
          {  return symbolFactory.newSymbol("ARROW_STAR", ARROW_STAR);  }
        case 482: break;
        case 329: 
          {  return symbolFactory.newSymbol("STR", STR);  }
        case 483: break;
        case 44: 
          {  return symbolFactory.newSymbol("XOR", XOR);  }
        case 484: break;
        case 20: 
          {  return symbolFactory.newSymbol("DOT", DOT);  }
        case 485: break;
        case 37: 
          {  return symbolFactory.newSymbol("ESC", ESC);  }
        case 486: break;
        case 40: 
          {  return symbolFactory.newSymbol("AND", AND);  }
        case 487: break;
        case 88: 
          {  return symbolFactory.newSymbol("DEC", DEC);  }
        case 488: break;
        case 128: 
          {  return symbolFactory.newSymbol("INC", INC);  }
        case 489: break;
        case 140: 
          {  return symbolFactory.newSymbol("ASM", ASM);  }
        case 490: break;
        case 146: 
          {  return symbolFactory.newSymbol("FOR", FOR);  }
        case 491: break;
        case 148: 
          {  return symbolFactory.newSymbol("NEW", NEW);  }
        case 492: break;
        case 153: 
          {  return symbolFactory.newSymbol("TRY", TRY);  }
        case 493: break;
        case 182: 
          {  return symbolFactory.newSymbol("INT", INT);  }
        case 494: break;
        case 389: 
          {  return symbolFactory.newSymbol("EXPLICIT", EXPLICIT);  }
        case 495: break;
        case 387: 
          {  return symbolFactory.newSymbol("OPERATOR", OPERATOR);  }
        case 496: break;
        case 383: 
          {  return symbolFactory.newSymbol("CONTINUE", CONTINUE);  }
        case 497: break;
        case 382: 
          {  return symbolFactory.newSymbol("UNSIGNED", UNSIGNED);  }
        case 498: break;
        case 381: 
          {  return symbolFactory.newSymbol("VOLATILE", VOLATILE);  }
        case 499: break;
        case 380: 
          {  return symbolFactory.newSymbol("TYPENAME", TYPENAME);  }
        case 500: break;
        case 379: 
          {  return symbolFactory.newSymbol("TEMPLATE", TEMPLATE);  }
        case 501: break;
        case 378: 
          {  return symbolFactory.newSymbol("REGISTER", REGISTER);  }
        case 502: break;
        case 49: 
          {  return symbolFactory.newSymbol("SQRPAREN", SQRPAREN);  }
        case 503: break;
        case 48: 
          {  return symbolFactory.newSymbol("SQLPAREN", SQLPAREN);  }
        case 504: break;
        case 165: 
          {  return symbolFactory.newSymbol("ELLIPSIS", ELLIPSIS);  }
        case 505: break;
        case 420: 
          {  return symbolFactory.newSymbol("DYNAMICCAST", DYNAMICCAST);  }
        case 506: break;
        case 6: 
        case 85: 
          {  return symbolFactory.newSymbol("STRNG", STRNG, yytext());   }
        case 507: break;
        case 38: 
          {  return symbolFactory.newSymbol("SMALLERTHAN", SMALLERTHAN);  }
        case 508: break;
        case 39: 
          {  return symbolFactory.newSymbol("GREATERTHAN", GREATERTHAN);  }
        case 509: break;
        case 255: 
          {  return symbolFactory.newSymbol("GOTO", GOTO);  }
        case 510: break;
        case 254: 
          {  return symbolFactory.newSymbol("ELSE", ELSE);  }
        case 511: break;
        case 250: 
          {  return symbolFactory.newSymbol("ENUM", ENUM);  }
        case 512: break;
        case 231: 
          {  return symbolFactory.newSymbol("LONG", LONG);  }
        case 513: break;
        case 230: 
          {  return symbolFactory.newSymbol("CHAR", CHAR);  }
        case 514: break;
        case 226: 
          {  return symbolFactory.newSymbol("CASE", CASE);  }
        case 515: break;
        case 45: 
          {  return symbolFactory.newSymbol("SEMI", SEMI);  }
        case 516: break;
        case 42: 
          {  return symbolFactory.newSymbol("PLUS", PLUS);  }
        case 517: break;
        case 204: 
          {  return symbolFactory.newSymbol("AUTO", AUTO);  }
        case 518: break;
        case 214: 
          {  return symbolFactory.newSymbol("TRUE", TRUE);  }
        case 519: break;
        case 217: 
          {  return symbolFactory.newSymbol("THIS", THIS);  }
        case 520: break;
        case 221: 
          {  return symbolFactory.newSymbol("VOID", VOID);  }
        case 521: break;
        case 405: 
          {  return symbolFactory.newSymbol("CONSTCAST", CONSTCAST);  }
        case 522: break;
        case 398: 
          {  return symbolFactory.newSymbol("PROTECTED", PROTECTED);  }
        case 523: break;
        case 394: 
          {  return symbolFactory.newSymbol("NAMESPACE", NAMESPACE);  }
        case 524: break;
        case 87: 
          {  return symbolFactory.newSymbol("DOT_START", DOT_START);  }
        case 525: break;
        case 120: 
          {  return symbolFactory.newSymbol("LEFTSHIFT", LEFTSHIFT);  }
        case 526: break;
        case 346: 
          {  return symbolFactory.newSymbol("EXPORT", EXPORT);  }
        case 527: break;
        case 344: 
          {  return symbolFactory.newSymbol("EXTERN", EXTERN);  }
        case 528: break;
        case 342: 
          {  return symbolFactory.newSymbol("DELETE", DELETE);  }
        case 529: break;
        case 341: 
          {  return symbolFactory.newSymbol("DEFINE", DEFINE);  }
        case 530: break;
        case 339: 
          {  return symbolFactory.newSymbol("DOUBLE", DOUBLE);  }
        case 531: break;
        case 337: 
          {  return symbolFactory.newSymbol("INLINE", INLINE);  }
        case 532: break;
        case 335: 
          {  return symbolFactory.newSymbol("PUBLIC", PUBLIC);  }
        case 533: break;
        case 332: 
          {  return symbolFactory.newSymbol("SWITCH", SWITCH);  }
        case 534: break;
        case 331: 
          {  return symbolFactory.newSymbol("SIZEOF", SIZEOF);  }
        case 535: break;
        case 330: 
          {  return symbolFactory.newSymbol("SIGNED", SIGNED);  }
        case 536: break;
        case 328: 
          {  return symbolFactory.newSymbol("STRUCT", STRUCT);  }
        case 537: break;
        case 327: 
          {  return symbolFactory.newSymbol("STATIC", STATIC);  }
        case 538: break;
        case 320: 
          {  return symbolFactory.newSymbol("TYPEID", TYPEID);  }
        case 539: break;
        case 315: 
          {  return symbolFactory.newSymbol("RETURN", RETURN);  }
        case 540: break;
        case 313: 
          {  return symbolFactory.newSymbol("FRIEND", FRIEND);  }
        case 541: break;
        case 58: 
        case 134: 
          {  return symbolFactory.newSymbol("STRING", STRING);  }
        case 542: break;
        case 50: 
          {  return symbolFactory.newSymbol("RPAREN", RPAREN);  }
        case 543: break;
        case 47: 
          {  return symbolFactory.newSymbol("LPAREN", LPAREN);  }
        case 544: break;
        case 22: 
          {  return symbolFactory.newSymbol("DIVIDE", DIVIDE);  }
        case 545: break;
        case 125: 
          {  return symbolFactory.newSymbol("ASS_OR", ASS_OR);  }
        case 546: break;
        case 126: 
          {  return symbolFactory.newSymbol("LOG_OR", LOG_OR);  }
        case 547: break;
        case 435: 
          {  return symbolFactory.newSymbol("REINTERPRETCAST", REINTERPRETCAST);  }
        case 548: break;
        case 9: 
          {  return symbolFactory.newSymbol("CHARACTER", CHARACTER, yytext());  }
        case 549: break;
        case 41: 
          {  return symbolFactory.newSymbol("OR", OR);  }
        case 550: break;
        case 10: 
          {  return symbolFactory.newSymbol("QM", QM);  }
        case 551: break;
        case 104: 
          {  return symbolFactory.newSymbol("IF", IF);  }
        case 552: break;
        case 107: 
          {  return symbolFactory.newSymbol("DO", DO);  }
        case 553: break;
        case 117: 
          {  return symbolFactory.newSymbol("EQ", EQ);  }
        case 554: break;
        case 118: 
          {  return symbolFactory.newSymbol("NE", NE);  }
        case 555: break;
        case 119: 
          {  return symbolFactory.newSymbol("LE", LE);  }
        case 556: break;
        case 121: 
          {  return symbolFactory.newSymbol("GE", GE);  }
        case 557: break;
        case 55: 
        case 57: 
          {  return symbolFactory.newSymbol("PPNUMBER", PPNUMBER, Integer.parseInt(yytext()));  }
        case 558: break;
        case 5: 
          {  return symbolFactory.newSymbol("NUMBER", NUMBER, Integer.parseInt(yytext()));  }
        case 559: break;
        case 3: 
        case 4: 
          {                                }
        case 560: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return symbolFactory.newSymbol("EOF",sym.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
