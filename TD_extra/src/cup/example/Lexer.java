/* The following code was generated by JFlex 1.3.5 on 10/26/22, 10:42 PM */

package cup.example;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java.lang.*;
import java.io.InputStreamReader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 10/26/22, 10:42 PM from the specification file
 * <tt>file:/C:/Users/alini/eclipse-workspace/TranslatorDesign/TD_extra/lexer.jflex</tt>
 */
public class Lexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int CODESEG = 1;
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\16\0\4\0\1\24\3\0"+
    "\1\0\1\0\1\54\1\0\1\13\1\14\1\6\1\10\1\17\1\11"+
    "\1\0\1\0\1\4\7\4\2\4\1\31\1\7\1\51\1\0\1\52"+
    "\2\0\6\5\21\5\1\5\2\5\3\0\1\53\1\0\1\0\1\22"+
    "\1\27\1\20\1\35\1\36\1\33\1\40\1\41\1\30\1\5\1\44"+
    "\1\21\1\43\1\12\1\34\1\25\1\5\1\37\1\23\1\32\1\26"+
    "\1\42\1\46\1\45\1\50\1\47\1\15\1\55\1\16\1\0\41\0"+
    "\2\0\4\0\4\0\1\0\2\0\1\0\7\0\1\0\4\0\1\0"+
    "\5\0\27\0\1\0\37\0\1\0\u01ca\0\4\0\14\0\16\0\5\0"+
    "\7\0\1\0\1\0\1\0\21\0\160\0\5\0\1\0\2\0\2\0"+
    "\4\0\1\0\1\0\6\0\1\0\1\0\3\0\1\0\1\0\1\0"+
    "\24\0\1\0\123\0\1\0\213\0\1\0\5\0\2\0\246\0\1\0"+
    "\46\0\2\0\1\0\7\0\47\0\7\0\1\0\1\0\55\0\1\0"+
    "\1\0\1\0\2\0\1\0\2\0\1\0\1\0\10\0\33\0\5\0"+
    "\3\0\15\0\6\0\5\0\1\0\4\0\13\0\1\0\1\0\3\0"+
    "\53\0\37\0\4\0\2\0\1\0\143\0\1\0\1\0\10\0\1\0"+
    "\6\0\2\0\2\0\1\0\4\0\2\0\12\0\3\0\2\0\1\0"+
    "\17\0\1\0\1\0\1\0\36\0\33\0\2\0\131\0\13\0\1\0"+
    "\16\0\12\0\41\0\11\0\2\0\4\0\1\0\5\0\26\0\4\0"+
    "\1\0\11\0\1\0\3\0\1\0\5\0\22\0\31\0\3\0\4\0"+
    "\13\0\65\0\25\0\1\0\10\0\26\0\60\0\66\0\3\0\1\0"+
    "\22\0\1\0\7\0\12\0\2\0\2\0\12\0\1\0\20\0\3\0"+
    "\1\0\10\0\2\0\2\0\2\0\26\0\1\0\7\0\1\0\1\0"+
    "\3\0\4\0\2\0\1\0\1\0\7\0\2\0\2\0\2\0\3\0"+
    "\1\0\10\0\1\0\4\0\2\0\1\0\3\0\2\0\2\0\12\0"+
    "\4\0\7\0\2\0\4\0\3\0\1\0\6\0\4\0\2\0\2\0"+
    "\26\0\1\0\7\0\1\0\2\0\1\0\2\0\1\0\2\0\2\0"+
    "\1\0\1\0\5\0\4\0\2\0\2\0\3\0\3\0\1\0\7\0"+
    "\4\0\1\0\1\0\7\0\14\0\3\0\1\0\13\0\3\0\1\0"+
    "\11\0\1\0\3\0\1\0\26\0\1\0\7\0\1\0\2\0\1\0"+
    "\5\0\2\0\1\0\1\0\10\0\1\0\3\0\1\0\3\0\2\0"+
    "\1\0\17\0\2\0\2\0\2\0\12\0\1\0\1\0\7\0\1\0"+
    "\6\0\1\0\3\0\1\0\10\0\2\0\2\0\2\0\26\0\1\0"+
    "\7\0\1\0\2\0\1\0\5\0\2\0\1\0\1\0\7\0\2\0"+
    "\2\0\2\0\3\0\10\0\2\0\4\0\2\0\1\0\3\0\2\0"+
    "\2\0\12\0\1\0\1\0\20\0\1\0\1\0\1\0\6\0\3\0"+
    "\3\0\1\0\4\0\3\0\2\0\1\0\1\0\1\0\2\0\3\0"+
    "\2\0\3\0\3\0\3\0\14\0\4\0\5\0\3\0\3\0\1\0"+
    "\4\0\2\0\1\0\6\0\1\0\16\0\12\0\11\0\1\0\6\0"+
    "\4\0\1\0\10\0\1\0\3\0\1\0\27\0\1\0\20\0\3\0"+
    "\1\0\7\0\1\0\3\0\1\0\4\0\7\0\2\0\1\0\3\0"+
    "\5\0\2\0\2\0\2\0\12\0\20\0\1\0\3\0\1\0\10\0"+
    "\1\0\3\0\1\0\27\0\1\0\12\0\1\0\5\0\2\0\1\0"+
    "\1\0\7\0\1\0\3\0\1\0\4\0\7\0\2\0\7\0\1\0"+
    "\1\0\2\0\2\0\2\0\12\0\1\0\2\0\15\0\4\0\1\0"+
    "\10\0\1\0\3\0\1\0\51\0\2\0\1\0\7\0\1\0\3\0"+
    "\1\0\4\0\1\0\5\0\3\0\1\0\7\0\3\0\2\0\2\0"+
    "\12\0\12\0\6\0\2\0\2\0\1\0\22\0\3\0\30\0\1\0"+
    "\11\0\1\0\1\0\2\0\7\0\3\0\1\0\4\0\6\0\1\0"+
    "\1\0\1\0\10\0\6\0\12\0\2\0\2\0\15\0\60\0\1\0"+
    "\2\0\7\0\4\0\10\0\10\0\1\0\12\0\47\0\2\0\1\0"+
    "\1\0\2\0\2\0\1\0\1\0\2\0\1\0\6\0\4\0\1\0"+
    "\7\0\1\0\3\0\1\0\1\0\1\0\1\0\2\0\2\0\1\0"+
    "\4\0\1\0\2\0\6\0\1\0\2\0\1\0\2\0\5\0\1\0"+
    "\1\0\1\0\6\0\2\0\12\0\2\0\4\0\40\0\1\0\27\0"+
    "\2\0\6\0\12\0\13\0\1\0\1\0\1\0\1\0\1\0\4\0"+
    "\2\0\10\0\1\0\44\0\4\0\24\0\1\0\2\0\5\0\13\0"+
    "\1\0\44\0\11\0\1\0\71\0\53\0\24\0\1\0\12\0\6\0"+
    "\6\0\4\0\4\0\3\0\1\0\3\0\2\0\7\0\3\0\4\0"+
    "\15\0\14\0\1\0\17\0\2\0\46\0\1\0\1\0\5\0\1\0"+
    "\2\0\53\0\1\0\u014d\0\1\0\4\0\2\0\7\0\1\0\1\0"+
    "\1\0\4\0\2\0\51\0\1\0\4\0\2\0\41\0\1\0\4\0"+
    "\2\0\7\0\1\0\1\0\1\0\4\0\2\0\17\0\1\0\71\0"+
    "\1\0\4\0\2\0\103\0\2\0\3\0\40\0\20\0\20\0\126\0"+
    "\2\0\6\0\3\0\u026c\0\2\0\21\0\1\0\32\0\5\0\113\0"+
    "\3\0\13\0\7\0\15\0\1\0\4\0\3\0\13\0\22\0\3\0"+
    "\13\0\22\0\2\0\14\0\15\0\1\0\3\0\1\0\2\0\14\0"+
    "\64\0\40\0\3\0\1\0\3\0\2\0\1\0\2\0\12\0\41\0"+
    "\4\0\1\0\12\0\6\0\130\0\10\0\5\0\2\0\42\0\1\0"+
    "\1\0\5\0\106\0\12\0\37\0\1\0\14\0\4\0\14\0\12\0"+
    "\12\0\36\0\2\0\5\0\13\0\54\0\4\0\32\0\6\0\12\0"+
    "\46\0\27\0\5\0\4\0\65\0\12\0\1\0\35\0\2\0\13\0"+
    "\6\0\12\0\15\0\1\0\10\0\16\0\102\0\5\0\57\0\21\0"+
    "\7\0\4\0\12\0\21\0\11\0\14\0\3\0\36\0\15\0\2\0"+
    "\12\0\54\0\16\0\14\0\44\0\24\0\10\0\12\0\3\0\3\0"+
    "\12\0\44\0\2\0\11\0\107\0\3\0\1\0\25\0\4\0\1\0"+
    "\4\0\3\0\2\0\3\0\6\0\300\0\72\0\1\0\5\0\u0116\0"+
    "\2\0\6\0\2\0\46\0\2\0\6\0\2\0\10\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\37\0\2\0\65\0\1\0\7\0"+
    "\1\0\1\0\3\0\3\0\1\0\7\0\3\0\4\0\2\0\6\0"+
    "\4\0\15\0\5\0\3\0\1\0\7\0\16\0\5\0\32\0\5\0"+
    "\20\0\2\0\23\0\1\0\13\0\5\0\1\0\12\0\1\0\1\0"+
    "\15\0\1\0\20\0\15\0\3\0\40\0\20\0\15\0\4\0\1\0"+
    "\3\0\14\0\21\0\1\0\4\0\1\0\2\0\12\0\1\0\1\0"+
    "\3\0\5\0\6\0\1\0\1\0\1\0\1\0\1\0\1\0\4\0"+
    "\1\0\13\0\2\0\4\0\5\0\5\0\4\0\1\0\21\0\51\0"+
    "\u0a77\0\57\0\1\0\57\0\1\0\205\0\6\0\4\0\3\0\2\0"+
    "\14\0\46\0\1\0\1\0\5\0\1\0\2\0\70\0\7\0\1\0"+
    "\17\0\1\0\27\0\11\0\7\0\1\0\7\0\1\0\7\0\1\0"+
    "\7\0\1\0\7\0\1\0\7\0\1\0\7\0\1\0\7\0\1\0"+
    "\40\0\57\0\1\0\u01d5\0\3\0\31\0\11\0\6\0\1\0\5\0"+
    "\2\0\5\0\4\0\126\0\2\0\2\0\2\0\3\0\1\0\132\0"+
    "\1\0\4\0\5\0\52\0\2\0\136\0\21\0\33\0\65\0\20\0"+
    "\u0200\0\u19b6\0\112\0\u51eb\0\25\0\u048d\0\103\0\56\0\2\0\u010d\0"+
    "\3\0\20\0\12\0\2\0\24\0\57\0\1\0\4\0\12\0\1\0"+
    "\37\0\2\0\120\0\2\0\45\0\11\0\2\0\147\0\2\0\44\0"+
    "\1\0\10\0\77\0\13\0\1\0\3\0\1\0\4\0\1\0\27\0"+
    "\5\0\20\0\1\0\7\0\64\0\14\0\2\0\62\0\22\0\12\0"+
    "\12\0\6\0\22\0\6\0\3\0\1\0\1\0\1\0\2\0\12\0"+
    "\34\0\10\0\2\0\27\0\15\0\14\0\35\0\3\0\4\0\57\0"+
    "\16\0\16\0\1\0\12\0\6\0\5\0\1\0\12\0\12\0\5\0"+
    "\1\0\51\0\16\0\11\0\3\0\1\0\10\0\2\0\2\0\12\0"+
    "\6\0\27\0\3\0\1\0\3\0\62\0\1\0\1\0\3\0\2\0"+
    "\2\0\5\0\2\0\1\0\1\0\1\0\30\0\3\0\2\0\13\0"+
    "\5\0\2\0\3\0\2\0\12\0\6\0\2\0\6\0\2\0\6\0"+
    "\11\0\7\0\1\0\7\0\1\0\53\0\1\0\12\0\12\0\163\0"+
    "\10\0\1\0\2\0\2\0\12\0\6\0\u2ba4\0\14\0\27\0\4\0"+
    "\61\0\u2104\0\u016e\0\2\0\152\0\46\0\7\0\14\0\5\0\5\0"+
    "\1\0\1\0\12\0\1\0\15\0\1\0\5\0\1\0\1\0\1\0"+
    "\2\0\1\0\2\0\1\0\154\0\41\0\u016b\0\22\0\100\0\2\0"+
    "\66\0\50\0\15\0\3\0\20\0\20\0\20\0\3\0\2\0\30\0"+
    "\3\0\31\0\1\0\6\0\5\0\1\0\207\0\2\0\1\0\4\0"+
    "\1\0\13\0\12\0\7\0\32\0\4\0\1\0\1\0\32\0\13\0"+
    "\131\0\3\0\6\0\2\0\6\0\2\0\6\0\2\0\3\0\3\0"+
    "\2\0\3\0\2\0\22\0\3\0\4\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    46,    92,   138,    92,   184,   230,    92,    92,    92, 
       92,   276,    92,    92,    92,    92,    92,   322,   368,   414, 
      460,   506,   552,   598,   644,   690,   736,   782,   828,   874, 
      920,   966,  1012,  1058,  1104,  1150,  1196,  1242,  1288,  1334, 
     1380,  1426,  1472,  1518,  1564,  1610,  1656,  1702,  1748,  1794, 
     1840,  1886,  1932,  1978,  2024,  2070,  2116,  2162,  2208,  2254, 
     2300,  2346,  2392,  2438,  2484,  2530,  2576,  2622,  2668,  2714, 
     2760,  2806,  2852,  2898,  2944,  2990,    92,  3036,    92,  3082, 
       92,    92,    92,  3128,  3174,  3220,  3266,  3312,  3358,  3404, 
     3450,  3496,  3542,  3588,  3634,  3680,  3726,  3772,  3818,  3864, 
     3910,  3956,  4002,  4048,  4094,  4140,  4186,  4232,    92,  4278, 
     4324,  4370,  4416,  4462,  4508,  4554,  4600,  4646,    92,  4692, 
     4738,  4784,  4830,  4876,  4922,  4968,  5014,  5060,  5106,  5152, 
     5198,  5244,    92,    92,  5290,    92,  5336,  5382,  5428,  5474, 
     5520,  5566,  5612,    92,  5658,  5704,  5750,  5796,  5842,  5888, 
     5934,  5980,  6026,  6072,  6118,  6164,  6210,  6256,  6302,  6348, 
       92,  6394,    92,  6440,  6486,  6532,  6578,    92,  6624,  6670, 
     6716,  6762,  6808,  6854,  6900,  6946,  6992,  7038,  7084,  7130, 
     7176,  7222,  7268,  7314,  7360,  7406,    92,  7452,  7498,  7544, 
       92,    92,    92,  7590,  7636,  7682,  7728,  7774,  7820,  7866, 
     7912,  7958,  8004,  8050,  8096,  8142,  8188,  8234,  8280,    92, 
     8326,  8372,  8418,  8464,  8510,  8556,  8602,  8648,  8694,    92, 
       92,  8740,  8786,  8832,    92,  8878,  8924,    92,  8970,  9016, 
       92,    92,    92,  9062,  9108,  9154,  9200,  9246,  9292,    92, 
     9338,  9384,  9430,  9476,  9522,    92,    92,  9568,  9614,  9660, 
       92,  9706,    92,  9752,  9798,  9844,  9890,  9936,  9982, 10028, 
    10074, 10120, 10166, 10212,    92, 10258, 10304,    92,    92,    92, 
       92,    92,    92,    92, 10350, 10396, 10442, 10488,    92, 10534, 
    10580,    92, 10626,    92,    92, 10672,    92,    92,    92, 10718, 
    10764, 10810, 10856, 10902,    92, 10948, 10994,    92, 11040,    92, 
    11086,    92, 11132,    92, 11178, 11224,    92, 11270,    92,    92, 
       92,    92,    92,    92,    92
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\5\1\26\1\27\1\30\1\31"+
    "\1\3\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\7\1\41\3\7\1\42\2\7\1\43\1\44\1\45"+
    "\1\46\1\47\56\3\60\0\1\5\57\0\1\6\56\0"+
    "\1\7\4\0\1\7\5\0\4\7\1\0\4\7\1\0"+
    "\17\7\12\0\1\7\4\0\1\7\5\0\2\7\1\50"+
    "\1\7\1\0\4\7\1\0\4\7\1\51\12\7\12\0"+
    "\1\7\4\0\1\7\5\0\1\7\1\52\1\53\1\7"+
    "\1\0\4\7\1\0\2\7\1\54\4\7\1\55\7\7"+
    "\12\0\1\7\4\0\1\7\5\0\4\7\1\0\4\7"+
    "\1\0\2\7\1\56\14\7\12\0\1\7\4\0\1\7"+
    "\5\0\3\7\1\57\1\0\1\7\1\60\2\7\1\0"+
    "\17\7\12\0\1\7\4\0\1\7\5\0\4\7\1\0"+
    "\3\7\1\61\1\0\1\62\6\7\1\63\4\7\1\64"+
    "\2\7\12\0\1\7\4\0\1\7\5\0\4\7\1\0"+
    "\1\7\1\65\2\7\1\0\5\7\1\66\11\7\12\0"+
    "\1\7\4\0\1\67\5\0\4\7\1\0\4\7\1\0"+
    "\17\7\12\0\1\7\4\0\1\7\5\0\4\7\1\0"+
    "\4\7\1\0\5\7\1\70\11\7\12\0\1\7\4\0"+
    "\1\71\5\0\4\7\1\0\4\7\1\0\1\7\1\72"+
    "\15\7\12\0\1\7\4\0\1\7\5\0\4\7\1\0"+
    "\4\7\1\0\4\7\1\73\1\74\1\7\1\75\6\7"+
    "\1\76\12\0\1\7\4\0\1\7\5\0\1\7\1\77"+
    "\2\7\1\0\4\7\1\0\2\7\1\100\2\7\1\101"+
    "\11\7\12\0\1\7\4\0\1\7\5\0\4\7\1\0"+
    "\1\102\3\7\1\0\17\7\12\0\1\7\4\0\1\7"+
    "\5\0\4\7\1\0\4\7\1\0\2\7\1\103\1\7"+
    "\1\104\12\7\12\0\1\7\4\0\1\105\5\0\1\7"+
    "\1\106\2\7\1\0\4\7\1\0\13\7\1\107\3\7"+
    "\12\0\1\7\4\0\1\7\5\0\4\7\1\0\4\7"+
    "\1\0\4\7\1\110\12\7\12\0\1\7\4\0\1\7"+
    "\5\0\4\7\1\0\4\7\1\0\2\7\1\111\14\7"+
    "\12\0\1\7\4\0\1\7\5\0\4\7\1\0\3\7"+
    "\1\112\1\0\2\7\1\113\14\7\12\0\1\7\4\0"+
    "\1\7\5\0\4\7\1\0\4\7\1\0\7\7\1\114"+
    "\7\7\31\0\1\115\24\0\1\116\30\0\1\117\25\0"+
    "\1\120\27\0\1\121\55\0\1\122\55\0\1\123\36\0"+
    "\1\7\4\0\1\7\5\0\4\7\1\0\4\7\1\0"+
    "\11\7\1\124\5\7\12\0\1\7\4\0\1\7\5\0"+
    "\4\7\1\0\4\7\1\0\14\7\1\125\2\7\12\0"+
    "\1\7\4\0\1\7\5\0\2\7\1\126\1\7\1\0"+
    "\4\7\1\0\17\7\12\0\1\7\4\0\1\7\5\0"+
    "\3\7\1\127\1\0\4\7\1\0\1\130\16\7\12\0"+
    "\1\7\4\0\1\131\5\0\4\7\1\0\4\7\1\0"+
    "\17\7\12\0\1\7\4\0\1\7\5\0\2\7\1\132"+
    "\1\7\1\0\4\7\1\0\17\7\12\0\1\7\4\0"+
    "\1\133\5\0\4\7\1\0\4\7\1\0\17\7\12\0"+
    "\1\7\4\0\1\7\5\0\4\7\1\0\4\7\1\0"+
    "\11\7\1\134\5\7\12\0\1\7\4\0\1\7\5\0"+
    "\4\7\1\0\4\7\1\0\1\135\16\7\12\0\1\7"+
    "\4\0\1\7\5\0\4\7\1\0\4\7\1\0\6\7"+
    "\1\136\6\7\1\137\1\7\12\0\1\7\4\0\1\7"+
    "\5\0\2\7\1\140\1\7\1\0\4\7\1\0\5\7"+
    "\1\141\11\7\12\0\1\7\4\0\1\7\5\0\4\7"+
    "\1\0\4\7\1\0\2\7\1\142\14\7\12\0\1\7"+
    "\4\0\1\7\5\0\4\7\1\0\3\7\1\143\1\0"+
    "\17\7\12\0\1\7\4\0\1\7\5\0\4\7\1\0"+
    "\2\7\1\144\1\7\1\0\17\7\12\0\1\7\4\0"+
    "\1\7\5\0\4\7\1\0\3\7\1\145\1\0\2\7"+
    "\1\146\14\7\12\0\1\7\4\0\1\7\5\0\3\7"+
    "\1\147\1\0\3\7\1\150\1\0\17\7\12\0\1\7"+
    "\4\0\1\7\5\0\4\7\1\0\4\7\1\0\4\7"+
    "\1\151\12\7\12\0\1\7\4\0\1\7\5\0\1\152"+
    "\1\153\2\7\1\0\4\7\1\0\1\154\16\7\12\0"+
    "\1\7\4\0\1\7\5\0\4\7\1\155\4\7\1\0"+
    "\17\7\12\0\1\7\4\0\1\7\5\0\4\7\1\0"+
    "\4\7\1\0\11\7\1\156\5\7\12\0\1\7\4\0"+
    "\1\7\5\0\4\7\1\0\4\7\1\0\16\7\1\157"+
    "\12\0\1\7\4\0\1\7\5\0\4\7\1\0\3\7"+
    "\1\160\1\0\5\7\1\161\11\7\12\0\1\7\4\0"+
    "\1\7\5\0\4\7\1\0\1\162\3\7\1\0\17\7"+
    "\12\0\1\7\4\0\1\7\5\0\4\7\1\0\4\7"+
    "\1\0\2\7\1\163\14\7\12\0\1\7\4\0\1\7"+
    "\5\0\4\7\1\0\4\7\1\0\5\7\1\164\11\7"+
    "\12\0\1\7\4\0\1\7\5\0\4\7\1\0\3\7"+
    "\1\165\1\0\17\7\12\0\1\7\4\0\1\7\5\0"+
    "\4\7\1\0\4\7\1\0\4\7\1\166\12\7\12\0"+
    "\1\7\4\0\1\7\5\0\4\7\1\167\1\7\1\170"+
    "\2\7\1\0\17\7\12\0\1\7\4\0\1\7\5\0"+
    "\1\7\1\171\2\7\1\0\4\7\1\0\1\7\1\172"+
    "\15\7\12\0\1\7\4\0\1\7\5\0\4\7\1\0"+
    "\1\7\1\173\2\7\1\0\17\7\12\0\1\7\4\0"+
    "\1\7\5\0\3\7\1\174\1\0\4\7\1\0\17\7"+
    "\12\0\1\7\4\0\1\7\5\0\4\7\1\0\4\7"+
    "\1\0\1\175\16\7\12\0\1\7\4\0\1\7\5\0"+
    "\4\7\1\0\4\7\1\0\1\176\5\7\1\177\10\7"+
    "\12\0\1\7\4\0\1\7\5\0\4\7\1\0\4\7"+
    "\1\0\1\200\16\7\12\0\1\7\4\0\1\7\5\0"+
    "\4\7\1\0\4\7\1\0\5\7\1\201\11\7\12\0"+
    "\1\7\4\0\1\7\5\0\1\7\1\202\2\7\1\0"+
    "\3\7\1\203\1\0\17\7\12\0\1\7\4\0\1\7"+
    "\5\0\4\7\1\0\3\7\1\204\1\0\17\7\31\0"+
    "\1\205\55\0\1\206\36\0\1\7\4\0\1\7\5\0"+
    "\4\7\1\0\4\7\1\0\4\7\1\207\12\7\12\0"+
    "\1\7\4\0\1\7\5\0\4\7\1\210\4\7\1\0"+
    "\17\7\12\0\1\7\4\0\1\7\5\0\3\7\1\211"+
    "\1\0\4\7\1\0\17\7\12\0\1\7\4\0\1\7"+
    "\5\0\4\7\1\0\4\7\1\0\4\7\1\212\12\7"+
    "\12\0\1\7\4\0\1\7\5\0\1\213\3\7\1\0"+
    "\4\7\1\0\17\7\12\0\1\7\4\0\1\7\5\0"+
    "\3\7\1\214\1\0\4\7\1\0\1\215\16\7\12\0"+
    "\1\7\4\0\1\7\5\0\4\7\1\0\4\7\1\0"+
    "\5\7\1\216\11\7\12\0\1\7\4\0\1\7\5\0"+
    "\4\7\1\0\4\7\1\0\6\7\1\217\10\7\12\0"+
    "\1\7\4\0\1\7\5\0\4\7\1\220\4\7\1\0"+
    "\17\7\12\0\1\7\4\0\1\7\5\0\4\7\1\0"+
    "\4\7\1\0\2\7\1\221\14\7\12\0\1\7\4\0"+
    "\1\222\5\0\4\7\1\0\4\7\1\0\17\7\12\0"+
    "\1\7\4\0\1\7\5\0\4\7\1\0\4\7\1\0"+
    "\4\7\1\223\12\7\12\0\1\7\4\0\1\7\5\0"+
    "\4\7\1\0\4\7\1\0\1\224\16\7\12\0\1\7"+
    "\4\0\1\7\5\0\4\7\1\0\1\7\1\225\1\7"+
    "\1\226\1\0\17\7\12\0\1\7\4\0\1\7\5\0"+
    "\4\7\1\0\4\7\1\0\5\7\1\227\11\7\12\0"+
    "\1\7\4\0\1\7\5\0\4\7\1\0\4\7\1\0"+
    "\1\230\16\7\12\0\1\7\4\0\1\7\5\0\1\7"+
    "\1\231\2\7\1\0\4\7\1\0\17\7\12\0\1\7"+
    "\4\0\1\7\5\0\4\7\1\0\4\7\1\0\10\7"+
    "\1\232\6\7\12\0\1\7\4\0\1\7\5\0\4\7"+
    "\1\0\4\7\1\0\1\233\16\7\12\0\1\7\4\0"+
    "\1\7\5\0\4\7\1\0\3\7\1\234\1\0\17\7"+
    "\12\0\1\7\4\0\1\7\5\0\4\7\1\0\4\7"+
    "\1\0\2\7\1\235\14\7\12\0\1\7\4\0\1\7"+
    "\5\0\2\7\1\236\1\7\1\0\4\7\1\0\17\7"+
    "\12\0\1\7\4\0\1\7\5\0\1\7\1\237\2\7"+
    "\1\0\4\7\1\0\17\7\12\0\1\7\4\0\1\7"+
    "\5\0\4\7\1\0\3\7\1\240\1\0\17\7\12\0"+
    "\1\7\4\0\1\7\5\0\4\7\1\241\4\7\1\0"+
    "\17\7\12\0\1\7\4\0\1\7\5\0\4\7\1\0"+
    "\1\242\3\7\1\0\17\7\12\0\1\7\4\0\1\7"+
    "\5\0\4\7\1\243\4\7\1\0\17\7\12\0\1\7"+
    "\4\0\1\7\5\0\3\7\1\244\1\0\4\7\1\0"+
    "\17\7\12\0\1\7\4\0\1\7\5\0\4\7\1\0"+
    "\4\7\1\0\2\7\1\245\14\7\12\0\1\7\4\0"+
    "\1\7\5\0\4\7\1\0\4\7\1\0\4\7\1\246"+
    "\12\7\12\0\1\7\4\0\1\7\5\0\2\7\1\247"+
    "\1\7\1\0\4\7\1\0\17\7\12\0\1\7\4\0"+
    "\1\7\5\0\4\7\1\250\4\7\1\0\17\7\12\0"+
    "\1\7\4\0\1\7\5\0\4\7\1\0\4\7\1\0"+
    "\4\7\1\251\12\7\12\0\1\7\4\0\1\7\5\0"+
    "\4\7\1\0\4\7\1\0\5\7\1\252\11\7\12\0"+
    "\1\7\4\0\1\7\5\0\4\7\1\0\2\7\1\253"+
    "\1\7\1\0\17\7\12\0\1\7\4\0\1\7\5\0"+
    "\4\7\1\0\4\7\1\0\4\7\1\254\12\7\12\0"+
    "\1\7\4\0\1\7\5\0\2\7\1\255\1\7\1\0"+
    "\3\7\1\256\1\0\17\7\12\0\1\7\4\0\1\7"+
    "\5\0\4\7\1\0\4\7\1\0\11\7\1\257\5\7"+
    "\12\0\1\7\4\0\1\7\5\0\4\7\1\0\4\7"+
    "\1\0\4\7\1\260\12\7\12\0\1\7\4\0\1\7"+
    "\5\0\4\7\1\0\4\7\1\0\4\7\1\261\12\7"+
    "\12\0\1\7\4\0\1\7\5\0\4\7\1\0\1\7"+
    "\1\262\2\7\1\0\17\7\12\0\1\7\4\0\1\7"+
    "\5\0\4\7\1\0\3\7\1\263\1\0\17\7\12\0"+
    "\1\7\4\0\1\7\5\0\4\7\1\0\4\7\1\0"+
    "\2\7\1\264\14\7\12\0\1\7\4\0\1\7\5\0"+
    "\4\7\1\0\4\7\1\0\1\265\16\7\12\0\1\7"+
    "\4\0\1\7\5\0\2\7\1\266\1\7\1\0\4\7"+
    "\1\0\17\7\12\0\1\7\4\0\1\7\5\0\4\7"+
    "\1\0\4\7\1\0\3\7\1\267\13\7\12\0\1\7"+
    "\4\0\1\7\5\0\1\7\1\270\2\7\1\0\4\7"+
    "\1\0\17\7\12\0\1\7\4\0\1\7\5\0\3\7"+
    "\1\271\1\0\4\7\1\0\17\7\12\0\1\7\4\0"+
    "\1\7\5\0\3\7\1\272\1\0\4\7\1\0\17\7"+
    "\12\0\1\7\4\0\1\7\5\0\4\7\1\273\4\7"+
    "\1\0\17\7\12\0\1\7\4\0\1\7\5\0\4\7"+
    "\1\0\4\7\1\0\7\7\1\274\7\7\12\0\1\7"+
    "\4\0\1\7\5\0\4\7\1\0\4\7\1\0\1\275"+
    "\16\7\12\0\1\7\4\0\1\7\5\0\4\7\1\0"+
    "\3\7\1\276\1\0\17\7\12\0\1\7\4\0\1\7"+
    "\5\0\4\7\1\277\4\7\1\0\17\7\12\0\1\7"+
    "\4\0\1\7\5\0\4\7\1\300\4\7\1\0\17\7"+
    "\12\0\1\7\4\0\1\7\5\0\4\7\1\301\4\7"+
    "\1\0\17\7\12\0\1\7\4\0\1\7\5\0\4\7"+
    "\1\0\4\7\1\0\4\7\1\302\12\7\12\0\1\7"+
    "\4\0\1\7\5\0\4\7\1\0\4\7\1\0\2\7"+
    "\1\303\14\7\12\0\1\7\4\0\1\7\5\0\4\7"+
    "\1\0\3\7\1\304\1\0\17\7\12\0\1\7\4\0"+
    "\1\7\5\0\1\305\3\7\1\0\4\7\1\0\17\7"+
    "\12\0\1\7\4\0\1\306\5\0\4\7\1\0\4\7"+
    "\1\0\17\7\12\0\1\7\4\0\1\7\5\0\4\7"+
    "\1\0\4\7\1\0\1\307\16\7\12\0\1\7\4\0"+
    "\1\7\5\0\1\310\3\7\1\0\4\7\1\0\17\7"+
    "\12\0\1\7\4\0\1\7\5\0\4\7\1\0\3\7"+
    "\1\311\1\0\17\7\12\0\1\7\4\0\1\7\5\0"+
    "\2\7\1\312\1\7\1\0\4\7\1\0\17\7\12\0"+
    "\1\7\4\0\1\7\5\0\4\7\1\0\4\7\1\0"+
    "\4\7\1\313\12\7\12\0\1\7\4\0\1\7\5\0"+
    "\4\7\1\0\4\7\1\0\6\7\1\314\10\7\12\0"+
    "\1\7\4\0\1\315\5\0\4\7\1\0\4\7\1\0"+
    "\17\7\12\0\1\7\4\0\1\7\5\0\4\7\1\0"+
    "\4\7\1\0\12\7\1\316\4\7\12\0\1\7\4\0"+
    "\1\7\5\0\4\7\1\0\1\7\1\317\2\7\1\0"+
    "\17\7\12\0\1\7\4\0\1\320\5\0\4\7\1\0"+
    "\4\7\1\0\17\7\12\0\1\7\4\0\1\7\5\0"+
    "\1\7\1\321\2\7\1\0\4\7\1\0\17\7\12\0"+
    "\1\7\4\0\1\7\5\0\4\7\1\322\4\7\1\0"+
    "\17\7\12\0\1\7\4\0\1\7\5\0\4\7\1\0"+
    "\4\7\1\0\14\7\1\323\2\7\12\0\1\7\4\0"+
    "\1\7\5\0\4\7\1\0\4\7\1\0\3\7\1\324"+
    "\13\7\12\0\1\7\4\0\1\7\5\0\4\7\1\0"+
    "\4\7\1\0\1\325\16\7\12\0\1\7\4\0\1\326"+
    "\5\0\4\7\1\0\4\7\1\0\17\7\12\0\1\7"+
    "\4\0\1\7\5\0\2\7\1\327\1\7\1\0\4\7"+
    "\1\0\17\7\12\0\1\7\4\0\1\7\5\0\1\7"+
    "\1\330\2\7\1\0\4\7\1\0\17\7\12\0\1\7"+
    "\4\0\1\7\5\0\4\7\1\0\4\7\1\0\1\331"+
    "\16\7\12\0\1\7\4\0\1\7\5\0\4\7\1\0"+
    "\1\7\1\332\2\7\1\0\17\7\12\0\1\7\4\0"+
    "\1\333\5\0\4\7\1\0\4\7\1\0\17\7\12\0"+
    "\1\7\4\0\1\7\5\0\4\7\1\334\4\7\1\0"+
    "\17\7\12\0\1\7\4\0\1\7\5\0\4\7\1\335"+
    "\4\7\1\0\17\7\12\0\1\7\4\0\1\7\5\0"+
    "\4\7\1\0\4\7\1\0\5\7\1\336\11\7\12\0"+
    "\1\7\4\0\1\7\5\0\4\7\1\0\4\7\1\0"+
    "\5\7\1\337\11\7\12\0\1\7\4\0\1\7\5\0"+
    "\3\7\1\340\1\0\4\7\1\0\17\7\12\0\1\7"+
    "\4\0\1\7\5\0\4\7\1\341\4\7\1\0\17\7"+
    "\12\0\1\7\4\0\1\7\5\0\4\7\1\0\1\7"+
    "\1\342\2\7\1\0\17\7\12\0\1\7\4\0\1\7"+
    "\5\0\4\7\1\0\4\7\1\0\1\343\16\7\12\0"+
    "\1\7\4\0\1\7\5\0\4\7\1\344\4\7\1\0"+
    "\17\7\12\0\1\7\4\0\1\7\5\0\4\7\1\0"+
    "\4\7\1\0\4\7\1\345\12\7\12\0\1\7\4\0"+
    "\1\7\5\0\4\7\1\0\1\346\3\7\1\0\17\7"+
    "\12\0\1\7\4\0\1\7\5\0\4\7\1\347\4\7"+
    "\1\0\17\7\12\0\1\7\4\0\1\7\5\0\4\7"+
    "\1\350\4\7\1\0\17\7\12\0\1\7\4\0\1\7"+
    "\5\0\4\7\1\351\4\7\1\0\17\7\12\0\1\7"+
    "\4\0\1\352\5\0\4\7\1\0\4\7\1\0\17\7"+
    "\12\0\1\7\4\0\1\7\5\0\4\7\1\0\4\7"+
    "\1\0\3\7\1\353\13\7\12\0\1\7\4\0\1\7"+
    "\5\0\4\7\1\0\4\7\1\0\1\7\1\354\15\7"+
    "\12\0\1\7\4\0\1\7\5\0\1\355\3\7\1\0"+
    "\4\7\1\0\17\7\12\0\1\7\4\0\1\7\5\0"+
    "\4\7\1\0\4\7\1\0\1\356\16\7\12\0\1\7"+
    "\4\0\1\7\5\0\4\7\1\0\4\7\1\0\6\7"+
    "\1\357\10\7\12\0\1\7\4\0\1\7\5\0\4\7"+
    "\1\360\4\7\1\0\17\7\12\0\1\7\4\0\1\7"+
    "\5\0\4\7\1\0\4\7\1\0\7\7\1\361\7\7"+
    "\12\0\1\7\4\0\1\7\5\0\1\362\3\7\1\0"+
    "\4\7\1\0\17\7\12\0\1\7\4\0\1\7\5\0"+
    "\4\7\1\0\4\7\1\0\1\363\16\7\12\0\1\7"+
    "\4\0\1\7\5\0\1\364\3\7\1\0\4\7\1\0"+
    "\17\7\12\0\1\7\4\0\1\365\5\0\4\7\1\0"+
    "\4\7\1\0\17\7\12\0\1\7\4\0\1\7\5\0"+
    "\4\7\1\366\4\7\1\0\17\7\12\0\1\7\4\0"+
    "\1\7\5\0\4\7\1\367\4\7\1\0\17\7\12\0"+
    "\1\7\4\0\1\7\5\0\4\7\1\0\4\7\1\0"+
    "\3\7\1\370\13\7\12\0\1\7\4\0\1\7\5\0"+
    "\4\7\1\0\4\7\1\0\4\7\1\371\12\7\12\0"+
    "\1\7\4\0\1\7\5\0\2\7\1\372\1\7\1\0"+
    "\4\7\1\0\17\7\12\0\1\7\4\0\1\7\5\0"+
    "\4\7\1\373\4\7\1\0\17\7\12\0\1\7\4\0"+
    "\1\7\5\0\4\7\1\0\4\7\1\0\4\7\1\374"+
    "\12\7\12\0\1\7\4\0\1\7\5\0\4\7\1\375"+
    "\4\7\1\0\17\7\12\0\1\7\4\0\1\7\5\0"+
    "\4\7\1\0\4\7\1\0\3\7\1\376\13\7\12\0"+
    "\1\7\4\0\1\7\5\0\4\7\1\0\4\7\1\0"+
    "\1\377\16\7\12\0\1\7\4\0\1\7\5\0\4\7"+
    "\1\0\4\7\1\0\4\7\1\u0100\12\7\12\0\1\7"+
    "\4\0\1\7\5\0\4\7\1\0\4\7\1\0\4\7"+
    "\1\u0101\12\7\12\0\1\7\4\0\1\7\5\0\1\7"+
    "\1\u0102\2\7\1\0\4\7\1\0\17\7\12\0\1\7"+
    "\4\0\1\7\5\0\4\7\1\0\4\7\1\0\4\7"+
    "\1\u0103\12\7\12\0\1\7\4\0\1\u0104\5\0\4\7"+
    "\1\0\4\7\1\0\17\7\12\0\1\7\4\0\1\u0105"+
    "\5\0\4\7\1\0\4\7\1\0\17\7\12\0\1\7"+
    "\4\0\1\7\5\0\4\7\1\0\4\7\1\0\1\u0106"+
    "\16\7\12\0\1\7\4\0\1\7\5\0\2\7\1\u0107"+
    "\1\7\1\0\4\7\1\0\17\7\12\0\1\7\4\0"+
    "\1\7\5\0\4\7\1\0\3\7\1\u0108\1\0\17\7"+
    "\12\0\1\7\4\0\1\7\5\0\4\7\1\u0109\4\7"+
    "\1\0\17\7\12\0\1\7\4\0\1\7\5\0\2\7"+
    "\1\u010a\1\7\1\0\4\7\1\0\17\7\12\0\1\7"+
    "\4\0\1\7\5\0\4\7\1\0\1\7\1\u010b\2\7"+
    "\1\0\17\7\12\0\1\7\4\0\1\7\5\0\4\7"+
    "\1\u010c\4\7\1\0\17\7\12\0\1\7\4\0\1\7"+
    "\5\0\4\7\1\u010d\4\7\1\0\17\7\12\0\1\7"+
    "\4\0\1\7\5\0\4\7\1\u010e\4\7\1\0\17\7"+
    "\12\0\1\7\4\0\1\7\5\0\4\7\1\u010f\4\7"+
    "\1\0\17\7\12\0\1\7\4\0\1\7\5\0\4\7"+
    "\1\u0110\4\7\1\0\17\7\12\0\1\7\4\0\1\7"+
    "\5\0\4\7\1\u0111\4\7\1\0\17\7\12\0\1\7"+
    "\4\0\1\7\5\0\4\7\1\0\4\7\1\u0112\17\7"+
    "\12\0\1\7\4\0\1\7\5\0\4\7\1\0\4\7"+
    "\1\0\4\7\1\u0113\12\7\12\0\1\7\4\0\1\7"+
    "\5\0\4\7\1\0\4\7\1\0\1\u0114\16\7\12\0"+
    "\1\7\4\0\1\7\5\0\4\7\1\0\4\7\1\0"+
    "\4\7\1\u0115\12\7\12\0\1\7\4\0\1\7\5\0"+
    "\4\7\1\0\4\7\1\0\4\7\1\u0116\12\7\12\0"+
    "\1\7\4\0\1\7\5\0\4\7\1\u0117\4\7\1\0"+
    "\17\7\12\0\1\7\4\0\1\7\5\0\4\7\1\0"+
    "\4\7\1\0\1\u0118\16\7\12\0\1\7\4\0\1\7"+
    "\5\0\4\7\1\0\4\7\1\0\1\7\1\u0119\15\7"+
    "\12\0\1\7\4\0\1\7\5\0\4\7\1\u011a\4\7"+
    "\1\0\17\7\12\0\1\7\4\0\1\7\5\0\4\7"+
    "\1\0\4\7\1\0\2\7\1\u011b\14\7\12\0\1\7"+
    "\4\0\1\7\5\0\4\7\1\u011c\4\7\1\0\17\7"+
    "\12\0\1\7\4\0\1\7\5\0\4\7\1\u011d\4\7"+
    "\1\0\17\7\12\0\1\7\4\0\1\7\5\0\4\7"+
    "\1\0\4\7\1\0\1\u011e\16\7\12\0\1\7\4\0"+
    "\1\7\5\0\4\7\1\u011f\4\7\1\0\17\7\12\0"+
    "\1\7\4\0\1\7\5\0\4\7\1\u0120\4\7\1\0"+
    "\17\7\12\0\1\7\4\0\1\7\5\0\4\7\1\u0121"+
    "\4\7\1\0\17\7\12\0\1\7\4\0\1\7\5\0"+
    "\4\7\1\0\4\7\1\0\4\7\1\u0122\12\7\12\0"+
    "\1\7\4\0\1\7\5\0\1\7\1\u0123\2\7\1\0"+
    "\4\7\1\0\17\7\12\0\1\7\4\0\1\7\5\0"+
    "\1\7\1\u0124\2\7\1\0\4\7\1\0\17\7\12\0"+
    "\1\7\4\0\1\7\5\0\1\u0125\3\7\1\0\4\7"+
    "\1\0\17\7\12\0\1\7\4\0\1\7\5\0\4\7"+
    "\1\0\4\7\1\0\4\7\1\u0126\12\7\12\0\1\7"+
    "\4\0\1\7\5\0\4\7\1\0\4\7\1\u0127\17\7"+
    "\12\0\1\7\4\0\1\7\5\0\4\7\1\0\4\7"+
    "\1\0\4\7\1\u0128\12\7\12\0\1\7\4\0\1\7"+
    "\5\0\4\7\1\0\4\7\1\0\3\7\1\u0129\13\7"+
    "\12\0\1\7\4\0\1\7\5\0\4\7\1\u012a\4\7"+
    "\1\0\17\7\12\0\1\7\4\0\1\7\5\0\4\7"+
    "\1\0\4\7\1\0\4\7\1\u012b\12\7\12\0\1\7"+
    "\4\0\1\7\5\0\4\7\1\u012c\4\7\1\0\17\7"+
    "\12\0\1\7\4\0\1\7\5\0\4\7\1\0\4\7"+
    "\1\0\5\7\1\u012d\11\7\12\0\1\7\4\0\1\7"+
    "\5\0\4\7\1\u012e\4\7\1\0\17\7\12\0\1\7"+
    "\4\0\1\7\5\0\4\7\1\0\4\7\1\0\5\7"+
    "\1\u012f\11\7\12\0\1\7\4\0\1\7\5\0\4\7"+
    "\1\u0130\4\7\1\0\17\7\12\0\1\7\4\0\1\7"+
    "\5\0\4\7\1\0\4\7\1\0\4\7\1\u0131\12\7"+
    "\12\0\1\7\4\0\1\7\5\0\4\7\1\0\4\7"+
    "\1\0\4\7\1\u0132\12\7\12\0\1\7\4\0\1\7"+
    "\5\0\4\7\1\u0133\4\7\1\0\17\7\12\0\1\7"+
    "\4\0\1\7\5\0\4\7\1\0\4\7\1\0\3\7"+
    "\1\u0134\13\7\12\0\1\7\4\0\1\7\5\0\4\7"+
    "\1\u0135\4\7\1\0\17\7\12\0\1\7\4\0\1\7"+
    "\5\0\4\7\1\u0136\4\7\1\0\17\7\12\0\1\7"+
    "\4\0\1\7\5\0\4\7\1\u0137\4\7\1\0\17\7"+
    "\12\0\1\7\4\0\1\7\5\0\4\7\1\u0138\4\7"+
    "\1\0\17\7\12\0\1\7\4\0\1\7\5\0\4\7"+
    "\1\u0139\4\7\1\0\17\7\12\0\1\7\4\0\1\7"+
    "\5\0\4\7\1\u013a\4\7\1\0\17\7\12\0\1\7"+
    "\4\0\1\7\5\0\4\7\1\0\4\7\1\u013b\17\7"+
    "\5\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     1,  0,  9,  1,  9,  1,  1,  9,  9,  9,  9,  1,  9,  9,  9,  9, 
     9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  0,  9,  0, 
     9,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  9,  9,  1,  9,  1,  1,  1,  1,  1,  1,  1,  9, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     9,  1,  9,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  9,  9, 
     9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9,  1,  1,  1, 
     9,  1,  1,  9,  1,  1,  9,  9,  9,  1,  1,  1,  1,  1,  1,  9, 
     1,  1,  1,  1,  1,  9,  9,  1,  1,  1,  9,  1,  9,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  9,  9,  9,  9,  9, 
     9,  9,  1,  1,  1,  1,  9,  1,  1,  9,  1,  9,  9,  1,  9,  9, 
     9,  1,  1,  1,  1,  1,  9,  1,  1,  9,  1,  9,  1,  9,  1,  9, 
     1,  1,  9,  1,  9,  9,  9,  9,  9,  9,  9
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	

    public Lexer(ComplexSymbolFactory sf, java.io.InputStream is){
		this(is);
        symbolFactory = sf;
    }
	public Lexer(ComplexSymbolFactory sf, java.io.Reader reader){
		this(reader);
        symbolFactory = sf;
    }
    
    private StringBuffer sb;
    private ComplexSymbolFactory symbolFactory;
    private int csline,cscolumn;

    public Symbol symbol(String name, int code){
		return symbolFactory.newSymbol(name, code,
						new Location(yyline+1,yycolumn+1, yychar), // -yylength()
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength())
				);
    }
    public Symbol symbol(String name, int code, String lexem){
	return symbolFactory.newSymbol(name, code, 
						new Location(yyline+1, yycolumn +1, yychar), 
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength()), lexem);
    }
    
    protected void emit_warning(String message){
    	System.out.println("scanner warning: " + message + " at : 2 "+ 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }
    
    protected void emit_error(String message){
    	System.out.println("scanner error: " + message + " at : 2" + 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[11316];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2292) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 14: 
          {  return symbolFactory.newSymbol("CLPAREN", CLPAREN);  }
        case 316: break;
        case 15: 
          {  return symbolFactory.newSymbol("CRPAREN", CRPAREN);  }
        case 317: break;
        case 294: 
          {  return symbolFactory.newSymbol("PRIVATE", PRIVATE);  }
        case 318: break;
        case 297: 
          {  return symbolFactory.newSymbol("INCLUDE", INCLUDE);  }
        case 319: break;
        case 299: 
          {  return symbolFactory.newSymbol("TYPEDEF", TYPEDEF);  }
        case 320: break;
        case 301: 
          {  return symbolFactory.newSymbol("DEFAULT", DEFAULT);  }
        case 321: break;
        case 303: 
          {  return symbolFactory.newSymbol("VIRTUAL", VIRTUAL);  }
        case 322: break;
        case 10: 
          {  return symbolFactory.newSymbol("MINUS", MINUS);  }
        case 323: break;
        case 7: 
          {  return symbolFactory.newSymbol("TIMES", TIMES);  }
        case 324: break;
        case 16: 
          {  return symbolFactory.newSymbol("COMMA", COMMA);  }
        case 325: break;
        case 230: 
          {  return symbolFactory.newSymbol("CLASS", CLASS);  }
        case 326: break;
        case 231: 
          {  return symbolFactory.newSymbol("CATCH", CATCH);  }
        case 327: break;
        case 232: 
          {  return symbolFactory.newSymbol("CONST", CONST);  }
        case 328: break;
        case 239: 
          {  return symbolFactory.newSymbol("SHORT", SHORT);  }
        case 329: break;
        case 245: 
          {  return symbolFactory.newSymbol("UNION", UNION);  }
        case 330: break;
        case 246: 
          {  return symbolFactory.newSymbol("BREAK", BREAK);  }
        case 331: break;
        case 250: 
          {  return symbolFactory.newSymbol("THROW", THROW);  }
        case 332: break;
        case 252: 
          {  return symbolFactory.newSymbol("FLOAT", FLOAT);  }
        case 333: break;
        case 264: 
          {  return symbolFactory.newSymbol("WHILE", WHILE);  }
        case 334: break;
        case 2: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
          {  emit_warning("Unrecognized character '" +yytext()+"' -- ignored");  }
        case 335: break;
        case 133: 
          {  return symbolFactory.newSymbol("RIGHTSHIFT", RIGHTSHIFT);  }
        case 336: break;
        case 167: 
          {  return symbolFactory.newSymbol("FOR", FOR);  }
        case 337: break;
        case 162: 
          {  return symbolFactory.newSymbol("TRY", TRY);  }
        case 338: break;
        case 160: 
          {  return symbolFactory.newSymbol("INT", INT);  }
        case 339: break;
        case 143: 
          {  return symbolFactory.newSymbol("ASM", ASM);  }
        case 340: break;
        case 135: 
          {  return symbolFactory.newSymbol("NEW", NEW);  }
        case 341: break;
        case 81: 
          {  return symbolFactory.newSymbol("AND", AND);  }
        case 342: break;
        case 80: 
          {  return symbolFactory.newSymbol("XOR", XOR);  }
        case 343: break;
        case 271: 
          {  return symbolFactory.newSymbol("STR", STR);  }
        case 344: break;
        case 306: 
          {  return symbolFactory.newSymbol("CONTINUE", CONTINUE);  }
        case 345: break;
        case 308: 
          {  return symbolFactory.newSymbol("UNSIGNED", UNSIGNED);  }
        case 346: break;
        case 309: 
          {  return symbolFactory.newSymbol("TEMPLATE", TEMPLATE);  }
        case 347: break;
        case 310: 
          {  return symbolFactory.newSymbol("OPERATOR", OPERATOR);  }
        case 348: break;
        case 311: 
          {  return symbolFactory.newSymbol("REGISTER", REGISTER);  }
        case 349: break;
        case 312: 
          {  return symbolFactory.newSymbol("VOLATILE", VOLATILE);  }
        case 350: break;
        case 0: 
        case 6: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 134: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 161: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 187: 
        case 188: 
        case 189: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
        case 216: 
        case 217: 
        case 218: 
        case 221: 
        case 222: 
        case 223: 
        case 225: 
        case 226: 
        case 228: 
        case 229: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 247: 
        case 248: 
        case 249: 
        case 251: 
        case 253: 
        case 254: 
        case 255: 
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 262: 
        case 263: 
        case 265: 
        case 266: 
        case 274: 
        case 275: 
        case 276: 
        case 277: 
        case 279: 
        case 280: 
        case 282: 
        case 285: 
        case 289: 
        case 290: 
        case 291: 
        case 292: 
        case 293: 
        case 295: 
        case 296: 
        case 298: 
        case 300: 
        case 302: 
        case 304: 
        case 305: 
        case 307: 
          {  return symbolFactory.newSymbol("STRING", STRING, yytext());  }
        case 351: break;
        case 76: 
          {  return symbolFactory.newSymbol("SMALLERTHAN", SMALLERTHAN);  }
        case 352: break;
        case 78: 
          {  return symbolFactory.newSymbol("GREATERTHAN", GREATERTHAN);  }
        case 353: break;
        case 220: 
          {  return symbolFactory.newSymbol("ELSE", ELSE);  }
        case 354: break;
        case 219: 
          {  return symbolFactory.newSymbol("ENUM", ENUM);  }
        case 355: break;
        case 209: 
          {  return symbolFactory.newSymbol("THIS", THIS);  }
        case 356: break;
        case 192: 
          {  return symbolFactory.newSymbol("AUTO", AUTO);  }
        case 357: break;
        case 191: 
          {  return symbolFactory.newSymbol("LONG", LONG);  }
        case 358: break;
        case 186: 
          {  return symbolFactory.newSymbol("CASE", CASE);  }
        case 359: break;
        case 9: 
          {  return symbolFactory.newSymbol("PLUS", PLUS);  }
        case 360: break;
        case 8: 
          {  return symbolFactory.newSymbol("SEMI", SEMI);  }
        case 361: break;
        case 224: 
          {  return symbolFactory.newSymbol("GOTO", GOTO);  }
        case 362: break;
        case 227: 
          {  return symbolFactory.newSymbol("VOID", VOID);  }
        case 363: break;
        case 314: 
          {  return symbolFactory.newSymbol("PROTECTED", PROTECTED);  }
        case 364: break;
        case 313: 
          {  return symbolFactory.newSymbol("NAMESPACE", NAMESPACE);  }
        case 365: break;
        case 132: 
          {  return symbolFactory.newSymbol("LEFTSHIFT", LEFTSHIFT);  }
        case 366: break;
        case 11: 
          {  return symbolFactory.newSymbol("UMINUS", UMINUS);  }
        case 367: break;
        case 12: 
          {  return symbolFactory.newSymbol("LPAREN", LPAREN);  }
        case 368: break;
        case 13: 
          {  return symbolFactory.newSymbol("RPAREN", RPAREN);  }
        case 369: break;
        case 267: 
          {  return symbolFactory.newSymbol("SIGNED", SIGNED);  }
        case 370: break;
        case 268: 
          {  return symbolFactory.newSymbol("SIZEOF", SIZEOF);  }
        case 371: break;
        case 270: 
          {  return symbolFactory.newSymbol("STRUCT", STRUCT);  }
        case 372: break;
        case 272: 
          {  return symbolFactory.newSymbol("SWITCH", SWITCH);  }
        case 373: break;
        case 273: 
          {  return symbolFactory.newSymbol("PUBLIC", PUBLIC);  }
        case 374: break;
        case 278: 
          {  return symbolFactory.newSymbol("INLINE", INLINE);  }
        case 375: break;
        case 281: 
          {  return symbolFactory.newSymbol("FRIEND", FRIEND);  }
        case 376: break;
        case 283: 
          {  return symbolFactory.newSymbol("DOUBLE", DOUBLE);  }
        case 377: break;
        case 284: 
          {  return symbolFactory.newSymbol("DELETE", DELETE);  }
        case 378: break;
        case 286: 
          {  return symbolFactory.newSymbol("DEFINE", DEFINE);  }
        case 379: break;
        case 287: 
          {  return symbolFactory.newSymbol("EXTERN", EXTERN);  }
        case 380: break;
        case 288: 
          {  return symbolFactory.newSymbol("RETURN", RETURN);  }
        case 381: break;
        case 190: 
          {  return symbolFactory.newSymbol("CR", CR);  }
        case 382: break;
        case 118: 
          {  return symbolFactory.newSymbol("DO", DO);  }
        case 383: break;
        case 108: 
          {  return symbolFactory.newSymbol("IF", IF);  }
        case 384: break;
        case 82: 
          {  return symbolFactory.newSymbol("OR", OR);  }
        case 385: break;
        case 269: 
          {  return symbolFactory.newSymbol("ST", ST);  }
        case 386: break;
        case 5: 
          {  return symbolFactory.newSymbol("NUMBER", NUMBER, Integer.parseInt(yytext()));  }
        case 387: break;
        case 3: 
        case 4: 
          {                                }
        case 388: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return symbolFactory.newSymbol("EOF",sym.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
