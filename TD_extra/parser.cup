/*
   Simple +/-/* expression language; 
   parser evaluates constant expressions on the fly
*/

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;

parser code {:
   
 	protected Lexer lexer;
  	protected MultiTree syntaxTree = new MultiTree(); 
	
 	 public MultiTree getSyntaxTree()
  	{
		return syntaxTree;
  	}
  	protected MultiTreeNode createDeclarationNode(MultiTreeNode declaration) { throw new UnsupportedOperationException();}
 	protected MultiTreeNode createFunctionDeclarationNode(MultiTreeNode typeSpecifier, String identifierName, MultiTreeNode paramsList, MultiTreeNode compoundStatement) { throw new UnsupportedOperationException(); }
	protected MultiTreeNode createObjDeclarationNode(MultiTreeNode typeSpecifier, String identifierName, MultiTreeNode compoundStatement) { throw new UnsupportedOperationException(); }
  	protected MultiTreeNode createNamespaceDeclarationNode(MultiTreeNode typeSpecifier, String identifierList, MultiTreeNode scopeList, MultiTreeNode compoundStatement) { throw new UnsupportedOperationException(); }
	protected MultiTreeNode createInstanceDeclarationNode(String typeSpecifier, String identifierName, String paramsList, String value) { throw new UnsupportedOperationException(); }
	protected MultiTreeNode createAccessSpecifiersDeclarationNode(MultiTreeNode typeSpecifier, MultiTreeNode compoundStatement) { throw new UnsupportedOperationException(); }
	protected MultiTreeNode createTypeSpecifier(String typeName){ throw new UnsupportedOperationException();  } 
	protected MultiTreeNode createListNode(String listName, MultiTreeNode firstChild){throw new UnsupportedOperationException();  }
	protected MultiTreeNode createListNode(String listName, String firstChild){throw new UnsupportedOperationException();  }
	protected MultiTreeNode createVarDeclaration(MultiTreeNode typeSpecifier, String identifierName, Integer value ){throw new UnsupportedOperationException();  }
	protected MultiTreeNode createVarDeclaration(MultiTreeNode typeSpecifier, String identifierName, char value ){throw new UnsupportedOperationException();  }
	protected MultiTreeNode createVarDeclaration(MultiTreeNode typeSpecifier, String identifierName, String value ){throw new UnsupportedOperationException();  }
	protected MultiTreeNode createCompoundStatement(MultiTreeNode declarations, MultiTreeNode instructions){throw new UnsupportedOperationException();  }
	protected MultiTreeNode createIfStatement(String IDENT, MultiTreeNode ifInstructions, MultiTreeNode elseInstructions){throw new UnsupportedOperationException();  }
	protected MultiTreeNode createCallFunction(String IDENT, String parameters){throw new UnsupportedOperationException();  }
	protected MultiTreeNode createValueLiteral(String typeName) {throw new UnsupportedOperationException();  }
  	protected MultiTreeNode createValueLiteral(Integer typeName) {throw new UnsupportedOperationException();  }
  	protected MultiTreeNode createValueLiteral(double typeName) {throw new UnsupportedOperationException();  }
  	protected MultiTreeNode createValueLiteral(float typeName) {throw new UnsupportedOperationException();  }
  	protected MultiTreeNode createValueLiteral(char typeName) {throw new UnsupportedOperationException();  }
:}

/* define how to connect to the scanner! */
init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);
:};
scan with {: return lexer.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal            SEMI, PLUS, MINUS, UMINUS, CHAR,
					TIMES, LPAREN, RPAREN, CLASS,
					PUBLIC, PRIVATE, INT, COLON, EQUAL,
					FLOAT, DOUBLE, STR, PROTECTED, CLPAREN, CRPAREN,
					STATIC, COMMA, NAMESPACE, DEFINE, INCLUDE, ASM, AUTO, 
					BREAK, CASE, CATCH, CONST, CONTINUE, DEFAULT, 
					DELETE, DO, ELSE, ENUM, EXTERN, FOR, FRIEND, 
					GOTO, IF, INLINE, LONG, NEW, OPERATOR, REGISTER, 
					RETURN, SHORT, SIGNED, SIZEOF, STRUCT, 
					SWITCH, TEMPLATE, THIS, THROW, TRY, TYPEDEF, UNION, 
					UNSIGNED, VIRTUAL, VOID, VOLATILE, WHILE, LEFTSHIFT, 
					RIGHTSHIFT, XOR, AND, OR, SMALLERTHAN, GREATERTHAN, SCOPE,
                    ELLIPSIS, EQ, NE, LE, GE, LOG_AND, LOG_OR, INC, DEC, ARROW_STAR, 
                    ARROW, DOT_START, ASS_ADD, ASS_SUB, ASS_MUL, ASS_DIV, ASS_MOD, 
                    ASS_XOR, ASS_AND, ASS_OR, ASS_SHR, ASS_SHL, CHARACTER, STRNG, ESCAPED, 
                    FALSE, TRUE, SQLPAREN, SQRPAREN, SQUIGLY, DOT, TYPEID, TYPENAME, DOT_STAR,
                    DYNAMICCAST, STATICCAST, REINTERPRETCAST, CONSTCAST, ESC, PERCENT, DIVIDE,
                    QM, HASHT, MUTABLE, EXPLICIT, BOOLEAN, USING, EXPORT;
                    
terminal Integer    NUMBER, PPNUMBER;        // our scanner provides numbers as integers
terminal String     IDENT, STRING;       // our scanner provides numbers as integers

/* Non terminals */
non terminal MultiTreeNode expr, access_expr, expr_list, classes, types,  string, literal, boolean_literal, initial, data_declaration, char, boolean, functions,
params, namespaces, inline_namespaces, operations, access_specifiers, function_declaration, params_list, compound_statement, local_declaration_list,
call_function, instructions_list, return_statements, program_unit, void_literal, object_declaration, class_compound_statement, specifiers, list_expr, list_access, 
namespace_declarations, inline_types, inline_types_list, instances, value_literal, access_declarations, definition, list;

non terminal String identifier_list, exprString;

/* Precedences */
precedence left PLUS, MINUS;
precedence left TIMES;
precedence left UMINUS;


expr_list::= 						expr:d {: RESULT = syntaxTree.create("ProgramUnit", d); :}
	|								expr_list:pu expr:d {: RESULT = pu; syntaxTree.addChildNode(d); :}
	;
	
list_expr::=						expr:d {: RESULT = d; :}
	|								list_expr:l expr:d {: RESULT = l; RESULT.addChild(d); :}
	|								list_expr:l access_declarations: addef {: RESULT = l; RESULT.addChild(addef); :}
	;

list_access::=						access_expr:d {: RESULT = d; :}
	|								list_access:l access_expr:d {: RESULT = l; RESULT.addChild(d); :}
	;
	
list::=								list_expr:l {:RESULT = l; :}
	|								list:l list_expr: le {: RESULT = l; RESULT.addChild(le); :}
	|								list_access:l {: RESULT = l; :}
	|								list:l list_access: le {: RESULT = l; RESULT.addChild(le); :}
	;

expr::=								types: type {: RESULT = createDeclarationNode(type); :}
	|								function_declaration: fdef {: RESULT = createDeclarationNode(fdef); :}	
	|								object_declaration: cdef {: RESULT = createDeclarationNode(cdef); :}					
	|								namespaces: ndef {: RESULT = createDeclarationNode(ndef); :}
	|								instances: idef {: RESULT = createDeclarationNode(idef); :}
	|								access_declarations: addef {: RESULT = createDeclarationNode(addef); :}
	;
	
access_expr::=						types: type {: RESULT = createDeclarationNode(type); :}	
	|								object_declaration: cdef {: RESULT = createDeclarationNode(cdef); :}	
	|								function_declaration: fdef {: RESULT = createDeclarationNode(fdef); :}
	;
	
instances::= 						IDENT:id1 IDENT:id2 EQUAL NEW IDENT:id3 SEMI {: RESULT = createInstanceDeclarationNode(id1, id2, id3, null); :}
	|								IDENT:id1 IDENT:id2 SEMI {: RESULT = createInstanceDeclarationNode(id1, id2, null, null); :}
	|								IDENT:id1 IDENT:id2 EQUAL NEW IDENT:id3 LPAREN identifier_list:il RPAREN SEMI {: RESULT = createInstanceDeclarationNode(id1, id2, id3, il); :}
	|								IDENT:id1 IDENT:id2 LPAREN identifier_list:il RPAREN SEMI {: RESULT = createInstanceDeclarationNode(id1, id2, null, il); :}
	;
	
specifiers::=						CLASS:ts {: RESULT = createTypeSpecifier("CLASS"); :}
	|								STRUCT:ts {: RESULT = createTypeSpecifier("STRUCT"); :}
	;
	
access_declarations::=				access_specifiers:id COLON list_access:cs {: RESULT = createAccessSpecifiersDeclarationNode(id, cs); :}
	;
	
access_specifiers::=				PUBLIC {: RESULT = createTypeSpecifier("PUBLIC"); :}
	|								PRIVATE {: RESULT = createTypeSpecifier("PRIVATE"); :}
	|								PROTECTED {: RESULT = createTypeSpecifier("PROTECTED"); :}
	;
	
namespace_declarations::=			NAMESPACE:ts {: RESULT = createTypeSpecifier("NAMESPACE"); :}
	|								INLINE NAMESPACE:ts {: RESULT = createTypeSpecifier("INLINE NAMESPACE"); :}
	;
	
namespaces::=						namespace_declarations:nd IDENT:id SCOPE inline_namespaces:in CLPAREN list_expr:cs CRPAREN {: RESULT = createNamespaceDeclarationNode(nd, id, in, cs); :}
	|								namespace_declarations:nd IDENT:id CLPAREN list_expr:cs CRPAREN {: RESULT = createNamespaceDeclarationNode(nd, id, null, cs); :} 
	;
	
inline_namespaces::=				inline_types:il {: RESULT = createListNode("ScopeDeclaration", il); :}
	|								inline_namespaces:in SCOPE inline_types:il {: RESULT = in; RESULT.addChild(il); :}
	;
	
inline_types::=						IDENT:id {: RESULT = createTypeSpecifier("" + id); :}
	|								INLINE IDENT:id {: RESULT = createTypeSpecifier("inline " + id); :}
	;

object_declaration::=				specifiers:ts IDENT:id CLPAREN list:cs CRPAREN {: RESULT = createObjDeclarationNode(ts, id, cs); :}
	|								specifiers:ts IDENT:id CLPAREN CRPAREN {: RESULT = createObjDeclarationNode(ts, id, null); :}
	;
	
identifier_list::=					{::}
	|								IDENT: id {: RESULT = "" + id; :}
	|								identifier_list:il COMMA IDENT:id {: RESULT = il + ", " + id; :} 
	;
	
function_declaration::= 			literal:ts IDENT:id LPAREN params:pl RPAREN compound_statement:cs {: RESULT = createFunctionDeclarationNode(ts, id, pl, cs); :}
	|								char:ts IDENT: id LPAREN params: pl RPAREN compound_statement:cs {: RESULT = createFunctionDeclarationNode(ts, id, pl, cs); :}
	|								string:ts IDENT:id LPAREN params:pl RPAREN compound_statement:cs {: RESULT = createFunctionDeclarationNode(ts, id, pl, cs); :}
	|								boolean:ts IDENT: id LPAREN params: pl RPAREN compound_statement:cs {: RESULT = createFunctionDeclarationNode(ts, id, pl, cs); :}
	|								void_literal: ts IDENT: id LPAREN params: pl RPAREN compound_statement:cs {: RESULT = createFunctionDeclarationNode(ts, id, pl, cs); :}
	;
	
	
instructions_list::=				call_function:cf {: RESULT = createListNode("InstructionsList", cf); :}
	|								instructions_list: il call_function:cf {: RESULT = il;	RESULT.addChild(cf); :}
	;	
	
call_function::= 					IDENT:id LPAREN identifier_list:il RPAREN SEMI {: RESULT = createCallFunction(id, il); :}
	;
	
local_declaration_list::= 			types:t {: RESULT = createListNode("LocalDeclarations", t); :}
	|								local_declaration_list:ldl types:t {: RESULT = ldl; RESULT.addChild(t); :}
	;
	
compound_statement::=				CLPAREN CRPAREN {: RESULT = createCompoundStatement(null, null); :}
	|								CLPAREN local_declaration_list: ldl CRPAREN {: RESULT = createCompoundStatement(ldl, null); :}
	|								CLPAREN local_declaration_list: ldl instructions_list: il CRPAREN {: RESULT = createCompoundStatement(ldl, il); :}
	|								CLPAREN instructions_list: il local_declaration_list: ldl CRPAREN {: RESULT = createCompoundStatement(il, ldl); :}
	|								CLPAREN instructions_list: il CRPAREN {: RESULT = createCompoundStatement(null, il); :}
	;

params::= 							params_list: fp {: RESULT = createListNode("ParametersList", fp); :}
	|								params:pl COMMA params_list:fp {: RESULT = pl; RESULT.addChild(fp); :} 
	;
	
params_list::= 	                    {: RESULT = null; :}
	|								literal:ts IDENT:id {: RESULT = createVarDeclaration(ts, id, 0); :}
	|								string:ts IDENT:id {: RESULT = createVarDeclaration(ts, id, 0); :}
	| 								char:ts IDENT:id {: RESULT = createVarDeclaration(ts, id, 0); :}
	|								boolean:ts IDENT: id {: RESULT = createVarDeclaration(ts, id, 0); :}
	|								literal:ts IDENT:id EQUAL NUMBER:cval {: RESULT = createVarDeclaration(ts, id, cval); :}
	|								string:ts IDENT:id EQUAL STRNG:cval {: RESULT = createVarDeclaration(ts, id, "" + cval); :}
	|								char:ts IDENT:id EQUAL CHARACTER:cval {: RESULT = createVarDeclaration(ts, id, "" + cval); :}
	;
	
literal::=                          INT:e {: RESULT = createTypeSpecifier("INT"); :}
    |                               FLOAT:e {: RESULT = createTypeSpecifier("FLOAT"); :}
    |                               DOUBLE:e {: RESULT = createTypeSpecifier("DOUBLE");; :}
    ;

void_literal::=						VOID: e {: RESULT = createTypeSpecifier("VOID"); :}
	;

string::=                           STR:e {: RESULT = createTypeSpecifier("STRING"); :}
	;
	
char::= 							CHAR:e {: RESULT = createTypeSpecifier("CHAR"); :}
	;

boolean::= 							BOOLEAN:e {: RESULT = createTypeSpecifier("BOOLEAN"); :}
	;
	
types::= 							literal:ts IDENT:id SEMI {: RESULT = createVarDeclaration(ts, id, 0); :}
	|								string:ts IDENT:id SEMI {: RESULT = createVarDeclaration(ts, id, 0); :}
	| 								char:ts IDENT:id SEMI {: RESULT = createVarDeclaration(ts, id, 0); :}
	|								boolean:ts IDENT:id SEMI {: RESULT = createVarDeclaration(ts, id, 0); :}
	|								literal:ts IDENT:id EQUAL NUMBER:cval SEMI {: RESULT = createVarDeclaration(ts, id, cval); :}
	|								string:ts IDENT:id EQUAL STRNG:cval SEMI {: RESULT = createVarDeclaration(ts, id, "" + cval); :}
	|								char:ts IDENT:id EQUAL CHARACTER:cval SEMI {: RESULT = createVarDeclaration(ts, id, "" + cval); :}
	;
				


operator::=            /*++++*/     NEW {::}
    |                 /*++++*/      DELETE {::}
    |                               PLUS {::}
    |                               MINUS {::}
    |                               TIMES {::}
    |                               DIVIDE {::}
    |                               PERCENT {::}
    |                               XOR {::}
    |                               AND {::}
    |                               OR {::}
    |                               SQUIGLY {::}
    |                               ESC {::}
    |                               EQUAL {::}
    |                               SMALLERTHAN {::}
    |                               GREATERTHAN {::}
    |                               ASS_ADD {::}
    |                               ASS_SUB {::}
    |                               ASS_MUL {::}
    |                               ASS_DIV {::}
    |                               ASS_MOD {::}
    |                               ASS_XOR {::}
    |                               ASS_AND {::}
    |                               ASS_OR {::}
    |                               LEFTSHIFT {::}
    |                               RIGHTSHIFT {::}
    |                               ASS_SHR {::}
    |                               ASS_SHL {::}
    |                               EQ {::}
    |                               NE {::}
    |                               LE {::}
    |                               GE {::}
    |                               LOG_AND {::}
    |                               LOG_OR {::}
    |                               INC {::}
    |                               DEC {::}
    |                               COMMA {::}
    |                               ARROW_STAR {::}
    |                               ARROW {::}
    |                               LPAREN RPAREN {::}
    |                               SQLPAREN SQRPAREN {::};



			