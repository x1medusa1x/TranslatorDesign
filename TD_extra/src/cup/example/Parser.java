
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\122\000\002\004\003\000\002\002\004\000\002\004" +
    "\004\000\002\031\003\000\002\031\004\000\002\031\004" +
    "\000\002\032\003\000\002\032\004\000\002\041\003\000" +
    "\002\041\004\000\002\041\003\000\002\041\004\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\003\003" +
    "\000\002\003\003\000\002\035\010\000\002\035\005\000" +
    "\002\035\013\000\002\035\010\000\002\052\003\000\002" +
    "\052\003\000\002\037\005\000\002\050\003\000\002\050" +
    "\003\000\002\050\003\000\002\051\003\000\002\051\004" +
    "\000\002\014\011\000\002\014\007\000\002\015\003\000" +
    "\002\015\005\000\002\033\003\000\002\033\004\000\002" +
    "\027\007\000\002\027\006\000\002\042\002\000\002\042" +
    "\003\000\002\042\005\000\002\017\010\000\002\017\010" +
    "\000\002\017\010\000\002\017\010\000\002\017\010\000" +
    "\002\024\003\000\002\024\004\000\002\023\007\000\002" +
    "\022\003\000\002\022\004\000\002\021\004\000\002\021" +
    "\005\000\002\021\006\000\002\021\006\000\002\021\005" +
    "\000\002\013\002\000\002\013\003\000\002\013\005\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\047\003\000\002\045\003\000\002\044\003\000\002\046" +
    "\003\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\007\000\002\006\007\000" +
    "\002\006\007\000\002\020\004\000\002\020\004\000\002" +
    "\020\004\000\002\020\004\000\002\020\006\000\002\020" +
    "\006\000\002\020\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\040\010\016\014\005\015\021\016\017\017" +
    "\014\022\030\023\042\024\035\025\031\032\020\056\032" +
    "\067\012\101\041\171\024\176\010\001\002\000\004\176" +
    "\247\001\002\000\004\176\uffe9\001\002\000\004\176\230" +
    "\001\002\000\044\002\ufff3\010\ufff3\014\ufff3\015\ufff3\016" +
    "\ufff3\017\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\027\ufff3" +
    "\032\ufff3\056\ufff3\067\ufff3\101\ufff3\171\ufff3\176\ufff3\001" +
    "\002\000\004\176\212\001\002\000\042\002\001\010\001" +
    "\014\001\015\001\016\001\017\001\022\001\023\001\024" +
    "\001\025\001\032\001\056\001\067\001\101\001\171\001" +
    "\176\001\001\002\000\004\176\uffe8\001\002\000\004\176" +
    "\174\001\002\000\004\176\uffc4\001\002\000\044\002\ufff1" +
    "\010\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\022\ufff1\023" +
    "\ufff1\024\ufff1\025\ufff1\027\ufff1\032\ufff1\056\ufff1\067\ufff1" +
    "\101\ufff1\171\ufff1\176\ufff1\001\002\000\004\176\uffbf\001" +
    "\002\000\004\020\uffe5\001\002\000\004\176\uffe3\001\002" +
    "\000\004\020\uffe6\001\002\000\044\002\ufff4\010\ufff4\014" +
    "\ufff4\015\ufff4\016\ufff4\017\ufff4\022\ufff4\023\ufff4\024\ufff4" +
    "\025\ufff4\027\ufff4\032\ufff4\056\ufff4\067\ufff4\101\ufff4\171" +
    "\ufff4\176\ufff4\001\002\000\044\002\ufff2\010\ufff2\014\ufff2" +
    "\015\ufff2\016\ufff2\017\ufff2\022\ufff2\023\ufff2\024\ufff2\025" +
    "\ufff2\027\ufff2\032\ufff2\056\ufff2\067\ufff2\101\ufff2\171\ufff2" +
    "\176\ufff2\001\002\000\004\176\uffbe\001\002\000\044\002" +
    "\ufff5\010\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\022\ufff5" +
    "\023\ufff5\024\ufff5\025\ufff5\027\ufff5\032\ufff5\056\ufff5\067" +
    "\ufff5\101\ufff5\171\ufff5\176\ufff5\001\002\000\044\002\ufff0" +
    "\010\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\022\ufff0\023" +
    "\ufff0\024\ufff0\025\ufff0\027\ufff0\032\ufff0\056\ufff0\067\ufff0" +
    "\101\ufff0\171\ufff0\176\ufff0\001\002\000\004\020\166\001" +
    "\002\000\004\176\uffc3\001\002\000\004\020\uffe4\001\002" +
    "\000\004\032\165\001\002\000\042\002\164\010\016\014" +
    "\005\015\021\016\017\017\014\022\030\023\042\024\035" +
    "\025\031\032\020\056\032\067\012\101\041\171\024\176" +
    "\010\001\002\000\004\176\156\001\002\000\004\176\uffc0" +
    "\001\002\000\004\176\151\001\002\000\004\176\144\001" +
    "\002\000\004\176\043\001\002\000\004\176\uffc1\001\002" +
    "\000\004\176\uffc2\001\002\000\006\004\044\012\045\001" +
    "\002\000\044\002\uffba\010\uffba\014\uffba\015\uffba\016\uffba" +
    "\017\uffba\022\uffba\023\uffba\024\uffba\025\uffba\027\uffba\032" +
    "\uffba\056\uffba\067\uffba\101\uffba\171\uffba\176\uffba\001\002" +
    "\000\022\010\016\013\uffc7\017\014\022\030\023\042\024" +
    "\035\031\uffc7\171\024\001\002\000\004\176\141\001\002" +
    "\000\006\013\uffc6\031\uffc6\001\002\000\006\013\064\031" +
    "\063\001\002\000\004\176\060\001\002\000\004\176\055" +
    "\001\002\000\004\176\054\001\002\000\006\013\uffb3\031" +
    "\uffb3\001\002\000\010\013\uffb6\021\056\031\uffb6\001\002" +
    "\000\004\174\057\001\002\000\006\013\uffb2\031\uffb2\001" +
    "\002\000\010\013\uffb5\021\061\031\uffb5\001\002\000\004" +
    "\143\062\001\002\000\006\013\uffb1\031\uffb1\001\002\000" +
    "\016\010\016\017\014\022\030\023\042\024\035\171\024" +
    "\001\002\000\004\026\066\001\002\000\044\002\uffd3\010" +
    "\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\022\uffd3\023\uffd3" +
    "\024\uffd3\025\uffd3\027\uffd3\032\uffd3\056\uffd3\067\uffd3\101" +
    "\uffd3\171\uffd3\176\uffd3\001\002\000\022\010\016\017\014" +
    "\022\030\023\042\024\035\027\077\171\024\176\070\001" +
    "\002\000\004\176\133\001\002\000\004\012\124\001\002" +
    "\000\022\010\uffd1\017\uffd1\022\uffd1\023\uffd1\024\uffd1\027" +
    "\uffd1\171\uffd1\176\uffd1\001\002\000\022\010\016\017\014" +
    "\022\030\023\042\024\035\027\122\171\024\176\070\001" +
    "\002\000\004\176\114\001\002\000\022\010\uffce\017\uffce" +
    "\022\uffce\023\uffce\024\uffce\027\uffce\171\uffce\176\uffce\001" +
    "\002\000\022\010\016\017\014\022\030\023\042\024\035" +
    "\027\111\171\024\176\070\001\002\000\004\176\102\001" +
    "\002\000\044\002\uffcc\010\uffcc\014\uffcc\015\uffcc\016\uffcc" +
    "\017\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\027\uffcc\032" +
    "\uffcc\056\uffcc\067\uffcc\101\uffcc\171\uffcc\176\uffcc\001\002" +
    "\000\004\176\101\001\002\000\004\004\044\001\002\000" +
    "\006\004\104\021\103\001\002\000\004\174\105\001\002" +
    "\000\044\002\uffbd\010\uffbd\014\uffbd\015\uffbd\016\uffbd\017" +
    "\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\027\uffbd\032\uffbd" +
    "\056\uffbd\067\uffbd\101\uffbd\171\uffbd\176\uffbd\001\002\000" +
    "\004\004\106\001\002\000\044\002\uffb9\010\uffb9\014\uffb9" +
    "\015\uffb9\016\uffb9\017\uffb9\022\uffb9\023\uffb9\024\uffb9\025" +
    "\uffb9\027\uffb9\032\uffb9\056\uffb9\067\uffb9\101\uffb9\171\uffb9" +
    "\176\uffb9\001\002\000\022\010\uffd0\017\uffd0\022\uffd0\023" +
    "\uffd0\024\uffd0\027\uffd0\171\uffd0\176\uffd0\001\002\000\020" +
    "\010\016\017\014\022\030\023\042\024\035\027\113\171" +
    "\024\001\002\000\044\002\uffc8\010\uffc8\014\uffc8\015\uffc8" +
    "\016\uffc8\017\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\027" +
    "\uffc8\032\uffc8\056\uffc8\067\uffc8\101\uffc8\171\uffc8\176\uffc8" +
    "\001\002\000\022\010\uffcd\017\uffcd\022\uffcd\023\uffcd\024" +
    "\uffcd\027\uffcd\171\uffcd\176\uffcd\001\002\000\044\002\uffc9" +
    "\010\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\022\uffc9\023" +
    "\uffc9\024\uffc9\025\uffc9\027\uffc9\032\uffc9\056\uffc9\067\uffc9" +
    "\101\uffc9\171\uffc9\176\uffc9\001\002\000\006\004\116\021" +
    "\115\001\002\000\004\143\117\001\002\000\044\002\uffbc" +
    "\010\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\022\uffbc\023" +
    "\uffbc\024\uffbc\025\uffbc\027\uffbc\032\uffbc\056\uffbc\067\uffbc" +
    "\101\uffbc\171\uffbc\176\uffbc\001\002\000\004\004\120\001" +
    "\002\000\044\002\uffb8\010\uffb8\014\uffb8\015\uffb8\016\uffb8" +
    "\017\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\027\uffb8\032" +
    "\uffb8\056\uffb8\067\uffb8\101\uffb8\171\uffb8\176\uffb8\001\002" +
    "\000\006\027\123\176\070\001\002\000\044\002\uffcb\010" +
    "\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\022\uffcb\023\uffcb" +
    "\024\uffcb\025\uffcb\027\uffcb\032\uffcb\056\uffcb\067\uffcb\101" +
    "\uffcb\171\uffcb\176\uffcb\001\002\000\044\002\uffca\010\uffca" +
    "\014\uffca\015\uffca\016\uffca\017\uffca\022\uffca\023\uffca\024" +
    "\uffca\025\uffca\027\uffca\032\uffca\056\uffca\067\uffca\101\uffca" +
    "\171\uffca\176\uffca\001\002\000\010\013\uffd9\031\uffd9\176" +
    "\126\001\002\000\006\013\130\031\127\001\002\000\006" +
    "\013\uffd8\031\uffd8\001\002\000\004\176\132\001\002\000" +
    "\004\004\131\001\002\000\022\010\uffcf\017\uffcf\022\uffcf" +
    "\023\uffcf\024\uffcf\027\uffcf\171\uffcf\176\uffcf\001\002\000" +
    "\006\013\uffd7\031\uffd7\001\002\000\006\004\135\021\134" +
    "\001\002\000\004\142\136\001\002\000\044\002\uffbb\010" +
    "\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\022\uffbb\023\uffbb" +
    "\024\uffbb\025\uffbb\027\uffbb\032\uffbb\056\uffbb\067\uffbb\101" +
    "\uffbb\171\uffbb\176\uffbb\001\002\000\004\004\137\001\002" +
    "\000\044\002\uffb7\010\uffb7\014\uffb7\015\uffb7\016\uffb7\017" +
    "\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\027\uffb7\032\uffb7" +
    "\056\uffb7\067\uffb7\101\uffb7\171\uffb7\176\uffb7\001\002\000" +
    "\006\013\uffc5\031\uffc5\001\002\000\010\013\uffb4\021\142" +
    "\031\uffb4\001\002\000\004\142\143\001\002\000\006\013" +
    "\uffb0\031\uffb0\001\002\000\010\004\135\012\145\021\134" +
    "\001\002\000\022\010\016\013\uffc7\017\014\022\030\023" +
    "\042\024\035\031\uffc7\171\024\001\002\000\006\013\147" +
    "\031\063\001\002\000\004\026\066\001\002\000\044\002" +
    "\uffd5\010\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\022\uffd5" +
    "\023\uffd5\024\uffd5\025\uffd5\027\uffd5\032\uffd5\056\uffd5\067" +
    "\uffd5\101\uffd5\171\uffd5\176\uffd5\001\002\000\004\012\152" +
    "\001\002\000\022\010\016\013\uffc7\017\014\022\030\023" +
    "\042\024\035\031\uffc7\171\024\001\002\000\006\013\154" +
    "\031\063\001\002\000\004\026\066\001\002\000\044\002" +
    "\uffd2\010\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\022\uffd2" +
    "\023\uffd2\024\uffd2\025\uffd2\027\uffd2\032\uffd2\056\uffd2\067" +
    "\uffd2\101\uffd2\171\uffd2\176\uffd2\001\002\000\010\004\104" +
    "\012\157\021\103\001\002\000\022\010\016\013\uffc7\017" +
    "\014\022\030\023\042\024\035\031\uffc7\171\024\001\002" +
    "\000\006\013\161\031\063\001\002\000\004\026\066\001" +
    "\002\000\044\002\uffd6\010\uffd6\014\uffd6\015\uffd6\016\uffd6" +
    "\017\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\027\uffd6\032" +
    "\uffd6\056\uffd6\067\uffd6\101\uffd6\171\uffd6\176\uffd6\001\002" +
    "\000\042\002\uffff\010\uffff\014\uffff\015\uffff\016\uffff\017" +
    "\uffff\022\uffff\023\uffff\024\uffff\025\uffff\032\uffff\056\uffff" +
    "\067\uffff\101\uffff\171\uffff\176\uffff\001\002\000\004\002" +
    "\000\001\002\000\004\176\uffe2\001\002\000\020\010\016" +
    "\017\014\022\030\023\042\024\035\101\041\171\024\001" +
    "\002\000\044\002\uffee\010\uffee\014\uffee\015\uffee\016\uffee" +
    "\017\uffee\022\uffee\023\uffee\024\uffee\025\uffee\027\uffee\032" +
    "\uffee\056\uffee\067\uffee\101\uffee\171\uffee\176\uffee\001\002" +
    "\000\044\002\ufffb\010\ufffb\014\ufffb\015\ufffb\016\ufffb\017" +
    "\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb\027\ufffb\032\ufffb" +
    "\056\ufffb\067\ufffb\101\ufffb\171\ufffb\176\ufffb\001\002\000" +
    "\044\002\uffe7\010\016\014\uffe7\015\uffe7\016\uffe7\017\014" +
    "\022\030\023\042\024\035\025\uffe7\027\uffe7\032\uffe7\056" +
    "\uffe7\067\uffe7\101\041\171\024\176\uffe7\001\002\000\044" +
    "\002\uffef\010\uffef\014\uffef\015\uffef\016\uffef\017\uffef\022" +
    "\uffef\023\uffef\024\uffef\025\uffef\027\uffef\032\uffef\056\uffef" +
    "\067\uffef\101\uffef\171\uffef\176\uffef\001\002\000\044\002" +
    "\ufffa\010\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\022\ufffa" +
    "\023\ufffa\024\ufffa\025\ufffa\027\ufffa\032\ufffa\056\ufffa\067" +
    "\ufffa\101\ufffa\171\ufffa\176\ufffa\001\002\000\004\026\175" +
    "\001\002\000\042\010\016\014\005\015\021\016\017\017" +
    "\014\022\030\023\042\024\035\025\031\027\177\032\020" +
    "\056\032\067\012\101\041\171\024\176\010\001\002\000" +
    "\042\010\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe\022\ufffe" +
    "\023\ufffe\024\ufffe\025\ufffe\027\ufffe\032\ufffe\056\ufffe\067" +
    "\ufffe\101\ufffe\171\ufffe\176\ufffe\001\002\000\044\002\uffda" +
    "\010\uffda\014\uffda\015\uffda\016\uffda\017\uffda\022\uffda\023" +
    "\uffda\024\uffda\025\uffda\027\uffda\032\uffda\056\uffda\067\uffda" +
    "\101\uffda\171\uffda\176\uffda\001\002\000\042\010\ufff4\014" +
    "\ufff4\015\ufff4\016\ufff4\017\ufff4\022\ufff4\023\ufff4\024\ufff4" +
    "\025\ufff4\027\ufff4\032\ufff4\056\ufff4\067\ufff4\101\ufff4\171" +
    "\ufff4\176\ufff4\001\002\000\042\010\016\014\005\015\021" +
    "\016\017\017\014\022\030\023\042\024\035\025\031\027" +
    "\ufff9\032\020\056\032\067\012\101\041\171\024\176\010" +
    "\001\002\000\042\010\ufff5\014\ufff5\015\ufff5\016\ufff5\017" +
    "\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\027\ufff5\032\ufff5" +
    "\056\ufff5\067\ufff5\101\ufff5\171\ufff5\176\ufff5\001\002\000" +
    "\042\010\016\014\ufff7\015\ufff7\016\ufff7\017\014\022\030" +
    "\023\042\024\035\025\ufff7\027\ufff7\032\ufff7\056\ufff7\067" +
    "\ufff7\101\041\171\024\176\ufff7\001\002\000\042\010\016" +
    "\014\005\015\021\016\017\017\014\022\030\023\042\024" +
    "\035\025\031\027\205\032\020\056\032\067\012\101\041" +
    "\171\024\176\010\001\002\000\044\002\uffdb\010\uffdb\014" +
    "\uffdb\015\uffdb\016\uffdb\017\uffdb\022\uffdb\023\uffdb\024\uffdb" +
    "\025\uffdb\027\uffdb\032\uffdb\056\uffdb\067\uffdb\101\uffdb\171" +
    "\uffdb\176\uffdb\001\002\000\042\010\016\014\005\015\021" +
    "\016\017\017\014\022\030\023\042\024\035\025\031\027" +
    "\ufff8\032\020\056\032\067\012\101\041\171\024\176\010" +
    "\001\002\000\042\010\016\014\ufff6\015\ufff6\016\ufff6\017" +
    "\014\022\030\023\042\024\035\025\ufff6\027\ufff6\032\ufff6" +
    "\056\ufff6\067\ufff6\101\041\171\024\176\ufff6\001\002\000" +
    "\042\010\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\022\ufffd" +
    "\023\ufffd\024\ufffd\025\ufffd\027\ufffd\032\ufffd\056\ufffd\067" +
    "\ufffd\101\ufffd\171\ufffd\176\ufffd\001\002\000\042\010\ufffc" +
    "\014\ufffc\015\ufffc\016\ufffc\017\ufffc\022\ufffc\023\ufffc\024" +
    "\ufffc\025\ufffc\027\ufffc\032\ufffc\056\ufffc\067\ufffc\101\ufffc" +
    "\171\ufffc\176\ufffc\001\002\000\010\004\214\012\215\021" +
    "\213\001\002\000\004\060\221\001\002\000\044\002\uffec" +
    "\010\uffec\014\uffec\015\uffec\016\uffec\017\uffec\022\uffec\023" +
    "\uffec\024\uffec\025\uffec\027\uffec\032\uffec\056\uffec\067\uffec" +
    "\101\uffec\171\uffec\176\uffec\001\002\000\010\013\uffd9\031" +
    "\uffd9\176\126\001\002\000\006\013\217\031\127\001\002" +
    "\000\004\004\220\001\002\000\044\002\uffea\010\uffea\014" +
    "\uffea\015\uffea\016\uffea\017\uffea\022\uffea\023\uffea\024\uffea" +
    "\025\uffea\027\uffea\032\uffea\056\uffea\067\uffea\101\uffea\171" +
    "\uffea\176\uffea\001\002\000\004\176\222\001\002\000\006" +
    "\004\223\012\224\001\002\000\044\002\uffed\010\uffed\014" +
    "\uffed\015\uffed\016\uffed\017\uffed\022\uffed\023\uffed\024\uffed" +
    "\025\uffed\027\uffed\032\uffed\056\uffed\067\uffed\101\uffed\171" +
    "\uffed\176\uffed\001\002\000\010\013\uffd9\031\uffd9\176\126" +
    "\001\002\000\006\013\226\031\127\001\002\000\004\004" +
    "\227\001\002\000\044\002\uffeb\010\uffeb\014\uffeb\015\uffeb" +
    "\016\uffeb\017\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\027" +
    "\uffeb\032\uffeb\056\uffeb\067\uffeb\101\uffeb\171\uffeb\176\uffeb" +
    "\001\002\000\006\026\232\113\231\001\002\000\006\056" +
    "\240\176\237\001\002\000\040\010\016\014\005\015\021" +
    "\016\017\017\014\022\030\023\042\024\035\025\031\032" +
    "\020\056\032\067\012\101\041\171\024\176\010\001\002" +
    "\000\042\010\016\014\005\015\021\016\017\017\014\022" +
    "\030\023\042\024\035\025\031\027\234\032\020\056\032" +
    "\067\012\101\041\171\024\176\010\001\002\000\044\002" +
    "\uffe0\010\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\022\uffe0" +
    "\023\uffe0\024\uffe0\025\uffe0\027\uffe0\032\uffe0\056\uffe0\067" +
    "\uffe0\101\uffe0\171\uffe0\176\uffe0\001\002\000\006\026\uffdf" +
    "\113\uffdf\001\002\000\006\026\243\113\242\001\002\000" +
    "\006\026\uffdd\113\uffdd\001\002\000\004\176\241\001\002" +
    "\000\006\026\uffdc\113\uffdc\001\002\000\006\056\240\176" +
    "\237\001\002\000\040\010\016\014\005\015\021\016\017" +
    "\017\014\022\030\023\042\024\035\025\031\032\020\056" +
    "\032\067\012\101\041\171\024\176\010\001\002\000\042" +
    "\010\016\014\005\015\021\016\017\017\014\022\030\023" +
    "\042\024\035\025\031\027\245\032\020\056\032\067\012" +
    "\101\041\171\024\176\010\001\002\000\044\002\uffe1\010" +
    "\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\022\uffe1\023\uffe1" +
    "\024\uffe1\025\uffe1\027\uffe1\032\uffe1\056\uffe1\067\uffe1\101" +
    "\uffe1\171\uffe1\176\uffe1\001\002\000\006\026\uffde\113\uffde" +
    "\001\002\000\010\004\116\012\250\021\115\001\002\000" +
    "\022\010\016\013\uffc7\017\014\022\030\023\042\024\035" +
    "\031\uffc7\171\024\001\002\000\006\013\252\031\063\001" +
    "\002\000\004\026\066\001\002\000\044\002\uffd4\010\uffd4" +
    "\014\uffd4\015\uffd4\016\uffd4\017\uffd4\022\uffd4\023\uffd4\024" +
    "\uffd4\025\uffd4\027\uffd4\032\uffd4\056\uffd4\067\uffd4\101\uffd4" +
    "\171\uffd4\176\uffd4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\042\002\010\004\032\006\024\014\022\017" +
    "\021\027\006\035\014\037\025\043\033\044\036\045\003" +
    "\046\037\047\035\050\026\051\005\052\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\002\162\006\024\014\022\017\021\027\006\035" +
    "\014\037\025\043\033\044\036\045\003\046\037\047\035" +
    "\050\026\051\005\052\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\013\047\020\046\043\051" +
    "\044\045\045\050\046\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\020\137\043" +
    "\051\044\045\045\050\046\052\001\001\000\004\021\064" +
    "\001\001\000\002\001\001\000\022\006\073\022\071\023" +
    "\070\024\074\043\075\044\066\045\072\046\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\006\111\023\070\024\120\043\075\044\066\045\072" +
    "\046\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\006\073\022\107\023\106\043\075\044\066\045\072" +
    "\046\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\006\111\043\075\044\066" +
    "\045\072\046\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\013\145\020\046\043\051" +
    "\044\045\045\050\046\052\001\001\000\002\001\001\000" +
    "\004\021\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\013\152\020\046\043\051\044\045\045\050\046" +
    "\052\001\001\000\002\001\001\000\004\021\154\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\013\157\020" +
    "\046\043\051\044\045\045\050\046\052\001\001\000\002" +
    "\001\001\000\004\021\161\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\003\167\006\171\017\166\032\170\043\033\044\036\045" +
    "\003\046\037\047\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\172\006\171\017\166\043\033\044" +
    "\036\045\003\046\037\047\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\002\175\003" +
    "\167\006\201\014\022\017\177\027\006\031\200\032\202" +
    "\035\014\037\025\041\203\043\033\044\036\045\003\046" +
    "\037\047\035\050\026\051\005\052\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\002" +
    "\207\006\024\014\022\017\021\027\006\035\014\037\210" +
    "\043\033\044\036\045\003\046\037\047\035\050\026\051" +
    "\005\052\012\001\001\000\002\001\001\000\022\003\172" +
    "\006\171\017\166\043\033\044\036\045\003\046\037\047" +
    "\035\001\001\000\046\002\175\003\167\006\201\014\022" +
    "\017\177\027\006\031\205\032\206\035\014\037\025\043" +
    "\033\044\036\045\003\046\037\047\035\050\026\051\005" +
    "\052\012\001\001\000\002\001\001\000\040\002\207\006" +
    "\024\014\022\017\021\027\006\035\014\037\210\043\033" +
    "\044\036\045\003\046\037\047\035\050\026\051\005\052" +
    "\012\001\001\000\022\003\172\006\171\017\166\043\033" +
    "\044\036\045\003\046\037\047\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\042\215\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\042\224\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\235\033\234\001\001\000" +
    "\042\002\175\006\024\014\022\017\021\027\006\031\232" +
    "\035\014\037\025\043\033\044\036\045\003\046\037\047" +
    "\035\050\026\051\005\052\012\001\001\000\040\002\207" +
    "\006\024\014\022\017\021\027\006\035\014\037\210\043" +
    "\033\044\036\045\003\046\037\047\035\050\026\051\005" +
    "\052\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\245\001\001\000\042\002\175\006" +
    "\024\014\022\017\021\027\006\031\243\035\014\037\025" +
    "\043\033\044\036\045\003\046\037\047\035\050\026\051" +
    "\005\052\012\001\001\000\040\002\207\006\024\014\022" +
    "\017\021\027\006\035\014\037\210\043\033\044\036\045" +
    "\003\046\037\047\035\050\026\051\005\052\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\013\250\020\046\043\051\044\045\045\050\046\052" +
    "\001\001\000\002\001\001\000\004\021\252\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
//@@CUPDBG1

  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
//@@CUPDBG2
 return lexer.next_token(); 
    }

//@@CUPDBG0

   
 	protected Lexer lexer;
  	protected MultiTree syntaxTree = new MultiTree(); 
	
 	 public MultiTree getSyntaxTree()
  	{
		return syntaxTree;
  	}
  	protected MultiTreeNode createDeclarationNode(MultiTreeNode declaration) { throw new UnsupportedOperationException();}
 	protected MultiTreeNode createFunctionDeclarationNode(String typeSpecifier, String identifierName, MultiTreeNode paramsList, MultiTreeNode compoundStatement) { throw new UnsupportedOperationException(); }
	protected MultiTreeNode createObjDeclarationNode(String typeSpecifier, String identifierName, MultiTreeNode compoundStatement) { throw new UnsupportedOperationException(); }
  	protected MultiTreeNode createNamespaceDeclarationNode(String typeSpecifier, String identifierList, MultiTreeNode scopeList, MultiTreeNode compoundStatement) { throw new UnsupportedOperationException(); }
	protected MultiTreeNode createInstanceDeclarationNode(String typeSpecifier, String identifierName, String paramsList, String value) { throw new UnsupportedOperationException(); }
	protected MultiTreeNode createAccessSpecifiersDeclarationNode(String typeSpecifier, MultiTreeNode compoundStatement) { throw new UnsupportedOperationException(); }
	protected MultiTreeNode createTypeSpecifier(String typeName){ throw new UnsupportedOperationException();  } 
	protected MultiTreeNode createTypeSpecifier(String typeName, String typeNameVal){ throw new UnsupportedOperationException();  } 
	protected MultiTreeNode createListNode(String listName, MultiTreeNode firstChild){throw new UnsupportedOperationException();  }
	protected MultiTreeNode createListNode(String listName, String firstChild){throw new UnsupportedOperationException();  }
	protected MultiTreeNode createListNode(String firstChild){throw new UnsupportedOperationException();  }
	protected MultiTreeNode createListNode(MultiTreeNode firstChild){throw new UnsupportedOperationException();  }
	protected MultiTreeNode createVarDeclaration(String typeSpecifier, String identifierName, Integer value ){throw new UnsupportedOperationException();  }
	protected MultiTreeNode createVarDeclaration(String typeSpecifier, String identifierName, char value ){throw new UnsupportedOperationException();  }
	protected MultiTreeNode createVarDeclaration(String typeSpecifier, String identifierName, String value ){throw new UnsupportedOperationException();  }
	protected MultiTreeNode createVarDeclaration(String typeSpecifier, String identifierName){throw new UnsupportedOperationException();  }
	protected MultiTreeNode createCompoundStatement(MultiTreeNode declarations, MultiTreeNode instructions){throw new UnsupportedOperationException();  }
	protected MultiTreeNode createIfStatement(String IDENT, MultiTreeNode ifInstructions, MultiTreeNode elseInstructions){throw new UnsupportedOperationException();  }
	protected MultiTreeNode createCallFunction(String IDENT, String parameters){throw new UnsupportedOperationException();  }
	protected MultiTreeNode createValueLiteral(String typeName) {throw new UnsupportedOperationException();  }
  	protected MultiTreeNode createValueLiteral(Integer typeName) {throw new UnsupportedOperationException();  }
  	protected MultiTreeNode createValueLiteral(double typeName) {throw new UnsupportedOperationException();  }
  	protected MultiTreeNode createValueLiteral(float typeName) {throw new UnsupportedOperationException();  } 
  	protected MultiTreeNode createValueLiteral(char typeName) {throw new UnsupportedOperationException();  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // expr_list ::= expr 
            {
              MultiTreeNode RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode d = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG3
 RESULT = syntaxTree.create("ProgramUnit", d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= expr_list EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode start_val = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr_list ::= expr_list expr 
            {
              MultiTreeNode RESULT =null;
		Location puxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location puxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode pu = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode d = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG4
 RESULT = pu; syntaxTree.addChildNode(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // list_expr ::= expr 
            {
              MultiTreeNode RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode d = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG5
 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // list_expr ::= list_expr expr 
            {
              MultiTreeNode RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode l = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode d = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG6
 RESULT = l; RESULT.addChild(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // list_expr ::= list_expr access_declarations 
            {
              MultiTreeNode RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode l = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location addefxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location addefxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode addef = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG7
 RESULT = l; RESULT.addChild(addef); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // list_access ::= access_expr 
            {
              MultiTreeNode RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode d = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG8
 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_access",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // list_access ::= list_access access_expr 
            {
              MultiTreeNode RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode l = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode d = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG9
 RESULT = l; RESULT.addChild(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_access",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // list ::= list_expr 
            {
              MultiTreeNode RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode l = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG10
RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // list ::= list list_expr 
            {
              MultiTreeNode RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode l = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location lexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode le = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG11
 RESULT = l; RESULT.addChild(le); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // list ::= list_access 
            {
              MultiTreeNode RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode l = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG12
 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // list ::= list list_access 
            {
              MultiTreeNode RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode l = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location lexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode le = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG13
 RESULT = l; RESULT.addChild(le); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= types 
            {
              MultiTreeNode RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode type = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG14
 RESULT = createDeclarationNode(type); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= function_declaration 
            {
              MultiTreeNode RESULT =null;
		Location fdefxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fdefxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode fdef = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG15
 RESULT = createDeclarationNode(fdef); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= object_declaration 
            {
              MultiTreeNode RESULT =null;
		Location cdefxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cdefxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode cdef = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG16
 RESULT = createDeclarationNode(cdef); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= namespaces 
            {
              MultiTreeNode RESULT =null;
		Location ndefxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ndefxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode ndef = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG17
 RESULT = createDeclarationNode(ndef); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= instances 
            {
              MultiTreeNode RESULT =null;
		Location idefxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idefxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode idef = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG18
 RESULT = createDeclarationNode(idef); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= access_declarations 
            {
              MultiTreeNode RESULT =null;
		Location addefxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location addefxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode addef = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG19
 RESULT = createDeclarationNode(addef); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // access_expr ::= types 
            {
              MultiTreeNode RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode type = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG20
 RESULT = createDeclarationNode(type); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("access_expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // access_expr ::= function_declaration 
            {
              MultiTreeNode RESULT =null;
		Location fdefxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fdefxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode fdef = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG21
 RESULT = createDeclarationNode(fdef); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("access_expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instances ::= IDENT IDENT EQUAL NEW IDENT SEMI 
            {
              MultiTreeNode RESULT =null;
		Location id1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location id1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location id2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location id2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location id3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location id3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String id3 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG22
 RESULT = createInstanceDeclarationNode(id1, id2, id3, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instances",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instances ::= IDENT IDENT SEMI 
            {
              MultiTreeNode RESULT =null;
		Location id1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location id1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location id2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location id2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG23
 RESULT = createInstanceDeclarationNode(id1, id2, null, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instances",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instances ::= IDENT IDENT EQUAL NEW IDENT LPAREN identifier_list RPAREN SEMI 
            {
              MultiTreeNode RESULT =null;
		Location id1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).xleft;
		Location id1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).xright;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		Location id2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xleft;
		Location id2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xright;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		Location id3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location id3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String id3 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String il = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG24
 RESULT = createInstanceDeclarationNode(id1, id2, id3, il); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instances",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instances ::= IDENT IDENT LPAREN identifier_list RPAREN SEMI 
            {
              MultiTreeNode RESULT =null;
		Location id1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location id1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location id2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location id2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String il = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG25
 RESULT = createInstanceDeclarationNode(id1, id2, null, il); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instances",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // specifiers ::= CLASS 
            {
              String RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object ts = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG26
 RESULT = "CLASS"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("specifiers",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // specifiers ::= STRUCT 
            {
              String RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object ts = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG27
 RESULT = "STRUCT"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("specifiers",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // access_declarations ::= access_specifiers COLON list_access 
            {
              MultiTreeNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location csxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location csxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode cs = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG28
 RESULT = createAccessSpecifiersDeclarationNode(id, cs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("access_declarations",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // access_specifiers ::= PUBLIC 
            {
              String RESULT =null;
		//@@CUPDBG29
 RESULT = "PUBLIC"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("access_specifiers",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // access_specifiers ::= PRIVATE 
            {
              String RESULT =null;
		//@@CUPDBG30
 RESULT = "PRIVATE"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("access_specifiers",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // access_specifiers ::= PROTECTED 
            {
              String RESULT =null;
		//@@CUPDBG31
 RESULT = "PROTECTED"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("access_specifiers",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // namespace_declarations ::= NAMESPACE 
            {
              String RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object ts = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG32
 RESULT = "NAMESPACE"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("namespace_declarations",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // namespace_declarations ::= INLINE NAMESPACE 
            {
              String RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object ts = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG33
 RESULT = "INLINE NAMESPACE"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("namespace_declarations",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // namespaces ::= namespace_declarations IDENT SCOPE inline_namespaces CLPAREN list_expr CRPAREN 
            {
              MultiTreeNode RESULT =null;
		Location ndxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location ndxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		String nd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location inxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location inxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		MultiTreeNode in = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location csxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location csxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode cs = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG34
 RESULT = createNamespaceDeclarationNode(nd, id, in, cs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("namespaces",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // namespaces ::= namespace_declarations IDENT CLPAREN list_expr CRPAREN 
            {
              MultiTreeNode RESULT =null;
		Location ndxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location ndxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String nd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location csxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location csxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode cs = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG35
 RESULT = createNamespaceDeclarationNode(nd, id, null, cs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("namespaces",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // inline_namespaces ::= inline_types 
            {
              MultiTreeNode RESULT =null;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode il = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG36
 RESULT = createListNode("ScopeDeclaration", il); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inline_namespaces",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // inline_namespaces ::= inline_namespaces SCOPE inline_types 
            {
              MultiTreeNode RESULT =null;
		Location inxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location inxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		MultiTreeNode in = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode il = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG37
 RESULT = in; RESULT.addChild(il); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inline_namespaces",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // inline_types ::= IDENT 
            {
              MultiTreeNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG38
 RESULT = createTypeSpecifier("" + id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inline_types",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // inline_types ::= INLINE IDENT 
            {
              MultiTreeNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG39
 RESULT = createTypeSpecifier("inline " + id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inline_types",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // object_declaration ::= specifiers IDENT CLPAREN list CRPAREN 
            {
              MultiTreeNode RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String ts = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location csxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location csxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode cs = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG40
 RESULT = createObjDeclarationNode(ts, id, cs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("object_declaration",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // object_declaration ::= specifiers IDENT CLPAREN CRPAREN 
            {
              MultiTreeNode RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String ts = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG41
 RESULT = createObjDeclarationNode(ts, id, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("object_declaration",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // identifier_list ::= 
            {
              String RESULT =null;
		//@@CUPDBG42

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // identifier_list ::= IDENT 
            {
              String RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG43
 RESULT = "" + id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // identifier_list ::= identifier_list COMMA IDENT 
            {
              String RESULT =null;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String il = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG44
 RESULT = il + ", " + id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // function_declaration ::= literal IDENT LPAREN params RPAREN compound_statement 
            {
              MultiTreeNode RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		String ts = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		MultiTreeNode pl = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location csxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location csxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode cs = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG45
 RESULT = createFunctionDeclarationNode(ts, id, pl, cs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // function_declaration ::= char IDENT LPAREN params RPAREN compound_statement 
            {
              MultiTreeNode RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		String ts = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		MultiTreeNode pl = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location csxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location csxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode cs = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG46
 RESULT = createFunctionDeclarationNode(ts, id, pl, cs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // function_declaration ::= string IDENT LPAREN params RPAREN compound_statement 
            {
              MultiTreeNode RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		String ts = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		MultiTreeNode pl = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location csxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location csxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode cs = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG47
 RESULT = createFunctionDeclarationNode(ts, id, pl, cs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // function_declaration ::= boolean IDENT LPAREN params RPAREN compound_statement 
            {
              MultiTreeNode RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		String ts = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		MultiTreeNode pl = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location csxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location csxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode cs = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG48
 RESULT = createFunctionDeclarationNode(ts, id, pl, cs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // function_declaration ::= void_literal IDENT LPAREN params RPAREN compound_statement 
            {
              MultiTreeNode RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		String ts = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		MultiTreeNode pl = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location csxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location csxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode cs = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG49
 RESULT = createFunctionDeclarationNode(ts, id, pl, cs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // instructions_list ::= call_function 
            {
              MultiTreeNode RESULT =null;
		Location cfxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cfxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode cf = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG50
 RESULT = createListNode("InstructionsList", cf); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions_list",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // instructions_list ::= instructions_list call_function 
            {
              MultiTreeNode RESULT =null;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode il = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location cfxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cfxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode cf = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG51
 RESULT = il;	RESULT.addChild(cf); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions_list",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // call_function ::= IDENT LPAREN identifier_list RPAREN SEMI 
            {
              MultiTreeNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String il = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG52
 RESULT = createCallFunction(id, il); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // local_declaration_list ::= types 
            {
              MultiTreeNode RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG53
 RESULT = createListNode("LocalDeclarations", t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("local_declaration_list",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // local_declaration_list ::= local_declaration_list types 
            {
              MultiTreeNode RESULT =null;
		Location ldlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ldlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode ldl = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG54
 RESULT = ldl; RESULT.addChild(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("local_declaration_list",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // compound_statement ::= CLPAREN CRPAREN 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG55
 RESULT = createCompoundStatement(null, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // compound_statement ::= CLPAREN local_declaration_list CRPAREN 
            {
              MultiTreeNode RESULT =null;
		Location ldlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ldlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode ldl = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG56
 RESULT = createCompoundStatement(ldl, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // compound_statement ::= CLPAREN local_declaration_list instructions_list CRPAREN 
            {
              MultiTreeNode RESULT =null;
		Location ldlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ldlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		MultiTreeNode ldl = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode il = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG57
 RESULT = createCompoundStatement(ldl, il); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // compound_statement ::= CLPAREN instructions_list local_declaration_list CRPAREN 
            {
              MultiTreeNode RESULT =null;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		MultiTreeNode il = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location ldlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ldlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode ldl = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG58
 RESULT = createCompoundStatement(il, ldl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // compound_statement ::= CLPAREN instructions_list CRPAREN 
            {
              MultiTreeNode RESULT =null;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode il = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG59
 RESULT = createCompoundStatement(null, il); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // params ::= 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG60
 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // params ::= params_list 
            {
              MultiTreeNode RESULT =null;
		Location fpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode fp = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG61
 RESULT = createListNode(fp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // params ::= params COMMA params_list 
            {
              MultiTreeNode RESULT =null;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		MultiTreeNode pl = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location fpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode fp = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG62
 RESULT = pl; RESULT.addChild(fp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // literal ::= INT 
            {
              String RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG63
 RESULT = "INT"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // literal ::= FLOAT 
            {
              String RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG64
 RESULT = "FLOAT"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // literal ::= DOUBLE 
            {
              String RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG65
 RESULT = "DOUBLE"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // void_literal ::= VOID 
            {
              String RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG66
 RESULT = "VOID"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("void_literal",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // string ::= STR 
            {
              String RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG67
 RESULT = "STRING"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // char ::= CHAR 
            {
              String RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG68
 RESULT = "CHAR"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("char",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // boolean ::= BOOLEAN 
            {
              String RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG69
 RESULT = "BOOLEAN"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // types ::= literal IDENT SEMI 
            {
              MultiTreeNode RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String ts = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG70
 RESULT = createVarDeclaration(ts, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("types",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // types ::= string IDENT SEMI 
            {
              MultiTreeNode RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String ts = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG71
 RESULT = createVarDeclaration(ts, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("types",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // types ::= char IDENT SEMI 
            {
              MultiTreeNode RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String ts = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG72
 RESULT = createVarDeclaration(ts, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("types",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // types ::= boolean IDENT SEMI 
            {
              MultiTreeNode RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String ts = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG73
 RESULT = createVarDeclaration(ts, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("types",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // types ::= literal IDENT EQUAL NUMBER SEMI 
            {
              MultiTreeNode RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String ts = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location cvalxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cvalxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Integer cval = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG74
 RESULT = createVarDeclaration(ts, id, cval); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("types",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // types ::= string IDENT EQUAL STRNG SEMI 
            {
              MultiTreeNode RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String ts = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location cvalxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cvalxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object cval = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG75
 RESULT = createVarDeclaration(ts, id, "" + cval); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("types",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // types ::= char IDENT EQUAL CHARACTER SEMI 
            {
              MultiTreeNode RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String ts = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location cvalxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cvalxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object cval = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG76
 RESULT = createVarDeclaration(ts, id, "" + cval); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("types",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // params_list ::= literal IDENT 
            {
              MultiTreeNode RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String ts = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG77
 RESULT = createVarDeclaration(ts, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // params_list ::= string IDENT 
            {
              MultiTreeNode RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String ts = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG78
 RESULT = createVarDeclaration(ts, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // params_list ::= char IDENT 
            {
              MultiTreeNode RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String ts = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG79
 RESULT = createVarDeclaration(ts, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // params_list ::= boolean IDENT 
            {
              MultiTreeNode RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String ts = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG80
 RESULT = createVarDeclaration(ts, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // params_list ::= literal IDENT EQUAL NUMBER 
            {
              MultiTreeNode RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String ts = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location cvalxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cvalxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer cval = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG81
 RESULT = createVarDeclaration(ts, id, cval); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // params_list ::= string IDENT EQUAL STRNG 
            {
              MultiTreeNode RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String ts = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location cvalxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cvalxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object cval = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG82
 RESULT = createVarDeclaration(ts, id, "" + cval); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // params_list ::= char IDENT EQUAL CHARACTER 
            {
              MultiTreeNode RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String ts = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location cvalxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cvalxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object cval = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG83
 RESULT = createVarDeclaration(ts, id, "" + cval); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
